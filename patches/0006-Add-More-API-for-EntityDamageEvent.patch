From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Sun, 8 Aug 2021 03:05:54 +0900
Subject: [PATCH] Add more API for EntityDamageEvent


diff --git a/src/main/java/moe/caramel/daydream/world/DamageMata.java b/src/main/java/moe/caramel/daydream/world/DamageMata.java
new file mode 100644
index 0000000000000000000000000000000000000000..aca7b9e9076a6c48cf3f27f42f841cd076dca587
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/world/DamageMata.java
@@ -0,0 +1,244 @@
+package moe.caramel.daydream.world;
+
+import org.bukkit.entity.Entity;
+import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import java.util.Map;
+
+/**
+ * 대미지 메타데이터
+ */
+public interface DamageMata {
+
+    int NO_DATA = -1;
+
+    // ==============================================
+
+    /**
+     * NMS DamageSource를 가져옵니다.
+     *
+     * @return NMS DamageSource
+     */
+    @NotNull
+    Object getDamageSource();
+
+    /**
+     * 배고픔 고갈 정도를 가져옵니다.
+     *
+     * @return 배고픔 고갈 정도
+     */
+    float getFoodExhaustion();
+
+    /**
+     * 간접 공격의 여부를 가져옵니다.
+     *
+     * @return 간접 공격의 여부
+     */
+    boolean isIndirect();
+
+    /**
+     * 이 엔티티의 공격자를 가져옵니다.
+     * 예시) 화살
+     *
+     * @return 공격자
+     */
+    @Nullable
+    Entity getDirectEntity();
+
+    /**
+     * (존재하는 경우) 이 엔티티의 실제 공격자를 가져옵니다.
+     * 예시) 화살을 발사한 공격자를 반환
+     *
+     * @return 실제 공격자
+     */
+    @Nullable
+    Entity getEntity();
+
+    /**
+     * 이 대미지 소스의 ID를 가져옵니다.
+     *
+     * @return 대미지 소스의 ID
+     */
+    @NotNull
+    String getId();
+
+    /**
+     * 난이도에 따라 대미지 스케일이 변하는지 여부를 가져옵니다.
+     *
+     * @return 가변 스케일 여부
+     */
+    boolean scalesWithDifficulty();
+
+    /**
+     * 이 대미지 소스의 발생 위치를 가져옵니다.
+     * (일반적으로 BadRespawnPoint에서 발생)
+     *
+     * @return 이 대미지 소스의 발생 위치
+     */
+    @Nullable
+    Vector getSourcePosition();
+
+    /**
+     * 크리티컬 대미지 여부를 가져옵니다.
+     *
+     * @return 크리티컬 대미지 여부
+     */
+    boolean isCritical();
+
+    /**
+     * 검에 의한 쓸기 공격 여부를 가져옵니다.
+     *
+     * @return 쓸기 공격 여부
+     */
+    boolean isSweep();
+
+    /**
+     * 눈골렘이 녹아 발생한 대미지인지 확인합니다.
+     *
+     * @return 눈골렘이 녹아 발생한 대미지 여부
+     */
+    boolean isMelting();
+
+    /**
+     * 독 포션에 의한 대미지인지 확인합니다.
+     *
+     * @return 독 포션에 의한 대미지 여부
+     */
+    boolean isPoison();
+
+    // ====================== (DamageTypes)
+
+    boolean isTypeInFire();
+    boolean isTypeLightningBolt();
+    boolean isTypeOnFire();
+    boolean isTypeLava();
+    boolean isTypeHotFloor();
+    boolean isTypeInWall();
+    boolean isTypeCramming();
+    boolean isTypeDrown();
+    boolean isTypeStarve();
+    boolean isTypeCactus();
+    boolean isTypeFall();
+    boolean isTypeFlyIntoWall();
+    boolean isTypeFellOutOfWorld();
+    boolean isTypeGeneric();
+    boolean isTypeMagic();
+    boolean isTypeWither();
+    boolean isTypeDragonBreath();
+    boolean isTypeDryOut();
+    boolean isTypeSweetBerryBush();
+    boolean isTypeFreeze();
+    boolean isTypeStalagmite();
+    boolean isTypeFallingBlock();
+    boolean isTypeFallingAnvil();
+    boolean isTypeFallingStalactite();
+    boolean isTypeSting();
+    boolean isTypeMobAttack();
+    boolean isTypeMobAttackNoAggro();
+    boolean isTypePlayerAttack();
+    boolean isTypeArrow();
+    boolean isTypeTrident();
+    boolean isTypeMobProjectile();
+    boolean isTypeFireworks();
+    boolean isTypeFireball();
+    boolean isTypeUnattributedFireball();
+    boolean isTypeWitherSkull();
+    boolean isTypeThrown();
+    boolean isTypeIndirectMagic();
+    boolean isTypeThorns();
+    boolean isTypeExplosion();
+    boolean isTypePlayerExplosion();
+    boolean isTypeSonicBoom();
+    boolean isTypeBadRespawnPoint();
+    boolean isTypeOutsideBorder();
+    boolean isTypeGenericKill();
+
+    // ====================== (Tags)
+
+    boolean hasTagDamagesHelmet();
+    boolean hasTagBreezeImmuneTo();
+    boolean hasTagBypassesArmor();
+    boolean hasTagBypassesShield();
+    boolean hasTagBypassesInvulnerability();
+    boolean hasTagBypassesCooldown();
+    boolean hasTagBypassesEffects();
+    boolean hasTagBypassesResistance();
+    boolean hasTagBypassesEnchantments();
+    boolean hasTagIsFire();
+    boolean hasTagIsProjectile();
+    boolean hasTagWitchResistantTo();
+    boolean hasTagIsExplosion();
+    boolean hasTagIsFall();
+    boolean hasTagIsDrowning();
+    boolean hasTagIsFreezing();
+    boolean hasTagIsLighting();
+    boolean hasTagNoAnger();
+    boolean hasTagNoImpact();
+    boolean hasTagAlwaysMostSignificantFall();
+    boolean hasTagWitherImmuneTo();
+    boolean hasTagIgnitesArmorStands();
+    boolean hasTagBurnsArmorStands();
+    boolean hasTagAvoidsGuardianThorns();
+    boolean hasTagAlwaysTriggersSilverfish();
+    boolean hasTagAlwaysHurtsEnderDragons();
+    boolean hasTagNoKnockback();
+    boolean hasTagAlwaysKillsArmorStands();
+    boolean hasTagCanBreakArmorStand();
+
+    // ==============================================
+
+    /**
+     * 사용자 지정 메타데이터를 가져옵니다.
+     * 초기 값은 {@code null}입니다.
+     *
+     * @return 사용자 지정 메타데이터
+     */
+    @Nullable
+    Map<String, Object> getMetadata();
+
+    /**
+     * 사용자 지정 메타데이터를 설정합니다.
+     * 데이터를 추가하는 것이 아닌 완전히 덮어 씌웁니다.
+     *
+     * @param metadata 사용자 지정 메타데이터
+     */
+    void setMetadata(final @Nullable Map<String, Object> metadata);
+
+    // ==============================================
+
+    /**
+     * 대상 엔티티에게 설정될 무적 시간을 가져옵니다.
+     * LivingEntity가 아닌 경우 {@link #NO_DATA}를 반환합니다.
+     *
+     * @return 무적 시간
+     */
+    int getNoDamageTick();
+
+    /**
+     * 대상 엔티티의 무적 시간을 설정합니다.
+     * LivingEntity가 아닌 경우 값이 적용되지 않습니다.
+     *
+     * @param ticks 무적 시간
+     */
+    void setNoDamageTick(final int ticks);
+
+    // ==============================================
+
+    /**
+     * 대미지 처리 이후 받게 될 강제된 넉백을 가져옵니다.
+     *
+     * @return 대미지 처리 이후 받게 될 넉백
+     */
+    @Nullable
+    Vector getOverrideKnockback();
+
+    /**
+     * 대미지 처리 이후 받게 될 넉백을 강제로 설정합니다.
+     * {@code null}인 경우 바닐라의 설정을 따르며, {@link Vector}의
+     * 크기가 0인 경우 넉백을 적용하지 않습니다.
+     *
+     * @param knockback 대미지 처리 이후 받게 될 넉백
+     */
+    void setOverrideKnockback(final @Nullable Vector knockback);
+}
diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
index 9a65c4f614a6c358d74491794d7b25172a00bc11..d9dc45353d3efa7a3479a24a816dcbe394410dc7 100644
--- a/src/main/java/org/bukkit/UnsafeValues.java
+++ b/src/main/java/org/bukkit/UnsafeValues.java
@@ -300,4 +300,6 @@ public interface UnsafeValues {
     // Paper end - lifecycle event API
 
     @NotNull java.util.List<net.kyori.adventure.text.Component> computeTooltipLines(@NotNull ItemStack itemStack, @NotNull io.papermc.paper.inventory.tooltip.TooltipContext tooltipContext, @Nullable org.bukkit.entity.Player player); // Paper - expose itemstack tooltip lines
+
+    @NotNull moe.caramel.daydream.world.DamageMata getDamageMeta(@NotNull Object damageSource); // Daydream - Add more API for EntityDamageEvent
 }
diff --git a/src/main/java/org/bukkit/damage/DamageSource.java b/src/main/java/org/bukkit/damage/DamageSource.java
index 7635610e56c051ce3c8a876911ba5cd0a9248496..f4b2ba6610ce3119f612047b6452777a91c8d30e 100644
--- a/src/main/java/org/bukkit/damage/DamageSource.java
+++ b/src/main/java/org/bukkit/damage/DamageSource.java
@@ -13,6 +13,16 @@ import org.jetbrains.annotations.Nullable;
 @ApiStatus.Experimental
 public interface DamageSource {
 
+    // Daydream start - Add more API for EntityDamageEvent
+    /**
+     * 대미지 메타데이터를 가져옵니다.
+     *
+     * @return 대미지 메타데이터
+     */
+    @NotNull
+    public moe.caramel.daydream.world.DamageMata getDamageMeta();
+    // Daydream end - Add more API for EntityDamageEvent
+
     /**
      * Get the {@link DamageType}.
      *
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
index 3b20000d9ac3e29fe3bc5093e6635377bee88dbd..0defdf1cc8722e8aef497fa5bb00138d836498e6 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
@@ -48,6 +48,18 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
         this.damageSource = damageSource;
     }
 
+    // Daydream start - Add more API for EntityDamageEvent
+    /**
+     * 대미지 메타데이터를 가져옵니다.
+     *
+     * @return 대미지 메타데이터
+     */
+    @NotNull
+    public moe.caramel.daydream.world.DamageMata getDamageMeta() {
+        return damageSource.getDamageMeta();
+    }
+    // Daydream end - Add more API for EntityDamageEvent
+
     @Override
     public boolean isCancelled() {
         return cancelled;
