From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Sun, 8 Aug 2021 03:05:54 +0900
Subject: [PATCH] Add More API for EntityDamageEvent


diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
index c661eab343ae76488de701630424e2d589f44fc0..93f4b365d88d95a0f54a55eec4e631166ff84654 100644
--- a/src/main/java/org/bukkit/UnsafeValues.java
+++ b/src/main/java/org/bukkit/UnsafeValues.java
@@ -250,4 +250,9 @@ public interface UnsafeValues {
      */
     void setBiomeKey(RegionAccessor accessor, int x, int y, int z, NamespacedKey biomeKey);
     // Paper end
+
+    // Daydream start - Add More API for EntityDamageEvent
+    @Nullable java.util.Map<String, Object> getDamageSourceMetadata(@NotNull Object damageSource);
+    void setDamageSourceMetadata(@NotNull Object damageSource, @Nullable java.util.Map<String, Object> metadata);
+    // Daydream end - Add More API for EntityDamageEvent
 }
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java
index 461727dc7f06efb3550fc370e0db5bd04ba89711..913747f0b338a4217a7d9c90b6cb03f148abc196 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java
@@ -13,16 +13,25 @@ import org.jetbrains.annotations.Nullable;
 public class EntityDamageByBlockEvent extends EntityDamageEvent {
     private final Block damager;
 
+    @Deprecated // Daydream - Add More API for EntityDamageEvent
     public EntityDamageByBlockEvent(@Nullable final Block damager, @NotNull final Entity damagee, @NotNull final DamageCause cause, final double damage) {
         super(damagee, cause, damage);
         this.damager = damager;
     }
 
+    @Deprecated // Daydream - Add More API for EntityDamageEvent
     public EntityDamageByBlockEvent(@Nullable final Block damager, @NotNull final Entity damagee, @NotNull final DamageCause cause, @NotNull final Map<DamageModifier, Double> modifiers, @NotNull final Map<DamageModifier, ? extends Function<? super Double, Double>> modifierFunctions) {
         super(damagee, cause, modifiers, modifierFunctions);
         this.damager = damager;
     }
 
+    // Daydream start - Add More API for EntityDamageEvent
+    public EntityDamageByBlockEvent(@Nullable final Block damager, @NotNull final Entity damagee, @NotNull final DamageCause cause, @NotNull final Map<DamageModifier, Double> modifiers, @NotNull final Map<DamageModifier, ? extends Function<? super Double, Double>> modifierFunctions, @NotNull Object damageSource) {
+        super(damagee, cause, modifiers, modifierFunctions, damageSource);
+        this.damager = damager;
+    }
+    // Daydream end - Add More API for EntityDamageEvent
+
     /**
      * Returns the block that damaged the player.
      *
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
index 7ce8f1a26c1b33dd0eb6e6435952fd73abf49879..59d21ad3afce7dfe49ebaec9c0493b49b6653b37 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
@@ -25,9 +25,15 @@ public class EntityDamageByEntityEvent extends EntityDamageEvent {
     }
 
     private final boolean critical;
+    @Deprecated // Daydream - Add More API for EntityDamageEvent
     public EntityDamageByEntityEvent(@NotNull final Entity damager, @NotNull final Entity damagee, @NotNull final DamageCause cause, @NotNull final Map<DamageModifier, Double> modifiers, @NotNull final Map<DamageModifier, ? extends Function<? super Double, Double>> modifierFunctions, boolean critical) {
+        // Daydream start - Add More API for EntityDamageEvent
+        this(damager, damagee, cause, modifiers, modifierFunctions, critical, null);
+    }
+    public EntityDamageByEntityEvent(@NotNull final Entity damager, @NotNull final Entity damagee, @NotNull final DamageCause cause, @NotNull final Map<DamageModifier, Double> modifiers, @NotNull final Map<DamageModifier, ? extends Function<? super Double, Double>> modifierFunctions, boolean critical, @NotNull Object damageSource) {
+        // Daydream end - Add More API for EntityDamageEvent
         // Paper end
-        super(damagee, cause, modifiers, modifierFunctions);
+        super(damagee, cause, modifiers, modifierFunctions, damageSource); // Daydream - Add More API for EntityDamageEvent
         this.damager = damager;
         // Paper start - add critical damage API
         this.critical = critical;
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
index 6241f31e7326954b2e704da46bf0115adbcf8671..af580f6f2bff20c4cd7f2e45ec12a9f27ca3776d 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
@@ -27,11 +27,31 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
     private boolean cancelled;
     private final DamageCause cause;
 
+    @Deprecated // Daydream - Add More API for EntityDamageEvent
     public EntityDamageEvent(@NotNull final Entity damagee, @NotNull final DamageCause cause, final double damage) {
         this(damagee, cause, new EnumMap<DamageModifier, Double>(ImmutableMap.of(DamageModifier.BASE, damage)), new EnumMap<DamageModifier, Function<? super Double, Double>>(ImmutableMap.of(DamageModifier.BASE, ZERO)));
     }
 
+    @Deprecated // Daydream - Add More API for EntityDamageEvent
     public EntityDamageEvent(@NotNull final Entity damagee, @NotNull final DamageCause cause, @NotNull final Map<DamageModifier, Double> modifiers, @NotNull final Map<DamageModifier, ? extends Function<? super Double, Double>> modifierFunctions) {
+        // Daydream start - Add More API for EntityDamageEvent
+        this(damagee, cause, modifiers, modifierFunctions, null);
+    }
+
+    private final Object damageSource;
+
+    /**
+     * Gets the NMS DamageSource.
+     *
+     * @return NMS DamageSource
+     */
+    @NotNull
+    public Object getDamageSource() {
+        return damageSource;
+    }
+
+    public EntityDamageEvent(@NotNull final Entity damagee, @NotNull final DamageCause cause, @NotNull final Map<DamageModifier, Double> modifiers, @NotNull final Map<DamageModifier, ? extends Function<? super Double, Double>> modifierFunctions, @NotNull Object damageSource) {
+        // Daydream end - Add More API for EntityDamageEvent
         super(damagee);
         Preconditions.checkArgument(modifiers.containsKey(DamageModifier.BASE), "BASE DamageModifier missing");
         Preconditions.checkArgument(!modifiers.containsKey(null), "Cannot have null DamageModifier");
@@ -42,6 +62,7 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
         this.cause = cause;
         this.modifiers = modifiers;
         this.modifierFunctions = modifierFunctions;
+        this.damageSource = damageSource; // Daydream - Add More API for EntityDamageEvent
     }
 
     @Override
@@ -54,6 +75,53 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
         cancelled = cancel;
     }
 
+    // Daydream start - Add More API for EntityDamageEvent
+    private int noDamageTick = -1;
+    private org.bukkit.util.Vector knockbackOverride;
+
+    /**
+     * Returns the no damage ticks of the living entity to be set after the
+     * event is processed.
+     *
+     * @return living entity's no damage ticks.
+     * if the return value is -1, it is not modified yet
+     */
+    public int getNoDamageTick() {
+        return noDamageTick;
+    }
+
+    /**
+     * Sets the no damage ticks of the living entity to be set after the
+     * event is processed.
+     *
+     * @param ticks amount of no damage ticks
+     */
+    public void setNoDamageTick(int ticks) {
+        this.noDamageTick = Math.max(0, ticks);
+    }
+
+    /**
+     * 수정된 넉백 벡터를 가져옵니다.
+     *
+     * @return 수정된 넉백 벡터 (없다면 {@code null}을 반환)
+     */
+    @org.jetbrains.annotations.Nullable
+    public org.bukkit.util.Vector getKnockbackOverride() {
+        return knockbackOverride;
+    }
+
+    /**
+     * 수정할 넉백 벡터를 설정합니다.
+     * <br>
+     * 크리티컬 대미지의 경우 작동을 하지 않습니다.
+     *
+     * @param knockback 수정할 넉백 벡터
+     */
+    public void setKnockbackOverride(@NotNull org.bukkit.util.Vector knockback) {
+        this.knockbackOverride = knockback;
+    }
+    // Daydream end - Add More API for EntityDamageEvent
+
     /**
      * Gets the original damage for the specified modifier, as defined at this
      * event's construction.
