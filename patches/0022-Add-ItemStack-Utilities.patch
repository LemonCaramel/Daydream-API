From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Wed, 5 Apr 2023 00:53:49 +0900
Subject: [PATCH] Add ItemStack Utilities


diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
index 57d55297b6cbb3e31eea65c3fe1f37828f7b62a2..0c379c5ec7d8f32c4776c1decc408c780a19e7ad 100644
--- a/src/main/java/org/bukkit/UnsafeValues.java
+++ b/src/main/java/org/bukkit/UnsafeValues.java
@@ -277,4 +277,37 @@ public interface UnsafeValues {
     @NotNull java.util.List<net.kyori.adventure.text.Component> computeTooltipLines(@NotNull ItemStack itemStack, @NotNull io.papermc.paper.inventory.tooltip.TooltipContext tooltipContext, @Nullable org.bukkit.entity.Player player); // Paper - expose itemstack tooltip lines
 
     @NotNull moe.caramel.daydream.world.DamageMata getDamageMeta(@NotNull Object damageSource); // Daydream - Add more API for EntityDamageEvent
+
+    // Daydream start - Add ItemStack Utilities
+    /**
+     * Create a new ItemStack
+     * (for Paper Compatibility)
+     *
+     * @param material the material
+     * @param count item count
+     * @return ItemStack
+     * @see <a href=https://github.com/PaperMC/Paper/pull/8711>here</a>
+     */
+    @NotNull
+    ItemStack newItem(@NotNull org.bukkit.Material material, int count);
+
+    /**
+     * Inventory Iterator를 생성합니다.
+     *
+     * @param inventory 대상 인벤토리
+     * @return Iterator
+     */
+    @NotNull
+    java.util.ListIterator<ItemStack> createInventoryIterator(@NotNull org.bukkit.inventory.Inventory inventory);
+
+    /**
+     * Inventory Iterator를 생성합니다.
+     *
+     * @param inventory 대상 인벤토리
+     * @param nextIndex 다음 인덱스
+     * @return Iterator
+     */
+    @NotNull
+    java.util.ListIterator<ItemStack> createInventoryIterator(@NotNull org.bukkit.inventory.Inventory inventory, int nextIndex);
+    // Daydream end - Add ItemStack Utilities
 }
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index c64413a6740b604282984dea2a8430a6e7478d68..68253480cf0d6cdbfae6a15ea4d39ca15c9cf84f 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -36,6 +36,99 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
     @Utility
     protected ItemStack() {}
 
+    // Daydream start - Add ItemStack Utilities
+    /**
+     * Defaults stack size to 1, with no extra data.
+     * <p>
+     * <b>IMPORTANT: An <i>Item</i>Stack is only designed to contain
+     * <i>items</i>. Do not use this class to encapsulate Materials for which
+     * {@link Material#isItem()} returns false.</b>
+     *
+     * @param type item material
+     */
+    @NotNull
+    public static ItemStack create(final @NotNull Material type) {
+        return Bukkit.getUnsafe().newItem(type, 1);
+    }
+
+    /**
+     * Create Item stack.
+     *
+     * @param type item material
+     * @param consumer the meta consumer
+     * @return the item stack
+     */
+    @NotNull
+    public static ItemStack create(final @NotNull Material type, final @NotNull java.util.function.Consumer<? super ItemMeta> consumer) {
+        final ItemStack item = Bukkit.getUnsafe().newItem(type, 1);
+        item.editMeta(consumer);
+        return item;
+    }
+
+    /**
+     * Create Item stack.
+     *
+     * @param type item material
+     * @param metaClass the type of meta to edit
+     * @param consumer the meta consumer
+     * @param <M> the meta type
+     * @return the item stack
+     */
+    @NotNull
+    public static <M extends ItemMeta> ItemStack create(final @NotNull Material type, final @NotNull Class<M> metaClass, final @NotNull java.util.function.Consumer<@NotNull ? super M> consumer) {
+        final ItemStack item = Bukkit.getUnsafe().newItem(type, 1);
+        item.editMeta(metaClass, consumer);
+        return item;
+    }
+
+    /**
+     * An item stack with no extra data.
+     * <p>
+     * <b>IMPORTANT: An <i>Item</i>Stack is only designed to contain
+     * <i>items</i>. Do not use this class to encapsulate Materials for which
+     * {@link Material#isItem()} returns false.</b>
+     *
+     * @param type item material
+     * @param amount stack size
+     */
+    @NotNull
+    public static ItemStack create(final @NotNull Material type, final int amount) {
+        return Bukkit.getUnsafe().newItem(type, amount);
+    }
+
+    /**
+     * Create Item stack.
+     *
+     * @param type item material
+     * @param amount stack size
+     * @param consumer the meta consumer
+     * @return the item stack
+     */
+    @NotNull
+    public static ItemStack create(final @NotNull Material type, final int amount, final @NotNull java.util.function.Consumer<? super ItemMeta> consumer) {
+        final ItemStack item = Bukkit.getUnsafe().newItem(type, amount);
+        item.editMeta(consumer);
+        return item;
+    }
+
+    /**
+     * Create Item stack.
+     *
+     * @param type item material
+     * @param amount stack size
+     * @param metaClass the type of meta to edit
+     * @param consumer the meta consumer
+     * @param <M> the meta type
+     * @return the item stack
+     */
+    @NotNull
+    public static <M extends ItemMeta> ItemStack create(final @NotNull Material type, final int amount, final @NotNull Class<M> metaClass, final @NotNull java.util.function.Consumer<@NotNull ? super M> consumer) {
+        final ItemStack item = Bukkit.getUnsafe().newItem(type, amount);
+        item.editMeta(metaClass, consumer);
+        return item;
+    }
+    // Daydream end - Add ItemStack Utilities
+
     /**
      * Defaults stack size to 1, with no extra data.
      * <p>
