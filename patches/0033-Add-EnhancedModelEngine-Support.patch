From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Sat, 6 Jan 2024 04:23:40 +0900
Subject: [PATCH] Add EnhancedModelEngine Support


diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
index 5f61047738deb9fe28aca63283cfe4b4ab97c1ae..0b1b0c3abac26c703ada98affbbaf0182fd28f30 100644
--- a/src/main/java/org/bukkit/UnsafeValues.java
+++ b/src/main/java/org/bukkit/UnsafeValues.java
@@ -337,4 +337,34 @@ public interface UnsafeValues {
     @NotNull
     java.util.ListIterator<ItemStack> createInventoryIterator(@NotNull org.bukkit.inventory.Inventory inventory, int nextIndex);
     // Daydream end - Add ItemStack Utilities
+
+    // Daydream start - Add EnhancedModelEngine Support
+    /* Entity */
+    void eme$setEntityDimensions(@NotNull Object nmsEntity, @NotNull Object entityDimensions);
+    void eme$setEntityEyeHeight(@NotNull Object nmsEntity, float eyeHeight);
+    void eme$setEntityBukkitEntity(@NotNull Object nmsEntity, @Nullable org.bukkit.entity.Entity entity);
+    void eme$setLivingEntityNoJumpDelay(@NotNull Object nmsLivingEntity, int noJumpDelay);
+    void eme$setMobLookControl(@NotNull Object nmsMob, @NotNull Object lookControl);
+    void eme$setMobMoveControl(@NotNull Object nmsMob, @NotNull Object moveControl);
+    void eme$setMobJumpControl(@NotNull Object nmsMob, @NotNull Object jumpControl);
+    void eme$setMobBodyRotationControl(@NotNull Object nmsMob, @NotNull Object bodyRotationControl);
+    void eme$setMobNavigation(@NotNull Object nmsMob, @NotNull Object navigation);
+
+    /* Other */
+    @NotNull Object eme$getLevelThreadSafeRandom(@NotNull Object level);
+    int eme$invokeTrackedEntityGetEffectiveRange(@NotNull Object trackedEntity);
+    int eme$getTrackedEntityRange(@NotNull Object trackedEntity);
+    void eme$setTrackedEntityRange(@NotNull Object trackedEntity, int range);
+    @NotNull Object eme$invokeInstrumentItemGetInstrument(@NotNull Object instrumentItem, @NotNull Object itemStack, @NotNull Object entity);
+
+    /* Packet */
+    interface InteractPacketReadCallback { void handle(@NotNull Object gamePacketListener, @NotNull Object packet); @Nullable Object getNmsTarget(@NotNull Object serverLevel); }
+    void eme$setInteractPacketReadCallback(@NotNull Object interactPacket, @Nullable InteractPacketReadCallback readCallback);
+
+    /* Connection */
+    @FunctionalInterface interface InteractPacketHandleCallback {void invoke(@NotNull Object packet, @Nullable InteractPacketReadCallback readCallback, @NotNull Object serveLevel, @NotNull Object serverPlayer, @Nullable Object targetEntity); }
+    void eme$invokeGameConnectionHandleInteract(@NotNull Object gamePacketListener, @NotNull Object interactPacket, @NotNull InteractPacketHandleCallback beforePlayerCheck, @NotNull InteractPacketHandleCallback afterPlayerCheck);
+    void eme$invokeGameConnectionHandleUseItem(@NotNull Object gamePacketListener, @NotNull Object useItemPacket, @NotNull java.util.function.Consumer<Object> interactionResult);
+    void eme$setGameConnectionClientIsFloating(@NotNull Object gamePacketListener, boolean clientIsFloating);
+    // Daydream end - Add EnhancedModelEngine Support
 }
