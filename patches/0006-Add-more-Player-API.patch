From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Fri, 6 Aug 2021 20:08:04 +0900
Subject: [PATCH] Add more Player API


diff --git a/src/main/java/io/papermc/paper/event/player/AbstractChatEvent.java b/src/main/java/io/papermc/paper/event/player/AbstractChatEvent.java
index 9a95d203151d2c91b0eec494e3674f0facfaa305..09c423489d751a8482501a28e0904c91cdb65ab4 100644
--- a/src/main/java/io/papermc/paper/event/player/AbstractChatEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/AbstractChatEvent.java
@@ -27,6 +27,36 @@ public abstract class AbstractChatEvent extends PlayerEvent implements Cancellab
     private Component message;
 
     private boolean cancelled;
+    // Daydream start - Add more Player API (Improve Chat System)
+    private net.kyori.adventure.chat.@org.jspecify.annotations.Nullable ChatType chatType = null;
+
+    /**
+     * 플레이어 메시지 래퍼를 가져옵니다.
+     *
+     * @return 플레이어 메시지 래퍼
+     */
+    public moe.caramel.daydream.player.PlayerMessage playerMessage() {
+        return (moe.caramel.daydream.player.PlayerMessage) signedMessage;
+    }
+
+    /**
+     * 채팅 포맷을 가져옵니다.
+     *
+     * @return 채팅 포맷
+     */
+    public net.kyori.adventure.chat.@org.jspecify.annotations.Nullable ChatType chatType() {
+        return chatType;
+    }
+
+    /**
+     * 채팅 포맷을 설정합니다.
+     *
+     * @param chatType 채팅 포맷
+     */
+    public void chatType(final net.kyori.adventure.chat.@org.jspecify.annotations.Nullable ChatType chatType) {
+        this.chatType = chatType;
+    }
+    // Daydream end - Add more Player API (Improve Chat System)
 
     AbstractChatEvent(final boolean async, final Player player, final Set<Audience> viewers, final ChatRenderer renderer, final Component message, final Component originalMessage, final SignedMessage signedMessage) {
         super(player, async);
diff --git a/src/main/java/io/papermc/paper/event/player/ChatEvent.java b/src/main/java/io/papermc/paper/event/player/ChatEvent.java
index 42a82ce2316a4aad2883d24c7e2ff95d95f5881a..5c3fc1707df4c921ddb01d3474e4f7dbf2a49c56 100644
--- a/src/main/java/io/papermc/paper/event/player/ChatEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/ChatEvent.java
@@ -29,6 +29,13 @@ public final class ChatEvent extends AbstractChatEvent {
         super(false, player, viewers, renderer, message, originalMessage, signedMessage);
     }
 
+    // Daydream start - Add more Player API (Improve Chat System)
+    @Override
+    public moe.caramel.daydream.player.PlayerMessage playerMessage() {
+        throw new UnsupportedOperationException("Async Only");
+    }
+    // Daydream end - Add more Player API (Improve Chat System)
+
     @Override
     public HandlerList getHandlers() {
         return HANDLER_LIST;
diff --git a/src/main/java/moe/caramel/daydream/event/player/AsyncPlayerDataPreLoadEvent.java b/src/main/java/moe/caramel/daydream/event/player/AsyncPlayerDataPreLoadEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..18cd85f6c3a8eb7be560b5ca0b46dbfef6e9e6c2
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/player/AsyncPlayerDataPreLoadEvent.java
@@ -0,0 +1,110 @@
+package moe.caramel.daydream.event.player;
+
+import com.destroystokyo.paper.profile.PlayerProfile;
+import com.mojang.authlib.GameProfile;
+import net.kyori.adventure.text.Component;
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
+import org.jspecify.annotations.Nullable;
+import java.net.InetAddress;
+import java.util.UUID;
+
+/**
+ * 비동기 플레이어 데이터 사전 로드 이벤트
+ * <p>
+ * {@link org.bukkit.event.player.AsyncPlayerPreLoginEvent} 호출 이후에
+ * 플레이어의 {@link GameProfile}이 완성되면 호출됩니다.
+ * </p>
+ */
+@NullMarked
+public abstract class AsyncPlayerDataPreLoadEvent extends Event {
+
+    private @Nullable Component disconnectMessage;
+
+    @ApiStatus.Internal
+    public AsyncPlayerDataPreLoadEvent() {
+        super(true);
+    }
+
+    @Override
+    public final boolean isSupportInterrupt() {
+        return true;
+    }
+
+    /**
+     * 플레이어의 프로필을 가져옵니다.
+     *
+     * @return 플레이어의 프로필
+     */
+    public abstract GameProfile getGameProfile();
+
+    /**
+     * 플레이어의 프로필을 가져옵니다.
+     *
+     * @deprecated 메서드를 호출할 때마다 새로운 프로필 미러가 생성됩니다.
+     * {@link #getGameProfile()}를 사용하세요.
+     * @return 플레이어의 프로필
+     */
+    @Deprecated
+    public abstract PlayerProfile getProfile();
+
+    /**
+     * 플레이어의 이름을 가져옵니다.
+     *
+     * @return 플레이어의 이름
+     */
+    public final String getName() {
+        return getGameProfile().getName();
+    }
+
+    /**
+     * 플레이어의 UUID를 가져옵니다.
+     *
+     * @return 플레이어의 UUID
+     */
+    public final UUID getUniqueId() {
+        return getGameProfile().getId();
+    }
+
+    /**
+     * 플레이어의 IP 주소를 가져옵니다.
+     *
+     * @return 플레이어의 IP 주소
+     */
+    public abstract InetAddress getAddress();
+
+    /**
+     * 연결 해제 메시지를 가져옵니다. 메시지가 설정되지 않은 경우
+     * 플레이어의 연결을 해제하지 않습니다.
+     *
+     * @return 연결 해제 메시지
+     */
+    public final @Nullable Component getDisconnectMessage() {
+        return disconnectMessage;
+    }
+
+    /**
+     * 연결 해제 메시지를 설정합니다. 메시지가 설정되지 않은 경우
+     * 플레이어의 연결을 해제하지 않습니다.
+     *
+     * @param disconnectMessage 연결 해제 메시지
+     */
+    public final void setDisconnectMessage(final @Nullable Component disconnectMessage) {
+        this.disconnectMessage = disconnectMessage;
+    }
+
+    //<editor-fold desc="Bukkit Event Handler (Internal)" defaultstate="collapsed">
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+    //</editor-fold>
+}
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 95f0b3186e313c7fbd5c8531d52b82a69e525f94..3b524d8e37bf7b6f416d549ac517dfa0d833e330 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -1776,6 +1776,22 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     @Nullable
     public GameMode getPreviousGameMode();
 
+    // Daydream start - Add more Player API (World time update interval)
+    /**
+     * 플레이어의 월드 타임 업데이트 간격을 설정합니다.
+     *
+     * @param interval 월드 타임 업데이트 간격 (0 미만인 경우 비활성화)
+     */
+    public void setWorldTimeUpdateInterval(long interval);
+
+    /**
+     * 플레이어의 월드 타임 업데이트 간격을 가져옵니다.
+     *
+     * @return 월드 타임 업데이트 간격 (0 미만인 경우 비활성화)
+     */
+    public long getWorldTimeUpdateInterval();
+    // Daydream end - Add more Player API (World time update interval)
+
     /**
      * Sets the current time on the player's client. When relative is true the
      * player's time will be kept synchronized to its world time with the
@@ -2038,6 +2054,22 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      */
     public void setAllowFlight(boolean flight);
 
+    // Daydream start - Add more Player API
+    /**
+     * FOV 크기를 가져옵니다.
+     *
+     * @return FOV 크기 (기본 값: {@code 1.0f})
+     */
+    public float getFovScale();
+
+    /**
+     * FOV 크기를 설정합니다.
+     *
+     * @param fov FOV 크기
+     */
+    public void setFovScale(final float fov);
+    // Daydream end - Add more Player API
+
     // Paper start - flying fall damage
     /**
      * Allows you to enable fall damage while {@link #getAllowFlight()} is {@code true}
@@ -3499,6 +3531,16 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     }
     // Paper end
 
+    // Daydream start - Add more Player API (Expose Game Profile)
+    /**
+     * Gets this player's game profile.
+     *
+     * @return player's game profile object
+     */
+    @NotNull
+    com.mojang.authlib.GameProfile getProfile();
+    // Daydream end - Add more Player API (Expose Game Profile)
+
     // Paper start - Player Profile API
     /**
      * Gets a copy of this players profile
diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
index ae02788536d0c6736aba4ccf812844df4f9789f1..6b900914f66b0adb6f1b30dadf9ef7cf95d703c7 100644
--- a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
+++ b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
@@ -288,6 +288,29 @@ public class AsyncPlayerPreLoginEvent extends Event {
     }
     // Paper end
 
+    // Daydream start - Add more Player API (Initial locale)
+    private java.util.Locale initialLocale;
+
+    /**
+     * 플레이어의 초기 언어를 가져옵니다.
+     *
+     * @return 플레이어의 초기 언어
+     */
+    @org.jetbrains.annotations.Nullable
+    public java.util.Locale initialLocale() {
+        return initialLocale;
+    }
+
+    /**
+     * 플레이어의 초기 언어를 설정합니다.
+     *
+     * @param initialLocale 플레이어의 초기 언어
+     */
+    public void initialLocale(final @org.jetbrains.annotations.Nullable java.util.Locale initialLocale) {
+        this.initialLocale = initialLocale;
+    }
+    // Daydream end - Add more Player API (Initial locale)
+
     /**
      * Gets if this connection has been transferred from another server.
      *
