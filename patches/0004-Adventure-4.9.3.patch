From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Thu, 5 Aug 2021 18:04:37 +0900
Subject: [PATCH] Adventure 4.9.3


diff --git a/pom.xml b/pom.xml
index b0eb72c75462224bb01776cdc65ef548c1ae1223..5af467989cb8c659fdfd0ffeed01991507028b71 100644
--- a/pom.xml
+++ b/pom.xml
@@ -22,7 +22,7 @@
         <maven.compiler.source>1.8</maven.compiler.source>
         <maven.compiler.target>1.8</maven.compiler.target>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-        <adventure.version>4.7.0</adventure.version> <!-- Paper - When updating this make sure to update the linked JavaDocs on the homepage as well! -->
+        <adventure.version>4.9.3</adventure.version> <!-- Paper - When updating this make sure to update the linked JavaDocs on the homepage as well! -->
     </properties>
 
     <repositories>
@@ -51,32 +51,38 @@
         <dependency>
             <groupId>net.kyori</groupId>
             <artifactId>adventure-api</artifactId>
+            <version>${adventure.version}</version>
         </dependency>
         <dependency>
             <groupId>net.kyori</groupId>
             <artifactId>adventure-text-serializer-gson</artifactId>
+            <version>${adventure.version}</version>
         </dependency>
         <dependency>
             <groupId>net.kyori</groupId>
             <artifactId>adventure-text-serializer-legacy</artifactId>
+            <version>${adventure.version}</version>
         </dependency>
         <dependency>
             <groupId>net.kyori</groupId>
             <artifactId>adventure-text-serializer-plain</artifactId>
+            <version>${adventure.version}</version>
         </dependency>
         <!-- Paper end -->
+        <!-- Daydream start - Adventure -->
+        <dependency>
+            <groupId>org.checkerframework</groupId>
+            <artifactId>checker-qual</artifactId>
+            <version>3.18.0</version>
+            <scope>compile</scope>
+        </dependency>
+        <!-- Daydream end -->
         <dependency>
             <groupId>it.unimi.dsi</groupId>
             <artifactId>fastutil</artifactId>
             <version>8.2.2</version>
             <scope>provided</scope>
         </dependency>
-        <dependency>
-            <groupId>org.checkerframework</groupId>
-            <artifactId>checker-qual</artifactId>
-            <version>3.6.1</version>
-            <scope>provided</scope>
-        </dependency>
         <dependency>
             <groupId>commons-lang</groupId>
             <artifactId>commons-lang</artifactId>
diff --git a/src/main/java/com/destroystokyo/paper/ClientOption.java b/src/main/java/com/destroystokyo/paper/ClientOption.java
index 9dad814cf51bc59ec5dfbf14474fea6557de38aa..cedb51f9f3a9150035c2b44970a096448c441dd9 100644
--- a/src/main/java/com/destroystokyo/paper/ClientOption.java
+++ b/src/main/java/com/destroystokyo/paper/ClientOption.java
@@ -1,5 +1,7 @@
 package com.destroystokyo.paper;
 
+import net.kyori.adventure.translation.Translatable;
+import net.kyori.adventure.util.Index;
 import org.jetbrains.annotations.NotNull;
 
 import org.bukkit.inventory.MainHand;
@@ -24,10 +26,25 @@ public final class ClientOption<T> {
         return type;
     }
 
-    public enum ChatVisibility {
-        FULL,
-        SYSTEM,
-        HIDDEN,
-        UNKNOWN
+    public enum ChatVisibility implements Translatable {
+        FULL("full"),
+        SYSTEM("system"),
+        HIDDEN("hidden"),
+        UNKNOWN("unknown");
+
+        public static Index<String, ChatVisibility> NAMES = Index.create(ChatVisibility.class, chatVisibility -> chatVisibility.name);
+        private final String name;
+
+        ChatVisibility(String name) {
+            this.name = name;
+        }
+
+        @Override
+        public @NotNull String translationKey() {
+            if (this == UNKNOWN) {
+                throw new UnsupportedOperationException(this.name + " doesn't have a translation key");
+            }
+            return "options.chat.visibility." + this.name;
+        }
     }
 }
diff --git a/src/main/java/io/papermc/paper/chat/ChatComposer.java b/src/main/java/io/papermc/paper/chat/ChatComposer.java
deleted file mode 100644
index 7d2fb50210246bb42d166f7e6d1c0cdfad0bdb3d..0000000000000000000000000000000000000000
--- a/src/main/java/io/papermc/paper/chat/ChatComposer.java
+++ /dev/null
@@ -1,29 +0,0 @@
-package io.papermc.paper.chat;
-
-import net.kyori.adventure.text.Component;
-import org.bukkit.entity.Player;
-import org.jetbrains.annotations.NotNull;
-
-/**
- * A chat composer is responsible for composing chat messages sent by {@link Player}s to the server.
- *
- * @deprecated for removal with 1.17, in favor of {@link ChatRenderer}
- */
-@Deprecated
-@FunctionalInterface
-public interface ChatComposer {
-    ChatComposer DEFAULT = (player, displayName, message) -> Component.translatable("chat.type.text", displayName, message);
-
-    /**
-     * Composes a chat message.
-     *
-     * @param source the message source
-     * @param displayName the display name of the {@link Player} sending the message
-     * @param message the chat message
-     * @return a composed chat message
-     * @deprecated for removal with 1.17
-     */
-    @Deprecated
-    @NotNull
-    Component composeChat(final @NotNull Player source, final @NotNull Component displayName, final @NotNull Component message);
-}
diff --git a/src/main/java/io/papermc/paper/event/player/AbstractChatEvent.java b/src/main/java/io/papermc/paper/event/player/AbstractChatEvent.java
index 718b860ace4077affad715a4e43961e10a83e9d9..fa03a5cb2d3e3e0a60d84bacc911d96c454f81da 100644
--- a/src/main/java/io/papermc/paper/event/player/AbstractChatEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/AbstractChatEvent.java
@@ -1,19 +1,12 @@
 package io.papermc.paper.event.player;
 
-import io.papermc.paper.chat.ChatComposer;
-import io.papermc.paper.chat.ChatFormatter;
-import java.util.HashSet;
 import java.util.Set;
 import io.papermc.paper.chat.ChatRenderer;
 import net.kyori.adventure.audience.Audience;
-import net.kyori.adventure.audience.ForwardingAudience;
 import net.kyori.adventure.text.Component;
-import org.bukkit.Bukkit;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.player.PlayerEvent;
-import org.checkerframework.checker.nullness.qual.NonNull;
-import org.checkerframework.checker.nullness.qual.Nullable;
 import org.jetbrains.annotations.NotNull;
 
 import static java.util.Objects.requireNonNull;
@@ -23,92 +16,19 @@ import static java.util.Objects.requireNonNull;
  */
 public abstract class AbstractChatEvent extends PlayerEvent implements Cancellable {
     private final Set<Audience> viewers;
-    @Deprecated private final Set<Player> recipients;
-    private boolean cancelled = false;
-    private ChatRenderer renderer;
-    @Deprecated private @Nullable ChatComposer composer;
-    @Deprecated private @Nullable ChatFormatter formatter;
     private final Component originalMessage;
+    private ChatRenderer renderer;
     private Component message;
+    private boolean cancelled = false;
 
     AbstractChatEvent(final boolean async, final @NotNull Player player, final @NotNull Set<Audience> viewers, final @NotNull ChatRenderer renderer, final @NotNull Component message, final @NotNull Component originalMessage) {
         super(player, async);
         this.viewers = viewers;
-        this.recipients = new HashSet<>(Bukkit.getOnlinePlayers());
-        this.renderer = renderer;
-        this.message = message;
-        this.originalMessage = originalMessage;
-    }
-
-    /**
-     * @deprecated for removal with 1.17
-     */
-    @Deprecated
-    AbstractChatEvent(final boolean async, final @NotNull Player player, final @NotNull Set<Audience> viewers, final @NotNull ChatRenderer renderer, final @NotNull Component message) {
-        super(player, async);
-        this.viewers = viewers;
-        this.recipients = new HashSet<>(Bukkit.getOnlinePlayers());
-        this.renderer = renderer;
-        this.message = message;
-        this.originalMessage = message;
-    }
-
-    /**
-     * @deprecated for removal with 1.17
-     */
-    @Deprecated
-    AbstractChatEvent(final boolean async, final @NotNull Player player, final @NotNull Set<Player> recipients, final @NotNull Set<Audience> viewers, final @NotNull ChatRenderer renderer, final @NotNull Component message, final @NotNull Component originalMessage) {
-        super(player, async);
-        this.recipients = recipients;
-        this.viewers = viewers;
         this.renderer = renderer;
         this.message = message;
         this.originalMessage = originalMessage;
     }
 
-    /**
-     * @deprecated for removal with 1.17
-     */
-    @Deprecated
-    AbstractChatEvent(final boolean async, final @NotNull Player player, final @NotNull Set<Player> recipients, final @NotNull Set<Audience> viewers, final @NotNull ChatRenderer renderer, final @NotNull Component message) {
-        super(player, async);
-        this.recipients = recipients;
-        this.viewers = viewers;
-        this.renderer = renderer;
-        this.message = message;
-        this.originalMessage = message;
-    }
-
-    /**
-     * @deprecated for removal with 1.17
-     */
-    @Deprecated
-    AbstractChatEvent(final boolean async, final @NotNull Player player, final @NotNull Set<Player> recipients, final @NotNull ChatComposer composer, final @NotNull Component message) {
-        super(player, async);
-        this.recipients = recipients;
-        final Set<Audience> audiences = new HashSet<>(recipients);
-        audiences.add(Bukkit.getConsoleSender());
-        this.viewers = audiences;
-        this.composer = composer;
-        this.message = message;
-        this.originalMessage = message;
-    }
-
-    /**
-     * @deprecated for removal with 1.17
-     */
-    @Deprecated
-    AbstractChatEvent(final boolean async, final @NotNull Player player, final @NotNull Set<Player> recipients, final @NotNull ChatFormatter formatter, final @NotNull Component message) {
-        super(player, async);
-        this.recipients = recipients;
-        final Set<Audience> audiences = new HashSet<>(recipients);
-        audiences.add(Bukkit.getConsoleSender());
-        this.viewers = audiences;
-        this.formatter = formatter;
-        this.message = message;
-        this.originalMessage = message;
-    }
-
     /**
      * Gets a set of {@link Audience audiences} that this chat message will be displayed to.
      *
@@ -127,26 +47,6 @@ public abstract class AbstractChatEvent extends PlayerEvent implements Cancellab
         return this.viewers;
     }
 
-    /**
-     * Gets a set of recipients that this chat message will be displayed to.
-     *
-     * <p>The set returned is not guaranteed to be mutable and may auto-populate
-     * on access. Any listener accessing the returned set should be aware that
-     * it may reduce performance for a lazy set implementation.</p>
-     *
-     * <p>Listeners should be aware that modifying the list may throw {@link
-     * UnsupportedOperationException} if the event caller provides an
-     * unmodifiable set.</p>
-     *
-     * @return a set of players who will receive the chat message
-     * @deprecated for removal with 1.17, in favor of {@link #viewers()}
-     */
-    @Deprecated
-    @NotNull
-    public final Set<Player> recipients() {
-        return this.recipients;
-    }
-
     /**
      * Sets the chat renderer.
      *
@@ -155,8 +55,6 @@ public abstract class AbstractChatEvent extends PlayerEvent implements Cancellab
      */
     public final void renderer(final @NotNull ChatRenderer renderer) {
         this.renderer = requireNonNull(renderer, "renderer");
-        this.formatter = null;
-        this.composer = null;
     }
 
     /**
@@ -166,85 +64,9 @@ public abstract class AbstractChatEvent extends PlayerEvent implements Cancellab
      */
     @NotNull
     public final ChatRenderer renderer() {
-        if(this.renderer == null) {
-            if(this.composer != null) {
-                this.renderer = ChatRenderer.viewerUnaware((source, displayName, message) -> this.composer.composeChat(source, source.displayName(), message));
-            } else {
-                requireNonNull(this.formatter, "renderer, composer, and formatter");
-                this.renderer = ChatRenderer.viewerUnaware((source, displayName, message) -> this.formatter.chat(source.displayName(), message));
-            }
-        }
         return this.renderer;
     }
 
-    /**
-     * Gets the chat composer.
-     *
-     * @return the chat composer
-     * @deprecated for removal with 1.17, in favour of {@link #renderer()}
-     */
-    @Deprecated
-    @NotNull
-    public final ChatComposer composer() {
-        if(this.composer == null) {
-            if(this.renderer != null) {
-                this.composer = (source, displayName, message) -> this.renderer.render(source, displayName, message, this.legacyForwardingAudience());
-            } else {
-                requireNonNull(this.formatter, "renderer, composer, and formatter");
-                this.composer = (source, displayName, message) -> this.formatter.chat(displayName, message);
-            }
-        }
-        return this.composer;
-    }
-
-    /**
-     * Sets the chat composer.
-     *
-     * @param composer the chat composer
-     * @throws NullPointerException if {@code composer} is {@code null}
-     * @deprecated for removal with 1.17, in favour of {@link #renderer(ChatRenderer)}
-     */
-    @Deprecated
-    public final void composer(final @NotNull ChatComposer composer) {
-        this.composer = requireNonNull(composer, "composer");
-        this.formatter = null;
-        this.renderer = null;
-    }
-
-    /**
-     * Gets the chat formatter.
-     *
-     * @return the chat formatter
-     * @deprecated for removal with 1.17, in favour of {@link #renderer()}
-     */
-    @Deprecated
-    @NotNull
-    public final ChatFormatter formatter() {
-        if(this.formatter == null) {
-            if(this.renderer != null) {
-                this.formatter = (displayName, message) -> this.renderer.render(this.player, displayName, message, this.legacyForwardingAudience());
-            } else {
-                requireNonNull(this.composer, "renderer, composer, and formatter");
-                this.formatter = (displayName, message) -> this.composer.composeChat(this.player, displayName, message);
-            }
-        }
-        return this.formatter;
-    }
-
-    /**
-     * Sets the chat formatter.
-     *
-     * @param formatter the chat formatter
-     * @throws NullPointerException if {@code formatter} is {@code null}
-     * @deprecated for removal with 1.17, in favour of {@link #renderer(ChatRenderer)}
-     */
-    @Deprecated
-    public final void formatter(final @NotNull ChatFormatter formatter) {
-        this.formatter = requireNonNull(formatter, "formatter");
-        this.composer = null;
-        this.renderer = null;
-    }
-
     /**
      * Gets the user-supplied message.
      * The return value will reflect changes made using {@link #message(Component)}.
@@ -287,13 +109,4 @@ public abstract class AbstractChatEvent extends PlayerEvent implements Cancellab
     public final void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
-
-    private @NotNull Audience legacyForwardingAudience() {
-        return new ForwardingAudience() {
-            @Override
-            public @NonNull Iterable<? extends Audience> audiences() {
-                return AbstractChatEvent.this.viewers;
-            }
-        };
-    }
 }
diff --git a/src/main/java/io/papermc/paper/event/player/AsyncChatEvent.java b/src/main/java/io/papermc/paper/event/player/AsyncChatEvent.java
index ee7ec316a2f814ec759e0a3e5dfe5efbee782b22..0d9e3c23027e3af90cb70e4bb6fb0ac1da35fc4d 100644
--- a/src/main/java/io/papermc/paper/event/player/AsyncChatEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/AsyncChatEvent.java
@@ -1,7 +1,5 @@
 package io.papermc.paper.event.player;
 
-import io.papermc.paper.chat.ChatComposer;
-import io.papermc.paper.chat.ChatFormatter;
 import java.util.Set;
 import io.papermc.paper.chat.ChatRenderer;
 import net.kyori.adventure.audience.Audience;
@@ -20,46 +18,6 @@ public final class AsyncChatEvent extends AbstractChatEvent {
         super(async, player, viewers, renderer, message, originalMessage);
     }
 
-    /**
-     * @deprecated for removal with 1.17, use {@link #AsyncChatEvent(boolean, Player, Set, ChatRenderer, Component, Component)}
-     */
-    @Deprecated
-    public AsyncChatEvent(final boolean async, final @NotNull Player player, final @NotNull Set<Audience> viewers, final @NotNull ChatRenderer renderer, final @NotNull Component message) {
-        super(async, player, viewers, renderer, message);
-    }
-
-    /**
-     * @deprecated for removal with 1.17, use {@link #AsyncChatEvent(boolean, Player, Set, ChatRenderer, Component, Component)}
-     */
-    @Deprecated
-    public AsyncChatEvent(final boolean async, final @NotNull Player player, final @NotNull Set<Player> recipients, final @NotNull Set<Audience> viewers, final @NotNull ChatRenderer renderer, final @NotNull Component message, final @NotNull Component originalMessage) {
-        super(async, player, recipients, viewers, renderer, message, originalMessage);
-    }
-
-    /**
-     * @deprecated for removal with 1.17, use {@link #AsyncChatEvent(boolean, Player, Set, ChatRenderer, Component, Component)}
-     */
-    @Deprecated
-    public AsyncChatEvent(final boolean async, final @NotNull Player player, final @NotNull Set<Player> recipients, final @NotNull Set<Audience> viewers, final @NotNull ChatRenderer renderer, final @NotNull Component message) {
-        super(async, player, recipients, viewers, renderer, message);
-    }
-
-    /**
-     * @deprecated for removal with 1.17, use {@link #AsyncChatEvent(boolean, Player, Set, ChatRenderer, Component, Component)}
-     */
-    @Deprecated
-    public AsyncChatEvent(final boolean async, final @NotNull Player player, final @NotNull Set<Player> recipients, final @NotNull ChatComposer composer, final @NotNull Component message) {
-        super(async, player, recipients, composer, message);
-    }
-
-    /**
-     * @deprecated for removal with 1.17, use {@link #AsyncChatEvent(boolean, Player, Set, ChatRenderer, Component, Component)}
-     */
-    @Deprecated
-    public AsyncChatEvent(final boolean async, final @NotNull Player player, final @NotNull Set<Player> recipients, final @NotNull ChatFormatter formatter, final @NotNull Component message) {
-        super(async, player, recipients, formatter, message);
-    }
-
     @NotNull
     @Override
     public HandlerList getHandlers() {
diff --git a/src/main/java/io/papermc/paper/event/player/ChatEvent.java b/src/main/java/io/papermc/paper/event/player/ChatEvent.java
index c6bcf0dc3f77c631aa7eeb9b1e88b5bbfe445fc6..eb179aae1e1d2ce842442e49fe275827a430ccd0 100644
--- a/src/main/java/io/papermc/paper/event/player/ChatEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/ChatEvent.java
@@ -1,7 +1,5 @@
 package io.papermc.paper.event.player;
 
-import io.papermc.paper.chat.ChatComposer;
-import io.papermc.paper.chat.ChatFormatter;
 import java.util.Set;
 import io.papermc.paper.chat.ChatRenderer;
 import net.kyori.adventure.audience.Audience;
@@ -25,38 +23,6 @@ public final class ChatEvent extends AbstractChatEvent {
         super(false, player, viewers, renderer, message, originalMessage);
     }
 
-    /**
-     * @deprecated for removal with 1.17, use {@link #ChatEvent(Player, Set, ChatRenderer, Component, Component)}
-     */
-    @Deprecated
-    public ChatEvent(final @NotNull Player player, final @NotNull Set<Audience> viewers, final @NotNull ChatRenderer renderer, final @NotNull Component message) {
-        super(false, player, viewers, renderer, message);
-    }
-
-    /**
-     * @deprecated for removal with 1.17, use {@link #ChatEvent(Player, Set, ChatRenderer, Component, Component)}
-     */
-    @Deprecated
-    public ChatEvent(final @NotNull Player player, final @NotNull Set<Player> recipients, final @NotNull Set<Audience> viewers, final @NotNull ChatRenderer renderer, final @NotNull Component message, final @NotNull Component originalMessage) {
-        super(false, player, recipients, viewers, renderer, message, originalMessage);
-    }
-
-    /**
-     * @deprecated for removal with 1.17, use {@link #ChatEvent(Player, Set, ChatRenderer, Component, Component)}
-     */
-    @Deprecated
-    public ChatEvent(final @NotNull Player player, final @NotNull Set<Player> recipients, final @NotNull ChatComposer composer, final @NotNull Component message) {
-        super(false, player, recipients, composer, message);
-    }
-
-    /**
-     * @deprecated for removal with 1.17, use {@link #ChatEvent(Player, Set, ChatRenderer, Component, Component)}
-     */
-    @Deprecated
-    public ChatEvent(final @NotNull Player player, final @NotNull Set<Player> recipients, final @NotNull ChatFormatter formatter, final @NotNull Component message) {
-        super(false, player, recipients, formatter, message);
-    }
-
     @NotNull
     @Override
     public HandlerList getHandlers() {
diff --git a/src/main/java/org/bukkit/Difficulty.java b/src/main/java/org/bukkit/Difficulty.java
index 3f6cbefc2b1414ba2dad709e79288013b3ef73be..06ff19954cc7664017b5e5f76100ffdf1b09b75d 100644
--- a/src/main/java/org/bukkit/Difficulty.java
+++ b/src/main/java/org/bukkit/Difficulty.java
@@ -7,7 +7,7 @@ import org.jetbrains.annotations.Nullable;
 /**
  * Represents the various difficulty levels that are available.
  */
-public enum Difficulty {
+public enum Difficulty implements net.kyori.adventure.translation.Translatable { // Paper - Adventure translations
     /**
      * Players regain health over time, hostile mobs don't spawn, the hunger
      * bar does not deplete.
@@ -51,6 +51,13 @@ public enum Difficulty {
         return value;
     }
 
+    // Paper start
+    @Override
+    public @org.jetbrains.annotations.NotNull String translationKey() {
+        return "options.difficulty." + this.name().toLowerCase(java.util.Locale.ENGLISH);
+    }
+    // Paper end
+
     /**
      * Gets the Difficulty represented by the specified value
      *
diff --git a/src/main/java/org/bukkit/FireworkEffect.java b/src/main/java/org/bukkit/FireworkEffect.java
index 0ae437c0c5052780bd0c78cdd542f62d75796527..48783fff226563830feb4c566ede61ff55e00c5d 100644
--- a/src/main/java/org/bukkit/FireworkEffect.java
+++ b/src/main/java/org/bukkit/FireworkEffect.java
@@ -18,28 +18,44 @@ public final class FireworkEffect implements ConfigurationSerializable {
     /**
      * The type or shape of the effect.
      */
-    public enum Type {
+    public enum Type implements net.kyori.adventure.translation.Translatable { // Paper - Adventure translations
         /**
          * A small ball effect.
          */
-        BALL,
+        BALL("small_ball"), // Paper - add name
         /**
          * A large ball effect.
          */
-        BALL_LARGE,
+        BALL_LARGE("large_ball"), // Paper - add name
         /**
          * A star-shaped effect.
          */
-        STAR,
+        STAR("star"), // Paper - add name
         /**
          * A burst effect.
          */
-        BURST,
+        BURST("burst"), // Paper - add name
         /**
          * A creeper-face effect.
          */
-        CREEPER,
+        CREEPER("creeper"), // Paper - add name
         ;
+        // Paper start
+        /**
+         * The name map.
+         */
+        public static final net.kyori.adventure.util.Index<String, org.bukkit.FireworkEffect.Type> NAMES = net.kyori.adventure.util.Index.create(Type.class, type -> type.name);
+        private final String name;
+
+        Type(final String name) {
+            this.name = name;
+        }
+
+        @Override
+        public @NotNull String translationKey() {
+            return "item.minecraft.firework_star.shape." + this.name;
+        }
+        // Paper end
     }
 
     /**
diff --git a/src/main/java/org/bukkit/GameRule.java b/src/main/java/org/bukkit/GameRule.java
index 720fe9f51753be28633ea380e732f676b3be4315..fa90e798966203e130a3591cb60d93e0e2bbc9a6 100644
--- a/src/main/java/org/bukkit/GameRule.java
+++ b/src/main/java/org/bukkit/GameRule.java
@@ -15,7 +15,7 @@ import org.jetbrains.annotations.Nullable;
  *
  * @param <T> type of rule (Boolean or Integer)
  */
-public final class GameRule<T> {
+public final class GameRule<T> implements net.kyori.adventure.translation.Translatable { // Paper - Adventure translations
 
     private static Map<String, GameRule<?>> gameRules = new HashMap<>();
     // Boolean rules
@@ -272,4 +272,11 @@ public final class GameRule<T> {
     public static GameRule<?>[] values() {
         return gameRules.values().toArray(new GameRule<?>[gameRules.size()]);
     }
+
+    // Paper start
+    @Override
+    public @NotNull String translationKey() {
+        return "gamerule." + this.name;
+    }
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/Material.java b/src/main/java/org/bukkit/Material.java
index e2b3470e3c9a97671723f5a67f722fb86fb07fbf..c3c35c92b54bc39a8956ac5c7d083b8b7512d12a 100644
--- a/src/main/java/org/bukkit/Material.java
+++ b/src/main/java/org/bukkit/Material.java
@@ -88,7 +88,7 @@ import org.jetbrains.annotations.Nullable;
  * An enum of all material IDs accepted by the official server and client
  */
 @SuppressWarnings({"DeprecatedIsStillUsed", "deprecation"}) // Paper
-public enum Material implements Keyed {
+public enum Material implements Keyed, net.kyori.adventure.translation.Translatable { // Paper
     //<editor-fold desc="Materials" defaultstate="collapsed">
     AIR(9648, 0),
     STONE(22948),
@@ -3581,15 +3581,21 @@ public enum Material implements Keyed {
     }
 
     /**
-     * Return the translation key for the Material, so the client can translate it into the active
-     * locale when using a TranslatableComponent.
-     * @return the translation key
-     */
+     +     * Return the translation key for the Material, so the client can translate it into the active
+     +     * locale when using a TranslatableComponent.
+     +     * @return the translation key
+     +     * @deprecated use {@link #translationKey()}
+     +     */
     @NotNull
+    @Deprecated
     public String getTranslationKey() {
-        return Bukkit.getUnsafe().getTranslationKey(this);
+        return this.translationKey();
     }
 
+    @Override
+    public @NotNull String translationKey() {
+        return Bukkit.getUnsafe().getTranslationKey(this);
+    }
     /**
      * Returns the item rarity for the item. The Material <b>MUST</b> be an Item not a block.
      * Use {@link #isItem()} before this.
diff --git a/src/main/java/org/bukkit/SoundCategory.java b/src/main/java/org/bukkit/SoundCategory.java
index ac5e263d737973af077e3406a84a84baca4370db..5b7f544c3aa6697cad8c8289450b5644e9905376 100644
--- a/src/main/java/org/bukkit/SoundCategory.java
+++ b/src/main/java/org/bukkit/SoundCategory.java
@@ -3,7 +3,7 @@ package org.bukkit;
 /**
  * An Enum of categories for sounds.
  */
-public enum SoundCategory {
+public enum SoundCategory implements net.kyori.adventure.sound.Sound.Source.Provider { // Daydream - implement Sound.Source.Provider
 
     MASTER,
     MUSIC,
@@ -15,4 +15,35 @@ public enum SoundCategory {
     PLAYERS,
     AMBIENT,
     VOICE;
+
+    // Daydream start - implement Sound.Source.Provider
+    // caramel comment - Java 14 Style -> Legacy Style
+    @Override
+    public @org.jetbrains.annotations.NotNull net.kyori.adventure.sound.Sound.Source soundSource() {
+        switch (this) {
+            case MASTER:
+                return net.kyori.adventure.sound.Sound.Source.MASTER;
+            case MUSIC:
+                return net.kyori.adventure.sound.Sound.Source.MUSIC;
+            case RECORDS:
+                return net.kyori.adventure.sound.Sound.Source.RECORD;
+            case WEATHER:
+                return net.kyori.adventure.sound.Sound.Source.WEATHER;
+            case BLOCKS:
+                return net.kyori.adventure.sound.Sound.Source.BLOCK;
+            case HOSTILE:
+                return net.kyori.adventure.sound.Sound.Source.HOSTILE;
+            case NEUTRAL:
+                return net.kyori.adventure.sound.Sound.Source.NEUTRAL;
+            case PLAYERS:
+                return net.kyori.adventure.sound.Sound.Source.PLAYER;
+            case AMBIENT:
+                return net.kyori.adventure.sound.Sound.Source.AMBIENT;
+            case VOICE:
+                return net.kyori.adventure.sound.Sound.Source.VOICE;
+            default:
+                throw new IllegalArgumentException();
+        }
+    }
+    // Daydream end
 }
diff --git a/src/main/java/org/bukkit/attribute/Attribute.java b/src/main/java/org/bukkit/attribute/Attribute.java
index 13eac9ad2c1672051635d1c35cc49239252e7a61..107e36ef02a9481954bd770ce9a55a0b1e84be7a 100644
--- a/src/main/java/org/bukkit/attribute/Attribute.java
+++ b/src/main/java/org/bukkit/attribute/Attribute.java
@@ -7,7 +7,7 @@ import org.jetbrains.annotations.NotNull;
 /**
  * Types of attributes which may be present on an {@link Attributable}.
  */
-public enum Attribute implements Keyed {
+public enum Attribute implements Keyed, net.kyori.adventure.translation.Translatable { // Paper - Adventure translations
 
     /**
      * Maximum health of an Entity.
@@ -73,4 +73,10 @@ public enum Attribute implements Keyed {
     public NamespacedKey getKey() {
         return key;
     }
+    // Paper start
+    @Override
+    public @NotNull String translationKey() {
+        return "attribute.name." + this.key.getKey();
+    }
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/block/Block.java b/src/main/java/org/bukkit/block/Block.java
index 08e6f1741685f54506c8a4ff29bbd30f62cf8e45..66d43ee8e0a7fe032a0b4adb283d7e35e4adf51a 100644
--- a/src/main/java/org/bukkit/block/Block.java
+++ b/src/main/java/org/bukkit/block/Block.java
@@ -30,7 +30,7 @@ import org.jetbrains.annotations.Nullable;
  * (i.e. lighting and power) may not be able to be safely accessed during world
  * generation when used in cases like BlockPhysicsEvent!!!!
  */
-public interface Block extends Metadatable {
+public interface Block extends Metadatable, net.kyori.adventure.translation.Translatable { // Paper - translatable
 
     /**
      * Gets the metadata for this block
@@ -634,8 +634,10 @@ public interface Block extends Metadatable {
      * Return the translation key for the Block, so the client can translate it into the active
      * locale when using a TranslatableComponent.
      * @return the translation key
+     * @deprecated use {@link #translationKey()}
      */
     @NotNull
+    @Deprecated
     String getTranslationKey();
 
     /**
diff --git a/src/main/java/org/bukkit/block/CommandBlock.java b/src/main/java/org/bukkit/block/CommandBlock.java
index 372c0bd5a4d7800a11c24c95e39fe376a96232bf..73dce588d1f7a5048300073bf8c2b14d6da1e857 100644
--- a/src/main/java/org/bukkit/block/CommandBlock.java
+++ b/src/main/java/org/bukkit/block/CommandBlock.java
@@ -33,7 +33,9 @@ public interface CommandBlock extends TileState {
      * by default is "@".
      *
      * @return Name of this CommandBlock.
+     * @deprecated in favour of {@link #name()}
      */
+    @Deprecated // Paper
     @NotNull
     public String getName();
 
@@ -43,6 +45,28 @@ public interface CommandBlock extends TileState {
      * same as setting it to "@".
      *
      * @param name New name for this CommandBlock.
+     * @deprecated in favour of {@link #name(net.kyori.adventure.text.Component)}
      */
+    @Deprecated // Paper
     public void setName(@Nullable String name);
+
+    // Paper start
+    /**
+     * Gets the name of this CommandBlock.  The name is used with commands
+     * that this CommandBlock executes.  This name will never be null, and
+     * by default is a {@link net.kyori.adventure.text.TextComponent} containing {@code @}.
+     *
+     * @return Name of this CommandBlock.
+     */
+    public @NotNull net.kyori.adventure.text.Component name();
+
+    /**
+     * Sets the name of this CommandBlock.  The name is used with commands
+     * that this CommandBlock executes.  Setting the name to null is the
+     * same as setting it to a {@link net.kyori.adventure.text.TextComponent} containing {@code @}.
+     *
+     * @param name New name for this CommandBlock.
+     */
+    public void name(@Nullable net.kyori.adventure.text.Component name);
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/block/Sign.java b/src/main/java/org/bukkit/block/Sign.java
index 6ea9b54d95d80070c01a612c0ce2ab37f0b4ad41..18b48bdbc41a06d0685079683b0322f6a3492da9 100644
--- a/src/main/java/org/bukkit/block/Sign.java
+++ b/src/main/java/org/bukkit/block/Sign.java
@@ -57,8 +57,8 @@ public interface Sign extends TileState, Colorable {
      * For example, getLine(0) will return the first line of text.
      *
      * @param index Line number to get the text from, starting at 0
-     * @throws IndexOutOfBoundsException Thrown when the line does not exist
      * @return Text on the given line
+     * @throws IndexOutOfBoundsException Thrown when the line does not exist
      * @deprecated in favour of {@link #line(int)}
      */
     @NotNull
diff --git a/src/main/java/org/bukkit/command/Command.java b/src/main/java/org/bukkit/command/Command.java
index c10fc8d2386301bc2caddcdb1cd18566bcaa8689..bb637eb3ce16c6b1286b322833acbe5e3838a801 100644
--- a/src/main/java/org/bukkit/command/Command.java
+++ b/src/main/java/org/bukkit/command/Command.java
@@ -32,7 +32,7 @@ public abstract class Command {
     protected String description;
     protected String usageMessage;
     private String permission;
-    private String permissionMessage;
+    private net.kyori.adventure.text.Component permissionMessage; // Paper
     public co.aikar.timings.Timing timings; // Paper
     @NotNull public String getTimingName() {return getName();} // Paper
 
@@ -184,12 +184,11 @@ public abstract class Command {
             return true;
         }
 
-        if (permissionMessage == null) {
-            target.sendMessage(Bukkit.getPermissionMessage()); // Paper
-        } else if (permissionMessage.length() != 0) {
-            for (String line : permissionMessage.replace("<permission>", permission).split("\n")) {
-                target.sendMessage(line);
-            }
+            // Paper start - use components for permissionMessage
+        net.kyori.adventure.text.Component permissionMessage = this.permissionMessage != null ? this.permissionMessage : io.papermc.paper.text.PaperComponents.legacySectionSerializer().deserialize(Bukkit.getPermissionMessage());
+        if (!permissionMessage.equals(net.kyori.adventure.text.Component.empty())) {
+            target.sendMessage(permissionMessage.replaceText(net.kyori.adventure.text.TextReplacementConfig.builder().matchLiteral("<permission>").replacement(permission).build()));
+            // Paper end
         }
 
         return false;
@@ -316,10 +315,12 @@ public abstract class Command {
      * command
      *
      * @return Permission check failed message
+     * @deprecated use {@link #permissionMessage()}
      */
     @Nullable
+    @Deprecated // Paper
     public String getPermissionMessage() {
-        return permissionMessage;
+        return io.papermc.paper.text.PaperComponents.legacySectionSerializer().serializeOrNull(permissionMessage); // Paper
     }
 
     /**
@@ -380,10 +381,12 @@ public abstract class Command {
      * @param permissionMessage new permission message, null to indicate
      *     default message, or an empty string to indicate no message
      * @return this command object, for chaining
+     * @deprecated use {@link #permissionMessage(net.kyori.adventure.text.Component)}
      */
     @NotNull
+    @Deprecated // Paper
     public Command setPermissionMessage(@Nullable String permissionMessage) {
-        this.permissionMessage = permissionMessage;
+        this.permissionMessage = io.papermc.paper.text.PaperComponents.legacySectionSerializer().deserializeOrNull(permissionMessage); // Paper
         return this;
     }
 
@@ -398,6 +401,24 @@ public abstract class Command {
         this.usageMessage = (usage == null) ? "" : usage;
         return this;
     }
+    // Paper start
+    /**
+     * Gets the permission message.
+     *
+     * @return the permission message
+     */
+    public @Nullable net.kyori.adventure.text.Component permissionMessage() {
+        return this.permissionMessage;
+    }
+
+    /**
+     * Sets the permission message.
+     * @param permissionMessage the permission message
+     */
+    public void permissionMessage(@Nullable net.kyori.adventure.text.Component permissionMessage) {
+        this.permissionMessage = permissionMessage;
+    }
+    // Paper end
 
     public static void broadcastCommandMessage(@NotNull CommandSender source, @NotNull String message) {
         broadcastCommandMessage(source, message, true);
diff --git a/src/main/java/org/bukkit/command/CommandSender.java b/src/main/java/org/bukkit/command/CommandSender.java
index fb0e608fa92dae99b9eee8fc1cbdf4b91a33e620..900209afd409c6080a67520d09a1ed4ae2c978d7 100644
--- a/src/main/java/org/bukkit/command/CommandSender.java
+++ b/src/main/java/org/bukkit/command/CommandSender.java
@@ -116,6 +116,13 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
     // Spigot end
 
     // Paper start
+    /**
+     * Gets the name of this command sender
+     *
+     * @return Name of the sender
+     */
+    public @NotNull Component name();
+
     @Override
     default void sendMessage(final @NotNull net.kyori.adventure.identity.Identity identity, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {
         this.sendMessage(org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().serialize(message));
diff --git a/src/main/java/org/bukkit/command/MessageCommandSender.java b/src/main/java/org/bukkit/command/MessageCommandSender.java
index a7ef1f51c2b96617a32e6e7b1723e8770ba8a6a8..06678997b9089a4dfa9fd630b67ef5407c9b5c14 100644
--- a/src/main/java/org/bukkit/command/MessageCommandSender.java
+++ b/src/main/java/org/bukkit/command/MessageCommandSender.java
@@ -49,6 +49,13 @@ public interface MessageCommandSender extends CommandSender {
     default String getName() {
         throw new NotImplementedException();
     }
+    // Paper start
+    @NotNull
+    @Override
+    default net.kyori.adventure.text.Component name() {
+        throw new NotImplementedException();
+    }
+    // Paper end
 
     @Override
     default boolean isOp() {
diff --git a/src/main/java/org/bukkit/command/PluginCommandYamlParser.java b/src/main/java/org/bukkit/command/PluginCommandYamlParser.java
index a542c4bb3c973bbe4b976642feccde6a4d90cb7b..614cba22c0997dbb45576f800675db4053a9831c 100644
--- a/src/main/java/org/bukkit/command/PluginCommandYamlParser.java
+++ b/src/main/java/org/bukkit/command/PluginCommandYamlParser.java
@@ -67,7 +67,7 @@ public class PluginCommandYamlParser {
             }
 
             if (permissionMessage != null) {
-                newCmd.setPermissionMessage(permissionMessage.toString());
+                newCmd.permissionMessage(io.papermc.paper.text.PaperComponents.legacySectionSerializer().deserialize(permissionMessage.toString())); // Paper
             }
 
             pluginCmds.add(newCmd);
diff --git a/src/main/java/org/bukkit/enchantments/Enchantment.java b/src/main/java/org/bukkit/enchantments/Enchantment.java
index 799813410f40589ba1d7d530a47d87f609764705..05f516eb488124a86dcd31a52ffa1f4b847545ac 100644
--- a/src/main/java/org/bukkit/enchantments/Enchantment.java
+++ b/src/main/java/org/bukkit/enchantments/Enchantment.java
@@ -12,7 +12,7 @@ import org.jetbrains.annotations.Nullable;
 /**
  * The various type of enchantments that may be added to armour or weapons
  */
-public abstract class Enchantment implements Keyed {
+public abstract class Enchantment implements Keyed, net.kyori.adventure.translation.Translatable { // Paper - Adventure translations
     /**
      * Provides protection against environmental damage
      */
diff --git a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java
index ca097db904db96e81c0ea4b06b445a13e9333cfe..5f42a9c0c43ced10b754170d7c83793a99fce81b 100644
--- a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java
+++ b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java
@@ -70,6 +70,11 @@ public class EnchantmentWrapper extends Enchantment {
         return getEnchantment().displayName(level);
     }
 
+    @Override
+    public @NotNull String translationKey() {
+        return getEnchantment().translationKey();
+    }
+
     @Override
     public boolean isTradeable() {
         return getEnchantment().isTradeable();
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index 46985eaea3d3b00d1dd88c2dd5a2bc53d518c64f..a621ce84ae379352a8e11a60239e366915a3136c 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -632,6 +632,14 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
     // Spigot end
 
     // Paper start
+    /**
+     * Gets the entity's display name formatted with their team prefix/suffix and
+     * the entity's default hover/click events.
+     *
+     * @return the team display name
+     */
+    @NotNull net.kyori.adventure.text.Component teamDisplayName();
+
     @NotNull
     @Override
     default net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowEntity> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowEntity> op) {
diff --git a/src/main/java/org/bukkit/entity/EntityType.java b/src/main/java/org/bukkit/entity/EntityType.java
index 692b75eb78405874077c850bfc72e247ccc80860..0f3fe91dd6062224d5a10103890d0a30f98c4672 100644
--- a/src/main/java/org/bukkit/entity/EntityType.java
+++ b/src/main/java/org/bukkit/entity/EntityType.java
@@ -20,7 +20,7 @@ import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-public enum EntityType implements Keyed {
+public enum EntityType implements Keyed, net.kyori.adventure.translation.Translatable { // Paper - translatable
 
     // These strings MUST match the strings in nms.EntityTypes and are case sensitive.
     /**
@@ -414,15 +414,27 @@ public enum EntityType implements Keyed {
     public boolean isAlive() {
         return living;
     }
-
+    // Paper start
     /**
      * Return the translation key for the EntityType, so the client can translate it into the active
      * locale when using a TranslatableComponent.<br>
      * This is <code>null</code>, when the EntityType isn't known to NMS (custom entities)
      * @return the translation key
+     * @deprecated use {@link #translationKey()}
      */
+    @Deprecated
     @Nullable
-    String getTranslationKey() {
+    public String getTranslationKey() {
+        return org.bukkit.Bukkit.getUnsafe().getTranslationKey(this);
+    }
+
+    /**
+     * @throws IllegalArgumentException if the entity does not have a translation key (is probably a custom entity)
+     */
+    @Override
+    public @NotNull String translationKey() {
+        Preconditions.checkArgument(this != UNKNOWN, "UNKNOWN entities do not have translation keys");
         return org.bukkit.Bukkit.getUnsafe().getTranslationKey(this);
     }
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 27848ad0eee667e515685a5f1cef3e9bfc7a3f53..4abbc042e9f75440a0d0d4d6cabdb329432ff028 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -104,7 +104,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @return the player list name
      */
-    @Nullable net.kyori.adventure.text.Component playerListName();
+    @NotNull net.kyori.adventure.text.Component playerListName();
 
     /**
      * Gets the currently displayed player list header for this player.
@@ -883,7 +883,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param fadeInTicks  ticks to fade-in
      * @param stayTicks    ticks to stay visible
      * @param fadeOutTicks ticks to fade-out
-     * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)} 
+     * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)} or {@link #sendTitlePart(net.kyori.adventure.title.TitlePart, Object)}
      */
     @Deprecated
     public void setTitleTimes(int fadeInTicks, int stayTicks, int fadeOutTicks);
@@ -892,7 +892,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * Update the subtitle of titles displayed to the player
      *
      * @param subtitle Subtitle to set
-     * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)}
+     * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)} or {@link #sendTitlePart(net.kyori.adventure.title.TitlePart, Object)}
      */
     @Deprecated
     public void setSubtitle(net.md_5.bungee.api.chat.BaseComponent[] subtitle);
@@ -901,7 +901,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * Update the subtitle of titles displayed to the player
      *
      * @param subtitle Subtitle to set
-     * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)}
+     * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)} or {@link #sendTitlePart(net.kyori.adventure.title.TitlePart, Object)}
      */
     @Deprecated
     public void setSubtitle(net.md_5.bungee.api.chat.BaseComponent subtitle);
@@ -910,7 +910,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * Show the given title to the player, along with the last subtitle set, using the last set times
      *
      * @param title Title to set
-     * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)}
+     * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)} or {@link #sendTitlePart(net.kyori.adventure.title.TitlePart, Object)}
      */
     @Deprecated
     public void showTitle(@Nullable net.md_5.bungee.api.chat.BaseComponent[] title);
@@ -919,7 +919,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * Show the given title to the player, along with the last subtitle set, using the last set times
      *
      * @param title Title to set
-     * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)}
+     * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)} or {@link #sendTitlePart(net.kyori.adventure.title.TitlePart, Object)}
      */
     @Deprecated
     public void showTitle(@Nullable net.md_5.bungee.api.chat.BaseComponent title);
@@ -932,7 +932,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param fadeInTicks  ticks to fade-in
      * @param stayTicks    ticks to stay visible
      * @param fadeOutTicks ticks to fade-out
-     * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)}
+     * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)} or {@link #sendTitlePart(net.kyori.adventure.title.TitlePart, Object)}
      */
     @Deprecated
     public void showTitle(@Nullable net.md_5.bungee.api.chat.BaseComponent[] title, @Nullable net.md_5.bungee.api.chat.BaseComponent[] subtitle, int fadeInTicks, int stayTicks, int fadeOutTicks);
@@ -945,7 +945,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param fadeInTicks  ticks to fade-in
      * @param stayTicks    ticks to stay visible
      * @param fadeOutTicks ticks to fade-out
-     * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)}
+     * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)} or {@link #sendTitlePart(net.kyori.adventure.title.TitlePart, Object)}
      */
     @Deprecated
     public void showTitle(@Nullable net.md_5.bungee.api.chat.BaseComponent title, @Nullable net.md_5.bungee.api.chat.BaseComponent subtitle, int fadeInTicks, int stayTicks, int fadeOutTicks);
@@ -957,7 +957,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @param title the title to send
      * @throws NullPointerException if the title is null
-     * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)}
+     * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)} or {@link #sendTitlePart(net.kyori.adventure.title.TitlePart, Object)}
      */
     @Deprecated
     void sendTitle(@NotNull Title title);
@@ -969,7 +969,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @param title the title to send
      * @throws NullPointerException if title is null
-     * @deprecated use {@link #showTitle(net.kyori.adventure.title.Title)}
+     * @deprecated use {@link #showTitle(net.kyori.adventure.title.Title)} or {@link #sendTitlePart(net.kyori.adventure.title.TitlePart, Object)}
      */
     @Deprecated
     void updateTitle(@NotNull Title title);
@@ -1487,7 +1487,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @param title Title text
      * @param subtitle Subtitle text
-     * @deprecated API behavior subject to change
+     * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)} or {@link #sendTitlePart(net.kyori.adventure.title.TitlePart, Object)}
      */
     @Deprecated
     public void sendTitle(@Nullable String title, @Nullable String subtitle);
@@ -1506,7 +1506,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param fadeIn time in ticks for titles to fade in. Defaults to 10.
      * @param stay time in ticks for titles to stay. Defaults to 70.
      * @param fadeOut time in ticks for titles to fade out. Defaults to 20.
+     * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)} or {@link #sendTitlePart(net.kyori.adventure.title.TitlePart, Object)}
      */
+    @Deprecated // Paper - Adventure
     public void sendTitle(@Nullable String title, @Nullable String subtitle, int fadeIn, int stay, int fadeOut);
 
     /**
diff --git a/src/main/java/org/bukkit/event/player/PlayerLocaleChangeEvent.java b/src/main/java/org/bukkit/event/player/PlayerLocaleChangeEvent.java
index 84521186404b8e43c81a2f9513dce2be40d27840..ebd499c1a2d11ea068e8c374edbc3967e4cece3d 100644
--- a/src/main/java/org/bukkit/event/player/PlayerLocaleChangeEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerLocaleChangeEvent.java
@@ -31,9 +31,8 @@ public class PlayerLocaleChangeEvent extends PlayerEvent {
     }
 
     /**
-     * @see Player#getLocale()
-     *
      * @return the player's new locale
+     * @see Player#getLocale()
      * @deprecated in favour of {@link #locale()}
      */
     @NotNull
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index a7909406e9d54c1ab4789b984ed6b1da50837fce..0dcd6597c8ae796a5b258ad2776407e9445d9034 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -25,7 +25,7 @@ import org.jetbrains.annotations.Nullable;
  * use this class to encapsulate Materials for which {@link Material#isItem()}
  * returns false.</b>
  */
-public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyori.adventure.text.event.HoverEventSource<net.kyori.adventure.text.event.HoverEvent.ShowItem> { // Paper
+public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyori.adventure.text.event.HoverEventSource<net.kyori.adventure.text.event.HoverEvent.ShowItem>, net.kyori.adventure.translation.Translatable { // Paper
     private Material type = Material.AIR;
     private int amount = 0;
     private MaterialData data = null;
@@ -883,9 +883,22 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * for the material of this itemstack.
      *
      * @return the translation key
+     * @deprecated use {@link #translationKey()}
      */
     @NotNull
+    @Deprecated
     public String getTranslationKey() {
+        return this.translationKey();
+    }
+
+    /**
+     * {@inheritDoc}
+     * <p>
+     * This is not the same as getting the translation key
+     * for the material of this itemstack.
+     */
+    @Override
+    public @NotNull String translationKey() {
         return Bukkit.getUnsafe().getTranslationKey(this);
     }
 
diff --git a/src/main/java/org/bukkit/permissions/Permissible.java b/src/main/java/org/bukkit/permissions/Permissible.java
index 228421154913116069c20323afb519bdde2134df..91828a9069c81eb079a85c4e30817c2d0118f1bf 100644
--- a/src/main/java/org/bukkit/permissions/Permissible.java
+++ b/src/main/java/org/bukkit/permissions/Permissible.java
@@ -126,4 +126,34 @@ public interface Permissible extends ServerOperator {
      */
     @NotNull
     public Set<PermissionAttachmentInfo> getEffectivePermissions();
+
+    // Paper start - add TriState permission checks
+    /**
+     * Checks if this object has a permission set and, if it is set, the value of the permission.
+     *
+     * @param permission the permission to check
+     * @return a tri-state of if the permission is set and, if it is set, it's value
+     */
+    default @NotNull net.kyori.adventure.util.TriState permissionValue(final @NotNull Permission permission) {
+        if (this.isPermissionSet(permission)) {
+            return net.kyori.adventure.util.TriState.byBoolean(this.hasPermission(permission));
+        } else {
+            return net.kyori.adventure.util.TriState.NOT_SET;
+        }
+    }
+
+    /**
+     * Checks if this object has a permission set and, if it is set, the value of the permission.
+     *
+     * @param permission the permission to check
+     * @return a tri-state of if the permission is set and, if it is set, it's value
+     */
+    default @NotNull net.kyori.adventure.util.TriState permissionValue(final @NotNull String permission) {
+        if (this.isPermissionSet(permission)) {
+            return net.kyori.adventure.util.TriState.byBoolean(this.hasPermission(permission));
+        } else {
+            return net.kyori.adventure.util.TriState.NOT_SET;
+        }
+    }
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/scoreboard/Team.java b/src/main/java/org/bukkit/scoreboard/Team.java
index f0af10a5b9ad048be197ed5ec6c8ed2672eb3dd5..b52c7497c38d88e645c616a30560ed5f6f18ec48 100644
--- a/src/main/java/org/bukkit/scoreboard/Team.java
+++ b/src/main/java/org/bukkit/scoreboard/Team.java
@@ -54,7 +54,6 @@ public interface Team {
      *
      * @param prefix New prefix
      * @throws IllegalArgumentException if prefix is null
-     * @throws IllegalArgumentException if prefix is longer than 64
      *     characters
      * @throws IllegalStateException if this team has been unregistered
      */
diff --git a/src/test/java/org/bukkit/AnnotationTest.java b/src/test/java/org/bukkit/AnnotationTest.java
index 82b2783497947f336b0dd95db61f31f8f77f446c..bd723b22ca8b9cadd5b88751f2cccf1fca7beb70 100644
--- a/src/test/java/org/bukkit/AnnotationTest.java
+++ b/src/test/java/org/bukkit/AnnotationTest.java
@@ -84,7 +84,22 @@ public class AnnotationTest {
                     continue;
                 }
 
-                if (mustBeAnnotated(Type.getReturnType(method.desc)) && !isWellAnnotated(method.invisibleAnnotations) && !isWellAnnotated(method.visibleTypeAnnotations)) { // Paper - also check visible type annotations
+                if (mustBeAnnotated(Type.getReturnType(method.desc)) && !isWellAnnotated(method.invisibleAnnotations)) {
+                    // Paper start
+                    boolean warn = true;
+                    if (isWellAnnotated(method.visibleTypeAnnotations)) {
+                        warn = false;
+                    } else if (method.invisibleTypeAnnotations != null) {
+                        dance: for (final org.objectweb.asm.tree.TypeAnnotationNode invisibleTypeAnnotation : method.invisibleTypeAnnotations) {
+                            final org.objectweb.asm.TypeReference ref = new org.objectweb.asm.TypeReference(invisibleTypeAnnotation.typeRef);
+                            if (ref.getSort() == org.objectweb.asm.TypeReference.METHOD_RETURN && java.util.Arrays.binarySearch(ACCEPTED_ANNOTATIONS, invisibleTypeAnnotation.desc) >= 0) {
+                                warn = false;
+                                break dance; // cha cha real smooth
+                            }
+                        }
+                    }
+                    if (warn)
+                    // Paper end
                     warn(errors, clazz, method, "return value");
                 }
 
