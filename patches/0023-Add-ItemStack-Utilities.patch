From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Wed, 5 Apr 2023 00:53:49 +0900
Subject: [PATCH] Add ItemStack Utilities


diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
index 5171ab782175729ffa26031b764d83f81a924896..f019be50073f3f7647384c7716bed040aca6b73b 100644
--- a/src/main/java/org/bukkit/UnsafeValues.java
+++ b/src/main/java/org/bukkit/UnsafeValues.java
@@ -314,4 +314,25 @@ public interface UnsafeValues {
     ItemStack createEmptyStack(); // Paper - proxy ItemStack
 
     @NotNull moe.caramel.daydream.world.DamageContext getDamageContext(@NotNull Object damageSource); // Daydream - Add more Damage API
+
+    // Daydream start - Add ItemStack Utilities
+    /**
+     * Inventory Iterator를 생성합니다.
+     *
+     * @param inventory 대상 인벤토리
+     * @return Iterator
+     */
+    @NotNull
+    java.util.ListIterator<ItemStack> createInventoryIterator(@NotNull org.bukkit.inventory.Inventory inventory);
+
+    /**
+     * Inventory Iterator를 생성합니다.
+     *
+     * @param inventory 대상 인벤토리
+     * @param nextIndex 다음 인덱스
+     * @return Iterator
+     */
+    @NotNull
+    java.util.ListIterator<ItemStack> createInventoryIterator(@NotNull org.bukkit.inventory.Inventory inventory, int nextIndex);
+    // Daydream end - Add ItemStack Utilities
 }
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index 8c9654cd19af8b28fa276a55c5060eb389e60c1c..4fc16d74b72cfe46a63674345d17ed47731f0c7d 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -71,6 +71,99 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
     @Utility
     protected ItemStack() {}
 
+    // Daydream start - Add ItemStack Utilities
+    /**
+     * Defaults stack size to 1, with no extra data.
+     * <p>
+     * <b>IMPORTANT: An <i>Item</i>Stack is only designed to contain
+     * <i>items</i>. Do not use this class to encapsulate Materials for which
+     * {@link Material#isItem()} returns false.</b>
+     *
+     * @param type item material
+     */
+    @NotNull
+    public static ItemStack create(final @NotNull Material type) {
+        return ItemStack.of(type);
+    }
+
+    /**
+     * Create Item stack.
+     *
+     * @param type item material
+     * @param consumer the meta consumer
+     * @return the item stack
+     */
+    @NotNull
+    public static ItemStack create(final @NotNull Material type, final @NotNull java.util.function.Consumer<? super ItemMeta> consumer) {
+        final ItemStack item = ItemStack.of(type);
+        item.editMeta(consumer);
+        return item;
+    }
+
+    /**
+     * Create Item stack.
+     *
+     * @param type item material
+     * @param metaClass the type of meta to edit
+     * @param consumer the meta consumer
+     * @param <M> the meta type
+     * @return the item stack
+     */
+    @NotNull
+    public static <M extends ItemMeta> ItemStack create(final @NotNull Material type, final @NotNull Class<M> metaClass, final @NotNull java.util.function.Consumer<@NotNull ? super M> consumer) {
+        final ItemStack item = ItemStack.of(type);
+        item.editMeta(metaClass, consumer);
+        return item;
+    }
+
+    /**
+     * An item stack with no extra data.
+     * <p>
+     * <b>IMPORTANT: An <i>Item</i>Stack is only designed to contain
+     * <i>items</i>. Do not use this class to encapsulate Materials for which
+     * {@link Material#isItem()} returns false.</b>
+     *
+     * @param type item material
+     * @param amount stack size
+     */
+    @NotNull
+    public static ItemStack create(final @NotNull Material type, final int amount) {
+        return ItemStack.of(type, amount);
+    }
+
+    /**
+     * Create Item stack.
+     *
+     * @param type item material
+     * @param amount stack size
+     * @param consumer the meta consumer
+     * @return the item stack
+     */
+    @NotNull
+    public static ItemStack create(final @NotNull Material type, final int amount, final @NotNull java.util.function.Consumer<? super ItemMeta> consumer) {
+        final ItemStack item = ItemStack.of(type, amount);
+        item.editMeta(consumer);
+        return item;
+    }
+
+    /**
+     * Create Item stack.
+     *
+     * @param type item material
+     * @param amount stack size
+     * @param metaClass the type of meta to edit
+     * @param consumer the meta consumer
+     * @param <M> the meta type
+     * @return the item stack
+     */
+    @NotNull
+    public static <M extends ItemMeta> ItemStack create(final @NotNull Material type, final int amount, final @NotNull Class<M> metaClass, final @NotNull java.util.function.Consumer<@NotNull ? super M> consumer) {
+        final ItemStack item = ItemStack.of(type, amount);
+        item.editMeta(metaClass, consumer);
+        return item;
+    }
+    // Daydream end - Add ItemStack Utilities
+
     /**
      * Defaults stack size to 1, with no extra data.
      * <p>
diff --git a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
index 2f0a775a6754554b00ad9140886da9b0101acaf5..6bb5c1ddf4d6f98197239a76589f1c12d8f10566 100644
--- a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
@@ -233,6 +233,170 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
     void lore(final @Nullable List<? extends net.kyori.adventure.text.Component> lore);
     // Paper end
 
+    // Daydream start - Add ItemStack Utilities
+    /**
+     * 현재 로어의 크기를 가져옵니다.
+     *
+     * @return 로어의 크기
+     */
+    int loreSize();
+
+    /**
+     * Gets the lore.
+     *
+     * @return the lore
+     */
+    @NotNull List<net.kyori.adventure.text.Component> loreNonNull();
+
+    /**
+     * Sets the lore.
+     *
+     * @param style style for all lore
+     * @param lore the lore to set
+     */
+    void lore(final @NotNull net.kyori.adventure.text.format.Style style, final @Nullable List<? extends net.kyori.adventure.text.Component> lore);
+
+    /**
+     * Sets the lore excluding italic formatting.
+     *
+     * @param lore the lore to set
+     */
+    void loreNoItalic(final @Nullable List<? extends net.kyori.adventure.text.Component> lore);
+
+    /**
+     * Sets the lore excluding italic formatting.
+     *
+     * @param color color for all lore
+     * @param lore the lore to set
+     */
+    void loreNoItalic(final @Nullable net.kyori.adventure.text.format.TextColor color, final @Nullable List<? extends net.kyori.adventure.text.Component> lore);
+
+    /**
+     * Sets the lore excluding client style formatting.
+     *
+     * @param lore the lore to set
+     */
+    void loreDefault(final @Nullable List<? extends net.kyori.adventure.text.Component> lore);
+
+    /**
+     * Sets the lore.
+     *
+     * @param lore the lore to set
+     */
+    void withLore(final @Nullable net.kyori.adventure.text.ComponentLike... lore);
+
+    /**
+     * Sets the lore.
+     *
+     * @param style style for all lore
+     * @param lore the lore to set
+     */
+    void withLore(final @NotNull net.kyori.adventure.text.format.Style style, final @Nullable net.kyori.adventure.text.ComponentLike... lore);
+
+    /**
+     * Sets the lore excluding italic formatting.
+     *
+     * @param lore the lore to set
+     */
+    void withLoreNoItalic(final @Nullable net.kyori.adventure.text.ComponentLike... lore);
+
+    /**
+     * Sets the lore excluding italic formatting.
+     *
+     * @param color color for all lore
+     * @param lore the lore to set
+     */
+    void withLoreNoItalic(final @Nullable net.kyori.adventure.text.format.TextColor color, final @Nullable net.kyori.adventure.text.ComponentLike... lore);
+
+    /**
+     * Sets the lore excluding client style formatting.
+     *
+     * @param lore the lore to set
+     */
+    void withLoreDefault(final @Nullable net.kyori.adventure.text.ComponentLike... lore);
+
+    /**
+     * 로어를 추가합니다.
+     *
+     * @param lore 추가할 로어 리스트
+     */
+    void appendLore(final @NotNull List<? extends net.kyori.adventure.text.ComponentLike> lore);
+
+    /**
+     * 로어를 추가합니다.
+     *
+     * @param style 모든 줄에 적용할 스타일
+     * @param lore 추가할 로어 리스트
+     */
+    void appendLore(final @NotNull net.kyori.adventure.text.format.Style style, final @NotNull List<? extends net.kyori.adventure.text.ComponentLike> lore);
+
+    /**
+     * 로어를 이탤릭체를 비활성화하고 추가합니다.
+     *
+     * @param lore 추가할 로어 리스트
+     */
+    void appendLoreNoItalic(final @NotNull List<? extends net.kyori.adventure.text.ComponentLike> lore);
+
+    /**
+     * 로어를 이탤릭체를 비활성화하고 추가합니다.
+     *
+     * @param color 모든 줄에 적용할 문자 색
+     * @param lore 추가할 로어 리스트
+     */
+    void appendLoreNoItalic(final @Nullable net.kyori.adventure.text.format.TextColor color, final @NotNull List<? extends net.kyori.adventure.text.ComponentLike> lore);
+
+    /**
+     * 로어를 추가하며 클라이언트의 로어 수정을 비활성화합니다.
+     *
+     * @param lore 추가할 로어 리스트
+     */
+    void appendLoreDefault(final @NotNull List<? extends net.kyori.adventure.text.ComponentLike> lore);
+
+    /**
+     * 로어를 추가합니다.
+     *
+     * @param lore 추가할 로어
+     */
+    void appendLore(final @NotNull net.kyori.adventure.text.ComponentLike... lore);
+
+    /**
+     * 로어를 추가합니다.
+     *
+     * @param style 모든 줄에 적용할 스타일
+     * @param lore 추가할 로어
+     */
+    void appendLore(final @NotNull net.kyori.adventure.text.format.Style style, final @NotNull net.kyori.adventure.text.ComponentLike... lore);
+
+    /**
+     * 로어를 이탤릭체를 비활성화하고 추가합니다.
+     *
+     * @param lore 추가할 로어
+     */
+    void appendLoreNoItalic(final @NotNull net.kyori.adventure.text.ComponentLike... lore);
+
+    /**
+     * 로어를 이탤릭체를 비활성화하고 추가합니다.
+     *
+     * @param color 모든 줄에 적용할 문자 색
+     * @param lore 추가할 로어
+     */
+    void appendLoreNoItalic(final @Nullable net.kyori.adventure.text.format.TextColor color, final @NotNull net.kyori.adventure.text.ComponentLike... lore);
+
+    /**
+     * 로어를 추가하며 클라이언트의 로어 수정을 비활성화합니다.
+     *
+     * @param lore 추가할 로어
+     */
+    void appendLoreDefault(final @NotNull net.kyori.adventure.text.ComponentLike... lore);
+
+    /**
+     * 특정 위치의 로어를 제거합니다.
+     *
+     * @param index 로어 인덱스
+     */
+    void removeLore(final int index);
+    // Daydream end - Add ItemStack Utilities
+
     /**
      * Gets the lore that is set.
      * <p>
@@ -302,6 +466,18 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
      */
     int getCustomModelData();
 
+    // Daydream start - Add ItemStack Utilities
+    /**
+     * Gets the custom model data that is set.
+     * <p>
+     * CustomModelData is an integer that may be associated client side with a
+     * custom item model.
+     *
+     * @return the custom model data that is set
+     */
+    @Nullable Integer customModelData();
+    // Daydream end - Add ItemStack Utilities
+
     /**
      * Gets the custom model data set on this item, or creates an empty custom
      * model data instance.
