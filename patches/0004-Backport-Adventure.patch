From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Thu, 22 Jul 2021 15:58:26 +0900
Subject: [PATCH] Backport Adventure


diff --git a/pom.xml b/pom.xml
index e5e4fea964bb59f15173bdb46123208afe55f97d..adbfeb5d14d28e5932f6a3a745b023c77f142f4b 100644
--- a/pom.xml
+++ b/pom.xml
@@ -22,7 +22,7 @@
         <maven.compiler.source>1.8</maven.compiler.source>
         <maven.compiler.target>1.8</maven.compiler.target>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-        <adventure.version>4.7.0</adventure.version> <!-- Paper - When updating this make sure to update the linked JavaDocs on the homepage as well! -->
+        <adventure.version>4.8.1</adventure.version> <!-- Paper - When updating this make sure to update the linked JavaDocs on the homepage as well! -->
     </properties>
 
     <repositories>
diff --git a/src/main/java/io/papermc/paper/chat/ChatComposer.java b/src/main/java/io/papermc/paper/chat/ChatComposer.java
deleted file mode 100644
index 7d2fb50210246bb42d166f7e6d1c0cdfad0bdb3d..0000000000000000000000000000000000000000
--- a/src/main/java/io/papermc/paper/chat/ChatComposer.java
+++ /dev/null
@@ -1,29 +0,0 @@
-package io.papermc.paper.chat;
-
-import net.kyori.adventure.text.Component;
-import org.bukkit.entity.Player;
-import org.jetbrains.annotations.NotNull;
-
-/**
- * A chat composer is responsible for composing chat messages sent by {@link Player}s to the server.
- *
- * @deprecated for removal with 1.17, in favor of {@link ChatRenderer}
- */
-@Deprecated
-@FunctionalInterface
-public interface ChatComposer {
-    ChatComposer DEFAULT = (player, displayName, message) -> Component.translatable("chat.type.text", displayName, message);
-
-    /**
-     * Composes a chat message.
-     *
-     * @param source the message source
-     * @param displayName the display name of the {@link Player} sending the message
-     * @param message the chat message
-     * @return a composed chat message
-     * @deprecated for removal with 1.17
-     */
-    @Deprecated
-    @NotNull
-    Component composeChat(final @NotNull Player source, final @NotNull Component displayName, final @NotNull Component message);
-}
diff --git a/src/main/java/io/papermc/paper/event/player/AbstractChatEvent.java b/src/main/java/io/papermc/paper/event/player/AbstractChatEvent.java
index 718b860ace4077affad715a4e43961e10a83e9d9..fa03a5cb2d3e3e0a60d84bacc911d96c454f81da 100644
--- a/src/main/java/io/papermc/paper/event/player/AbstractChatEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/AbstractChatEvent.java
@@ -1,19 +1,12 @@
 package io.papermc.paper.event.player;
 
-import io.papermc.paper.chat.ChatComposer;
-import io.papermc.paper.chat.ChatFormatter;
-import java.util.HashSet;
 import java.util.Set;
 import io.papermc.paper.chat.ChatRenderer;
 import net.kyori.adventure.audience.Audience;
-import net.kyori.adventure.audience.ForwardingAudience;
 import net.kyori.adventure.text.Component;
-import org.bukkit.Bukkit;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.player.PlayerEvent;
-import org.checkerframework.checker.nullness.qual.NonNull;
-import org.checkerframework.checker.nullness.qual.Nullable;
 import org.jetbrains.annotations.NotNull;
 
 import static java.util.Objects.requireNonNull;
@@ -23,92 +16,19 @@ import static java.util.Objects.requireNonNull;
  */
 public abstract class AbstractChatEvent extends PlayerEvent implements Cancellable {
     private final Set<Audience> viewers;
-    @Deprecated private final Set<Player> recipients;
-    private boolean cancelled = false;
-    private ChatRenderer renderer;
-    @Deprecated private @Nullable ChatComposer composer;
-    @Deprecated private @Nullable ChatFormatter formatter;
     private final Component originalMessage;
+    private ChatRenderer renderer;
     private Component message;
+    private boolean cancelled = false;
 
     AbstractChatEvent(final boolean async, final @NotNull Player player, final @NotNull Set<Audience> viewers, final @NotNull ChatRenderer renderer, final @NotNull Component message, final @NotNull Component originalMessage) {
         super(player, async);
         this.viewers = viewers;
-        this.recipients = new HashSet<>(Bukkit.getOnlinePlayers());
-        this.renderer = renderer;
-        this.message = message;
-        this.originalMessage = originalMessage;
-    }
-
-    /**
-     * @deprecated for removal with 1.17
-     */
-    @Deprecated
-    AbstractChatEvent(final boolean async, final @NotNull Player player, final @NotNull Set<Audience> viewers, final @NotNull ChatRenderer renderer, final @NotNull Component message) {
-        super(player, async);
-        this.viewers = viewers;
-        this.recipients = new HashSet<>(Bukkit.getOnlinePlayers());
-        this.renderer = renderer;
-        this.message = message;
-        this.originalMessage = message;
-    }
-
-    /**
-     * @deprecated for removal with 1.17
-     */
-    @Deprecated
-    AbstractChatEvent(final boolean async, final @NotNull Player player, final @NotNull Set<Player> recipients, final @NotNull Set<Audience> viewers, final @NotNull ChatRenderer renderer, final @NotNull Component message, final @NotNull Component originalMessage) {
-        super(player, async);
-        this.recipients = recipients;
-        this.viewers = viewers;
         this.renderer = renderer;
         this.message = message;
         this.originalMessage = originalMessage;
     }
 
-    /**
-     * @deprecated for removal with 1.17
-     */
-    @Deprecated
-    AbstractChatEvent(final boolean async, final @NotNull Player player, final @NotNull Set<Player> recipients, final @NotNull Set<Audience> viewers, final @NotNull ChatRenderer renderer, final @NotNull Component message) {
-        super(player, async);
-        this.recipients = recipients;
-        this.viewers = viewers;
-        this.renderer = renderer;
-        this.message = message;
-        this.originalMessage = message;
-    }
-
-    /**
-     * @deprecated for removal with 1.17
-     */
-    @Deprecated
-    AbstractChatEvent(final boolean async, final @NotNull Player player, final @NotNull Set<Player> recipients, final @NotNull ChatComposer composer, final @NotNull Component message) {
-        super(player, async);
-        this.recipients = recipients;
-        final Set<Audience> audiences = new HashSet<>(recipients);
-        audiences.add(Bukkit.getConsoleSender());
-        this.viewers = audiences;
-        this.composer = composer;
-        this.message = message;
-        this.originalMessage = message;
-    }
-
-    /**
-     * @deprecated for removal with 1.17
-     */
-    @Deprecated
-    AbstractChatEvent(final boolean async, final @NotNull Player player, final @NotNull Set<Player> recipients, final @NotNull ChatFormatter formatter, final @NotNull Component message) {
-        super(player, async);
-        this.recipients = recipients;
-        final Set<Audience> audiences = new HashSet<>(recipients);
-        audiences.add(Bukkit.getConsoleSender());
-        this.viewers = audiences;
-        this.formatter = formatter;
-        this.message = message;
-        this.originalMessage = message;
-    }
-
     /**
      * Gets a set of {@link Audience audiences} that this chat message will be displayed to.
      *
@@ -127,26 +47,6 @@ public abstract class AbstractChatEvent extends PlayerEvent implements Cancellab
         return this.viewers;
     }
 
-    /**
-     * Gets a set of recipients that this chat message will be displayed to.
-     *
-     * <p>The set returned is not guaranteed to be mutable and may auto-populate
-     * on access. Any listener accessing the returned set should be aware that
-     * it may reduce performance for a lazy set implementation.</p>
-     *
-     * <p>Listeners should be aware that modifying the list may throw {@link
-     * UnsupportedOperationException} if the event caller provides an
-     * unmodifiable set.</p>
-     *
-     * @return a set of players who will receive the chat message
-     * @deprecated for removal with 1.17, in favor of {@link #viewers()}
-     */
-    @Deprecated
-    @NotNull
-    public final Set<Player> recipients() {
-        return this.recipients;
-    }
-
     /**
      * Sets the chat renderer.
      *
@@ -155,8 +55,6 @@ public abstract class AbstractChatEvent extends PlayerEvent implements Cancellab
      */
     public final void renderer(final @NotNull ChatRenderer renderer) {
         this.renderer = requireNonNull(renderer, "renderer");
-        this.formatter = null;
-        this.composer = null;
     }
 
     /**
@@ -166,85 +64,9 @@ public abstract class AbstractChatEvent extends PlayerEvent implements Cancellab
      */
     @NotNull
     public final ChatRenderer renderer() {
-        if(this.renderer == null) {
-            if(this.composer != null) {
-                this.renderer = ChatRenderer.viewerUnaware((source, displayName, message) -> this.composer.composeChat(source, source.displayName(), message));
-            } else {
-                requireNonNull(this.formatter, "renderer, composer, and formatter");
-                this.renderer = ChatRenderer.viewerUnaware((source, displayName, message) -> this.formatter.chat(source.displayName(), message));
-            }
-        }
         return this.renderer;
     }
 
-    /**
-     * Gets the chat composer.
-     *
-     * @return the chat composer
-     * @deprecated for removal with 1.17, in favour of {@link #renderer()}
-     */
-    @Deprecated
-    @NotNull
-    public final ChatComposer composer() {
-        if(this.composer == null) {
-            if(this.renderer != null) {
-                this.composer = (source, displayName, message) -> this.renderer.render(source, displayName, message, this.legacyForwardingAudience());
-            } else {
-                requireNonNull(this.formatter, "renderer, composer, and formatter");
-                this.composer = (source, displayName, message) -> this.formatter.chat(displayName, message);
-            }
-        }
-        return this.composer;
-    }
-
-    /**
-     * Sets the chat composer.
-     *
-     * @param composer the chat composer
-     * @throws NullPointerException if {@code composer} is {@code null}
-     * @deprecated for removal with 1.17, in favour of {@link #renderer(ChatRenderer)}
-     */
-    @Deprecated
-    public final void composer(final @NotNull ChatComposer composer) {
-        this.composer = requireNonNull(composer, "composer");
-        this.formatter = null;
-        this.renderer = null;
-    }
-
-    /**
-     * Gets the chat formatter.
-     *
-     * @return the chat formatter
-     * @deprecated for removal with 1.17, in favour of {@link #renderer()}
-     */
-    @Deprecated
-    @NotNull
-    public final ChatFormatter formatter() {
-        if(this.formatter == null) {
-            if(this.renderer != null) {
-                this.formatter = (displayName, message) -> this.renderer.render(this.player, displayName, message, this.legacyForwardingAudience());
-            } else {
-                requireNonNull(this.composer, "renderer, composer, and formatter");
-                this.formatter = (displayName, message) -> this.composer.composeChat(this.player, displayName, message);
-            }
-        }
-        return this.formatter;
-    }
-
-    /**
-     * Sets the chat formatter.
-     *
-     * @param formatter the chat formatter
-     * @throws NullPointerException if {@code formatter} is {@code null}
-     * @deprecated for removal with 1.17, in favour of {@link #renderer(ChatRenderer)}
-     */
-    @Deprecated
-    public final void formatter(final @NotNull ChatFormatter formatter) {
-        this.formatter = requireNonNull(formatter, "formatter");
-        this.composer = null;
-        this.renderer = null;
-    }
-
     /**
      * Gets the user-supplied message.
      * The return value will reflect changes made using {@link #message(Component)}.
@@ -287,13 +109,4 @@ public abstract class AbstractChatEvent extends PlayerEvent implements Cancellab
     public final void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
-
-    private @NotNull Audience legacyForwardingAudience() {
-        return new ForwardingAudience() {
-            @Override
-            public @NonNull Iterable<? extends Audience> audiences() {
-                return AbstractChatEvent.this.viewers;
-            }
-        };
-    }
 }
diff --git a/src/main/java/io/papermc/paper/event/player/AsyncChatEvent.java b/src/main/java/io/papermc/paper/event/player/AsyncChatEvent.java
index ee7ec316a2f814ec759e0a3e5dfe5efbee782b22..0d9e3c23027e3af90cb70e4bb6fb0ac1da35fc4d 100644
--- a/src/main/java/io/papermc/paper/event/player/AsyncChatEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/AsyncChatEvent.java
@@ -1,7 +1,5 @@
 package io.papermc.paper.event.player;
 
-import io.papermc.paper.chat.ChatComposer;
-import io.papermc.paper.chat.ChatFormatter;
 import java.util.Set;
 import io.papermc.paper.chat.ChatRenderer;
 import net.kyori.adventure.audience.Audience;
@@ -20,46 +18,6 @@ public final class AsyncChatEvent extends AbstractChatEvent {
         super(async, player, viewers, renderer, message, originalMessage);
     }
 
-    /**
-     * @deprecated for removal with 1.17, use {@link #AsyncChatEvent(boolean, Player, Set, ChatRenderer, Component, Component)}
-     */
-    @Deprecated
-    public AsyncChatEvent(final boolean async, final @NotNull Player player, final @NotNull Set<Audience> viewers, final @NotNull ChatRenderer renderer, final @NotNull Component message) {
-        super(async, player, viewers, renderer, message);
-    }
-
-    /**
-     * @deprecated for removal with 1.17, use {@link #AsyncChatEvent(boolean, Player, Set, ChatRenderer, Component, Component)}
-     */
-    @Deprecated
-    public AsyncChatEvent(final boolean async, final @NotNull Player player, final @NotNull Set<Player> recipients, final @NotNull Set<Audience> viewers, final @NotNull ChatRenderer renderer, final @NotNull Component message, final @NotNull Component originalMessage) {
-        super(async, player, recipients, viewers, renderer, message, originalMessage);
-    }
-
-    /**
-     * @deprecated for removal with 1.17, use {@link #AsyncChatEvent(boolean, Player, Set, ChatRenderer, Component, Component)}
-     */
-    @Deprecated
-    public AsyncChatEvent(final boolean async, final @NotNull Player player, final @NotNull Set<Player> recipients, final @NotNull Set<Audience> viewers, final @NotNull ChatRenderer renderer, final @NotNull Component message) {
-        super(async, player, recipients, viewers, renderer, message);
-    }
-
-    /**
-     * @deprecated for removal with 1.17, use {@link #AsyncChatEvent(boolean, Player, Set, ChatRenderer, Component, Component)}
-     */
-    @Deprecated
-    public AsyncChatEvent(final boolean async, final @NotNull Player player, final @NotNull Set<Player> recipients, final @NotNull ChatComposer composer, final @NotNull Component message) {
-        super(async, player, recipients, composer, message);
-    }
-
-    /**
-     * @deprecated for removal with 1.17, use {@link #AsyncChatEvent(boolean, Player, Set, ChatRenderer, Component, Component)}
-     */
-    @Deprecated
-    public AsyncChatEvent(final boolean async, final @NotNull Player player, final @NotNull Set<Player> recipients, final @NotNull ChatFormatter formatter, final @NotNull Component message) {
-        super(async, player, recipients, formatter, message);
-    }
-
     @NotNull
     @Override
     public HandlerList getHandlers() {
diff --git a/src/main/java/io/papermc/paper/event/player/ChatEvent.java b/src/main/java/io/papermc/paper/event/player/ChatEvent.java
index c6bcf0dc3f77c631aa7eeb9b1e88b5bbfe445fc6..eb179aae1e1d2ce842442e49fe275827a430ccd0 100644
--- a/src/main/java/io/papermc/paper/event/player/ChatEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/ChatEvent.java
@@ -1,7 +1,5 @@
 package io.papermc.paper.event.player;
 
-import io.papermc.paper.chat.ChatComposer;
-import io.papermc.paper.chat.ChatFormatter;
 import java.util.Set;
 import io.papermc.paper.chat.ChatRenderer;
 import net.kyori.adventure.audience.Audience;
@@ -25,38 +23,6 @@ public final class ChatEvent extends AbstractChatEvent {
         super(false, player, viewers, renderer, message, originalMessage);
     }
 
-    /**
-     * @deprecated for removal with 1.17, use {@link #ChatEvent(Player, Set, ChatRenderer, Component, Component)}
-     */
-    @Deprecated
-    public ChatEvent(final @NotNull Player player, final @NotNull Set<Audience> viewers, final @NotNull ChatRenderer renderer, final @NotNull Component message) {
-        super(false, player, viewers, renderer, message);
-    }
-
-    /**
-     * @deprecated for removal with 1.17, use {@link #ChatEvent(Player, Set, ChatRenderer, Component, Component)}
-     */
-    @Deprecated
-    public ChatEvent(final @NotNull Player player, final @NotNull Set<Player> recipients, final @NotNull Set<Audience> viewers, final @NotNull ChatRenderer renderer, final @NotNull Component message, final @NotNull Component originalMessage) {
-        super(false, player, recipients, viewers, renderer, message, originalMessage);
-    }
-
-    /**
-     * @deprecated for removal with 1.17, use {@link #ChatEvent(Player, Set, ChatRenderer, Component, Component)}
-     */
-    @Deprecated
-    public ChatEvent(final @NotNull Player player, final @NotNull Set<Player> recipients, final @NotNull ChatComposer composer, final @NotNull Component message) {
-        super(false, player, recipients, composer, message);
-    }
-
-    /**
-     * @deprecated for removal with 1.17, use {@link #ChatEvent(Player, Set, ChatRenderer, Component, Component)}
-     */
-    @Deprecated
-    public ChatEvent(final @NotNull Player player, final @NotNull Set<Player> recipients, final @NotNull ChatFormatter formatter, final @NotNull Component message) {
-        super(false, player, recipients, formatter, message);
-    }
-
     @NotNull
     @Override
     public HandlerList getHandlers() {
diff --git a/src/main/java/org/bukkit/SoundCategory.java b/src/main/java/org/bukkit/SoundCategory.java
index ac5e263d737973af077e3406a84a84baca4370db..56f131d284d31ddd86cc55a7e281712ecb0e9488 100644
--- a/src/main/java/org/bukkit/SoundCategory.java
+++ b/src/main/java/org/bukkit/SoundCategory.java
@@ -3,7 +3,7 @@ package org.bukkit;
 /**
  * An Enum of categories for sounds.
  */
-public enum SoundCategory {
+public enum SoundCategory implements net.kyori.adventure.sound.Sound.Source.Provider { // Daydream - implement Sound.Source.Provider
 
     MASTER,
     MUSIC,
@@ -15,4 +15,35 @@ public enum SoundCategory {
     PLAYERS,
     AMBIENT,
     VOICE;
+
+    // Daydream start - implement Sound.Source.Provider
+    // caramel comment - 1.16.5 서버 구동기의 Java 16 호환성 확인 후 Java 14 모듈형 switch 로 다시 변경
+    @Override
+    public net.kyori.adventure.sound.Sound.@org.jetbrains.annotations.NotNull Source soundSource() {
+        switch (this) {
+            case MASTER:
+                return net.kyori.adventure.sound.Sound.Source.MASTER;
+            case MUSIC:
+                return net.kyori.adventure.sound.Sound.Source.MUSIC;
+            case RECORDS:
+                return net.kyori.adventure.sound.Sound.Source.RECORD;
+            case WEATHER:
+                return net.kyori.adventure.sound.Sound.Source.WEATHER;
+            case BLOCKS:
+                return net.kyori.adventure.sound.Sound.Source.BLOCK;
+            case HOSTILE:
+                return net.kyori.adventure.sound.Sound.Source.HOSTILE;
+            case NEUTRAL:
+                return net.kyori.adventure.sound.Sound.Source.NEUTRAL;
+            case PLAYERS:
+                return net.kyori.adventure.sound.Sound.Source.PLAYER;
+            case AMBIENT:
+                return net.kyori.adventure.sound.Sound.Source.AMBIENT;
+            case VOICE:
+                return net.kyori.adventure.sound.Sound.Source.VOICE;
+            default:
+                throw new IllegalArgumentException();
+        }
+    }
+    // Daydream end
 }
diff --git a/src/main/java/org/bukkit/block/Sign.java b/src/main/java/org/bukkit/block/Sign.java
index 6ea9b54d95d80070c01a612c0ce2ab37f0b4ad41..18b48bdbc41a06d0685079683b0322f6a3492da9 100644
--- a/src/main/java/org/bukkit/block/Sign.java
+++ b/src/main/java/org/bukkit/block/Sign.java
@@ -57,8 +57,8 @@ public interface Sign extends TileState, Colorable {
      * For example, getLine(0) will return the first line of text.
      *
      * @param index Line number to get the text from, starting at 0
-     * @throws IndexOutOfBoundsException Thrown when the line does not exist
      * @return Text on the given line
+     * @throws IndexOutOfBoundsException Thrown when the line does not exist
      * @deprecated in favour of {@link #line(int)}
      */
     @NotNull
diff --git a/src/test/java/org/bukkit/AnnotationTest.java b/src/test/java/org/bukkit/AnnotationTest.java
index 82b2783497947f336b0dd95db61f31f8f77f446c..bd723b22ca8b9cadd5b88751f2cccf1fca7beb70 100644
--- a/src/test/java/org/bukkit/AnnotationTest.java
+++ b/src/test/java/org/bukkit/AnnotationTest.java
@@ -84,7 +84,22 @@ public class AnnotationTest {
                     continue;
                 }
 
-                if (mustBeAnnotated(Type.getReturnType(method.desc)) && !isWellAnnotated(method.invisibleAnnotations) && !isWellAnnotated(method.visibleTypeAnnotations)) { // Paper - also check visible type annotations
+                if (mustBeAnnotated(Type.getReturnType(method.desc)) && !isWellAnnotated(method.invisibleAnnotations)) {
+                    // Paper start
+                    boolean warn = true;
+                    if (isWellAnnotated(method.visibleTypeAnnotations)) {
+                        warn = false;
+                    } else if (method.invisibleTypeAnnotations != null) {
+                        dance: for (final org.objectweb.asm.tree.TypeAnnotationNode invisibleTypeAnnotation : method.invisibleTypeAnnotations) {
+                            final org.objectweb.asm.TypeReference ref = new org.objectweb.asm.TypeReference(invisibleTypeAnnotation.typeRef);
+                            if (ref.getSort() == org.objectweb.asm.TypeReference.METHOD_RETURN && java.util.Arrays.binarySearch(ACCEPTED_ANNOTATIONS, invisibleTypeAnnotation.desc) >= 0) {
+                                warn = false;
+                                break dance; // cha cha real smooth
+                            }
+                        }
+                    }
+                    if (warn)
+                    // Paper end
                     warn(errors, clazz, method, "return value");
                 }
 
