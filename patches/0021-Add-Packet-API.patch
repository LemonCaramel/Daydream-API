From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Sat, 16 Jul 2022 00:04:33 +0900
Subject: [PATCH] Add Packet API


diff --git a/src/main/java/moe/caramel/daydream/event/network/PacketType.java b/src/main/java/moe/caramel/daydream/event/network/PacketType.java
new file mode 100644
index 0000000000000000000000000000000000000000..b2e79d611160879693643fd42a9254c5b82f42ae
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/network/PacketType.java
@@ -0,0 +1,16 @@
+package moe.caramel.daydream.event.network;
+
+/**
+ * Packet Lists
+ */
+public final class PacketType {
+
+    private PacketType() { throw new UnsupportedOperationException(); }
+
+    /**
+     * [Client -> Server] Packets
+     */
+    public enum Client {
+        PLAYER_INPUT
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/event/network/ReceivePacketEvent.java b/src/main/java/moe/caramel/daydream/event/network/ReceivePacketEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..159f0bd553535a6e893a7e96ea13e5563d24d97e
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/network/ReceivePacketEvent.java
@@ -0,0 +1,45 @@
+package moe.caramel.daydream.event.network;
+
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * 서버가 클라이언트로부터 패킷을 전달받았을 때 호출됩니다.
+ */
+public class ReceivePacketEvent extends PlayerEvent implements Cancellable {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+    public @NotNull HandlerList getHandlers() { return HANDLER_LIST; }
+    public static @NotNull HandlerList getHandlerList() { return HANDLER_LIST; }
+
+    private final PacketType.Client packetType;
+    private boolean cancelled;
+
+    public ReceivePacketEvent(@NotNull Player who, @NotNull PacketType.Client packetType) {
+        super(who);
+        this.packetType = packetType;
+    }
+
+    /**
+     * 클라이언트가 보낸 패킷의 종류를 가져옵니다.
+     *
+     * @return 클라이언트가 보낸 패킷의 종류
+     */
+    @NotNull
+    public PacketType.Client getPacketType() {
+        return packetType;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return this.cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/event/network/ReceivePlayerInputPacketEvent.java b/src/main/java/moe/caramel/daydream/event/network/ReceivePlayerInputPacketEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..0745c1744fc6ad02812b19bd2fcbcbfbfe9db4c2
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/network/ReceivePlayerInputPacketEvent.java
@@ -0,0 +1,106 @@
+package moe.caramel.daydream.event.network;
+
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * 서버가 클라이언트로부터 {@link PacketType.Client#PLAYER_INPUT}패킷을 전달받았을 때 호출됩니다.
+ */
+public final class ReceivePlayerInputPacketEvent extends ReceivePacketEvent {
+
+    private float sideways, forward;
+    private boolean jumping, shiftKeyDown;
+
+    public ReceivePlayerInputPacketEvent(@NotNull Player who, float sideways, float forward, boolean jumping, boolean shiftKeyDown) {
+        super(who, PacketType.Client.PLAYER_INPUT);
+        this.sideways = sideways;
+        this.forward = forward;
+        this.jumping = jumping;
+        this.shiftKeyDown = shiftKeyDown;
+    }
+
+    /**
+     * Gets sideways value.
+     *
+     * @return sideways value
+     */
+    public float getSideways() {
+        return sideways;
+    }
+
+    /**
+     * Sets sideways value.
+     *
+     * @param sideways new sideways value
+     */
+    public void setSideways(float sideways) {
+        this.sideways = sideways;
+    }
+
+    /**
+     * Gets forward value.
+     *
+     * @return forward value
+     */
+    public float getForward() {
+        return forward;
+    }
+
+    /**
+     * Sets forward value.
+     *
+     * @param forward new forward value
+     */
+    public void setForward(float forward) {
+        this.forward = forward;
+    }
+
+    /**
+     * Gets jumping value.
+     *
+     * @return jumping value
+     */
+    public boolean isJumping() {
+        return jumping;
+    }
+
+    /**
+     * Sets jumping value.
+     *
+     * @param jumping new jumping value
+     */
+    public void setJumping(boolean jumping) {
+        this.jumping = jumping;
+    }
+
+    /**
+     * Gets shiftKeyDown value.
+     *
+     * @return shiftKeyDown value
+     */
+    public boolean isShiftKeyDown() {
+        return shiftKeyDown;
+    }
+
+    /**
+     * Sets shiftKeyDown value.
+     *
+     * @param shiftKeyDown new shiftKeyDown value
+     */
+    public void setShiftKeyDown(boolean shiftKeyDown) {
+        this.shiftKeyDown = shiftKeyDown;
+    }
+
+    @Override
+    public String toString() {
+        return "ReceivePlayerInputPacketEvent{" +
+            "packetType=" + this.getPacketType() +
+            ", player=" + this.getPlayer() +
+            ", sideways=" + sideways +
+            ", forward=" + forward +
+            ", jumping=" + jumping +
+            ", shiftKeyDown=" + shiftKeyDown +
+            ", cancelled=" + this.isCancelled() +
+            '}';
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/network/Packet.java b/src/main/java/moe/caramel/daydream/network/Packet.java
new file mode 100644
index 0000000000000000000000000000000000000000..6eef5e86697ff2b9dcb8a5a48cc8dfd590cdf6d6
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/network/Packet.java
@@ -0,0 +1,16 @@
+package moe.caramel.daydream.network;
+
+public interface Packet {
+
+    /**
+     * Packet API Version
+     */
+    int API_VERSION = 1;
+
+    /**
+     * 패킷이 빌드 가능한지 확인합니다.
+     *
+     * @return 빌드가 가능하면 {@code true}를 반환합니다.
+     */
+    boolean canBuild();
+}
diff --git a/src/main/java/moe/caramel/daydream/network/packet/ContainerSetSlotPacket.java b/src/main/java/moe/caramel/daydream/network/packet/ContainerSetSlotPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..637733777edce64f1ed852c676f41b55973043ba
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/network/packet/ContainerSetSlotPacket.java
@@ -0,0 +1,23 @@
+package moe.caramel.daydream.network.packet;
+
+import moe.caramel.daydream.network.Packet;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
+public interface ContainerSetSlotPacket extends Packet {
+
+    int CARRIED_ITEM = -1;
+    int PLAYER_INVENTORY = -2;
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param windowId 현재 업데이트 중인 창
+     * @param revision 상태 ID (플레이어가 아이템을 클릭했을 때 이 값을 돌려받습니다)
+     * @param slot 업데이트해야 하는 슬롯
+     * @param stack 아이템
+     * @return this
+     */
+    @NotNull
+    ContainerSetSlotPacket create(int windowId, int revision, int slot, @NotNull ItemStack stack);
+}
diff --git a/src/main/java/moe/caramel/daydream/network/packet/GameEventPacket.java b/src/main/java/moe/caramel/daydream/network/packet/GameEventPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..091f30773662c104a6e5017209febee20deccee9
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/network/packet/GameEventPacket.java
@@ -0,0 +1,31 @@
+package moe.caramel.daydream.network.packet;
+
+import moe.caramel.daydream.network.Packet;
+import org.jetbrains.annotations.NotNull;
+
+public interface GameEventPacket extends Packet {
+
+    int NO_RESPAWN_BLOCK_AVAILABLE = 0;
+    int START_RAINING = 1;
+    int STOP_RAINING = 2;
+    int CHANGE_GAME_MODE = 3;
+    int WIN_GAME = 4;
+    int DEMO_EVENT = 5;
+    int ARROW_HIT_PLAYER = 6;
+    int RAIN_LEVEL_CHANGE = 7;
+    int THUNDER_LEVEL_CHANGE = 8;
+    int PUFFER_FISH_STING = 9;
+    int GUARDIAN_ELDER_EFFECT = 10;
+    int IMMEDIATE_RESPAWN = 11;
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param event 게임 이벤트
+     * @param value 이벤트에 따라 값이 다릅니다.
+     *              <a href="http://wiki.vg/Protocol#Game_Event">여기</a>를 참고하세요.
+     * @return this
+     */
+    @NotNull
+    GameEventPacket create(int event, float value);
+}
diff --git a/src/main/java/moe/caramel/daydream/network/packet/PlayerInfoPacket.java b/src/main/java/moe/caramel/daydream/network/packet/PlayerInfoPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..871264afd7094c2d8dd1ec627bb26a8baf7ef7e0
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/network/packet/PlayerInfoPacket.java
@@ -0,0 +1,165 @@
+package moe.caramel.daydream.network.packet;
+
+import com.mojang.authlib.GameProfile;
+import moe.caramel.daydream.network.Packet;
+import net.kyori.adventure.text.Component;
+import org.bukkit.GameMode;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import java.util.Collection;
+import java.util.UUID;
+
+public interface PlayerInfoPacket extends Packet {
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param action 패킷이 수행할 작업
+     * @param data 플레이어 데이터
+     * @return this
+     */
+    @NotNull
+    PlayerInfoPacket create(@NotNull Action action, @NotNull PlayerData... data);
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param action 패킷이 수행할 작업
+     * @param data 플레이어 데이터
+     * @return this
+     */
+    @NotNull
+    PlayerInfoPacket create(@NotNull Action action, @NotNull Collection<PlayerData> data);
+
+
+    /**
+     * 플레이어 데이터
+     *
+     * @param profile 플레이어의 게임 프로파일 (필수: 모두)
+     * @param latency 플레이어의 지연 시간 (필수: {@link Action#ADD_PLAYER}, {@link Action#UPDATE_LATENCY})
+     * @param gameMode 플레이어의 게임 모드 (필수: {@link Action#ADD_PLAYER}, {@link Action#UPDATE_GAME_MODE})
+     * @param displayName 플레이어의 표시 이름 (nullable)
+     */
+    record PlayerData(
+        @NotNull GameProfile profile, int latency,
+        @Nullable GameMode gameMode, @Nullable Component displayName
+    ) {}
+
+
+    /**
+     * for Add Player Action
+     *
+     * @param profile 플레이어의 게임 프로파일
+     * @param latency 플레이어의 지연 시간
+     * @param gameMode 플레이어의 게임 모드
+     * @param displayName 플레이어의 표시 이름 (nullable)
+     * @return 플레이어 데이터
+     */
+    @NotNull
+    static PlayerData addPlayer(
+        @NotNull GameProfile profile, int latency,
+        @NotNull GameMode gameMode, @Nullable Component displayName
+    ) {
+        return new PlayerData(profile, latency, gameMode, displayName);
+    }
+
+    /**
+     * for Add Player Action
+     *
+     * @param player 대상 플레이어
+     * @return 플레이어 데이터
+     */
+    @NotNull
+    static PlayerData addPlayer(@NotNull Player player) {
+        return PlayerInfoPacket.addPlayer(
+            player.getProfile(), player.getPing(),
+            player.getGameMode(), player.displayName()
+        );
+    }
+
+    /**
+     * for Update GameMode Action
+     *
+     * @param uuid 플레이어의 UUID
+     * @param gameMode 플레이어의 게임 모드
+     * @return 플레이어 데이터
+     */
+    @NotNull
+    static PlayerData updateGameMode(@NotNull UUID uuid, @NotNull GameMode gameMode) {
+        return new PlayerData(new GameProfile(uuid, null), 0, gameMode, null);
+    }
+
+    /**
+     * for Update Latency Action
+     *
+     * @param uuid 플레이어의 UUID
+     * @param latency 플레이어의 지연 시간
+     * @return 플레이어 데이터
+     */
+    @NotNull
+    static PlayerData updateLatency(@NotNull UUID uuid, int latency) {
+        return new PlayerData(new GameProfile(uuid, null), latency, null, null);
+    }
+
+    /**
+     * for Update DisplayName Action
+     *
+     * @param uuid 플레이어의 UUID
+     * @param displayName 플레이어의 표시 이름 (nullable)
+     * @return 플레이어 데이터
+     */
+    @NotNull
+    static PlayerData updateDisplayName(@NotNull UUID uuid, @Nullable Component displayName) {
+        return new PlayerData(new GameProfile(uuid, null), 0, null, displayName);
+    }
+
+    /**
+     * for Remove Player Action
+     *
+     * @param uuid 플레이어의 UUID
+     * @return 플레이어 데이터
+     */
+    @NotNull
+    static PlayerData removePlayer(@NotNull UUID uuid) {
+        return new PlayerData(new GameProfile(uuid, null), 0, null, null);
+    }
+
+    /**
+     * for Remove Player Action
+     *
+     * @param player 대상 플레이어
+     * @return 플레이어 데이터
+     */
+    @NotNull
+    static PlayerData removePlayer(@NotNull Player player) {
+        return new PlayerData(player.getProfile(), 0, null, null);
+    }
+
+
+    /**
+     * Player Info 패킷 액션
+     */
+    enum Action {
+        /**
+         * 플레이어를 추가합니다.
+         */
+        ADD_PLAYER,
+        /**
+         * 플레이어의 게임 모드를 업데이트합니다.
+         */
+        UPDATE_GAME_MODE,
+        /**
+         * 플레이어의 지연 시간을 업데이트합니다.
+         */
+        UPDATE_LATENCY,
+        /**
+         * 플레이어의 표시 이름을 업데이트합니다.
+         */
+        UPDATE_DISPLAY_NAME,
+        /**
+         * 플레이어를 제거합니다.
+         */
+        REMOVE_PLAYER;
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/network/packet/SetChunkCacheRadiusPacket.java b/src/main/java/moe/caramel/daydream/network/packet/SetChunkCacheRadiusPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..6d0d0956e39e54d29560397888f194fb999753ac
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/network/packet/SetChunkCacheRadiusPacket.java
@@ -0,0 +1,16 @@
+package moe.caramel.daydream.network.packet;
+
+import moe.caramel.daydream.network.Packet;
+import org.jetbrains.annotations.NotNull;
+
+public interface SetChunkCacheRadiusPacket extends Packet {
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param distance 플레이어의 청크 렌더 거리
+     * @return this
+     */
+    @NotNull
+    SetChunkCacheRadiusPacket create(int distance);
+}
diff --git a/src/main/java/moe/caramel/daydream/network/packet/SetDisplayObjectivePacket.java b/src/main/java/moe/caramel/daydream/network/packet/SetDisplayObjectivePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..921aa1a9ed934b8aa292e12490924a10b8783ccb
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/network/packet/SetDisplayObjectivePacket.java
@@ -0,0 +1,65 @@
+package moe.caramel.daydream.network.packet;
+
+import moe.caramel.daydream.network.Packet;
+import org.bukkit.scoreboard.DisplaySlot;
+import org.bukkit.scoreboard.Objective;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public interface SetDisplayObjectivePacket extends Packet {
+
+    int PLAYER_LIST = 0;
+    int SIDEBAR = 1;
+    int BELOW_NAME = 2;
+    int SIDEBAR_TEAM_BLACK = 3;
+    int SIDEBAR_TEAM_DARK_BLUE = 4;
+    int SIDEBAR_TEAM_DARK_GREEN = 5;
+    int SIDEBAR_TEAM_DARK_AQUA = 6;
+    int SIDEBAR_TEAM_DARK_RED = 7;
+    int SIDEBAR_TEAM_DARK_PURPLE = 8;
+    int SIDEBAR_TEAM_GOLD = 9;
+    int SIDEBAR_TEAM_GRAY = 10;
+    int SIDEBAR_TEAM_DARK_GRAY = 11;
+    int SIDEBAR_TEAM_BLUE = 12;
+    int SIDEBAR_TEAM_GREEN = 13;
+    int SIDEBAR_TEAM_AQUA = 14;
+    int SIDEBAR_TEAM_RED = 15;
+    int SIDEBAR_TEAM_LIGHT_PURPLE = 16;
+    int SIDEBAR_TEAM_YELLOW = 17;
+    int SIDEBAR_TEAM_WHITE = 18;
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param slot 스코어보드의 위치
+     *              <a href="https://wiki.vg/Protocol#Display_Objective">여기</a>를 참고하세요.
+     * @param objective {@link Objective} 객체
+     * @return this
+     */
+    @NotNull
+    SetDisplayObjectivePacket create(@NotNull DisplaySlot slot, @NotNull Objective objective);
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param position 스코어보드의 위치
+     *              <a href="https://wiki.vg/Protocol#Display_Objective">여기</a>를 참고하세요.
+     * @param objective {@link Objective} 객체
+     * @return this
+     */
+    @NotNull
+    default SetDisplayObjectivePacket create(int position, @NotNull Objective objective) {
+        return this.create(position, objective.getName());
+    }
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param position 스코어보드의 위치
+     *              <a href="https://wiki.vg/Protocol#Display_Objective">여기</a>를 참고하세요.
+     * @param scoreName {@link Objective}의 이름
+     * @return this
+     */
+    @NotNull
+    SetDisplayObjectivePacket create(int position, @Nullable String scoreName);
+}
diff --git a/src/main/java/moe/caramel/daydream/network/packet/SetPlayerTeamPacket.java b/src/main/java/moe/caramel/daydream/network/packet/SetPlayerTeamPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..1c1dcb38a55e8a480ef47f0e2247e2ba0583d827
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/network/packet/SetPlayerTeamPacket.java
@@ -0,0 +1,101 @@
+package moe.caramel.daydream.network.packet;
+
+import moe.caramel.daydream.network.Packet;
+import net.kyori.adventure.text.Component;
+import org.bukkit.ChatColor;
+import org.bukkit.scoreboard.Team;
+import org.jetbrains.annotations.NotNull;
+import java.util.Collection;
+
+public interface SetPlayerTeamPacket extends Packet {
+
+    /*
+        CREATE OR UPDATE
+     */
+
+    /**
+     * 팀 추가 또는 업데이트 패킷을 생성합니다.
+     *
+     * @param team 추가 또는 업데이트할 팀
+     * @param add 만약 {@code true}라면 추가, 아니라면 정보를 업데이트 합니다
+     * @return this
+     */
+    @NotNull
+    SetPlayerTeamPacket createTeamAddOrUpdatePacket(@NotNull Team team, boolean add);
+
+    /**
+     * 팀 추가 또는 업데이트 패킷을 생성합니다.
+     *
+     * @param teamName 추가 또는 업데이트할 팀의 이름
+     * @param displayName 팀의 디스플레이 이름
+     * @param allowFriendlyFire 만약 {@code true}라면 아군 사격을 허용합니다
+     * @param canSeeFriendlyInvisibles 만약 {@code true}라면 보이지 않는 플레이어를 볼 수 있습니다
+     * @param nametagVisibility 팀의 이름 태그 가시성 규칙
+     * @param collisionRule 팀의 충돌 규칙
+     * @param color 팀의 색
+     * @param teamPrefix 팀의 접두사
+     * @param teamSuffix 팀의 접미사
+     * @param add 만약 {@code true}라면 추가, 아니라면 정보를 업데이트 합니다
+     * @return this
+     */
+    @NotNull
+    SetPlayerTeamPacket createTeamAddOrUpdatePacket(
+        @NotNull String teamName,
+        @NotNull Component displayName,
+        boolean allowFriendlyFire, boolean canSeeFriendlyInvisibles,
+        @NotNull Team.OptionStatus nametagVisibility,
+        @NotNull Team.OptionStatus collisionRule, @NotNull ChatColor color,
+        @NotNull Component teamPrefix, @NotNull Component teamSuffix,
+        boolean add
+    );
+
+
+    /*
+        REMOVE
+     */
+
+    /**
+     * 팀 제거 패킷을 생성합니다.
+     *
+     * @param team 제거할 팀
+     * @return this
+     */
+    @NotNull
+    SetPlayerTeamPacket createTeamRemovePacket(@NotNull Team team);
+
+    /**
+     * 팀 제거 패킷을 생성합니다.
+     *
+     * @param teamName 제거할 팀의 이름
+     * @return this
+     */
+    @NotNull
+    SetPlayerTeamPacket createTeamRemovePacket(@NotNull String teamName);
+
+
+    /*
+        JOIN OR LEAVE
+     */
+
+    /**
+     * 팀 가입 또는 탈퇴 패킷을 생성합니다.
+     *
+     * @param team 가입 또는 탈퇴할 팀
+     * @param players 가입 또는 탈퇴할 플레이어의 목록
+     * @param join 만약 {@code true}라면 가입, 아니라면 탈퇴
+     * @return this
+     */
+    @NotNull
+    SetPlayerTeamPacket createTeamJoinOrLeavePacket(@NotNull Team team, @NotNull Collection<String> players, boolean join);
+
+    /**
+     * 팀 가입 또는 탈퇴 패킷을 생성합니다.
+     *
+     * @param teamName 가입 또는 탈퇴할 팀의 이름
+     * @param players 가입 또는 탈퇴할 플레이어의 목록
+     * @param join 만약 {@code true}라면 가입, 아니라면 탈퇴
+     * @return this
+     */
+    @NotNull
+    SetPlayerTeamPacket createTeamJoinOrLeavePacket(@NotNull String teamName, @NotNull Collection<String> players, boolean join);
+}
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index 7c5d6c2b52c051b89bca9c120ec896395cda2b2f..b58efc34b9dd832a8f32ea0e034e04c5fa848657 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -2413,6 +2413,20 @@ public final class Bukkit {
     }
     // Paper end
 
+    // Daydream start - Add Packet API
+    /**
+     * Create packet instance.
+     *
+     * @param packet packet type
+     * @return packet instance
+     * @param <T> Packet Type
+     */
+    @NotNull
+    public static <T extends moe.caramel.daydream.network.Packet> T createPacket(@NotNull Class<T> packet) {
+        return server.createPacket(packet);
+    }
+    // Daydream end - Add Packet API
+
     @NotNull
     public static Server.Spigot spigot() {
         return server.spigot();
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 5d9a27a55e95dd84fe3d108a5b84242c40bd2b27..3664723563b96187c4218a4008a25ec2c3092684 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -2104,4 +2104,16 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      */
     @NotNull org.bukkit.potion.PotionBrewer getPotionBrewer();
     // Paper end
+
+    // Daydream start - Add Packet API
+    /**
+     * Create packet instance.
+     *
+     * @param packet packet type
+     * @return packet instance
+     * @param <T> Packet Type
+     */
+    @NotNull
+    <T extends moe.caramel.daydream.network.Packet> T createPacket(@NotNull Class<T> packet);
+    // Daydream end - Add Packet API
 }
diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
index bd35cb298972ec1bc586ba25d155ee24c5b27327..676a1615bd61787691d4d900c44fe02165a2a0f8 100644
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -1608,6 +1608,17 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
     public Entity getEntity(@NotNull java.util.UUID uuid);
     // Paper end
 
+    // Daydream start - Add Packet API (getEntity by ID API)
+    /**
+     * Gets an entity in this world by its ID
+     *
+     * @param id the ID of the entity
+     * @return the entity with the given ID, or null if it isn't found
+     */
+    @Nullable
+    public Entity getEntity(int id);
+    // Daydream end
+
     /**
      * Returns a list of entities within a bounding box centered around a
      * Location.
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index 8bc6876c82935988436597161fa0ec94c032174b..8cc343f8f549d1a07a5ea775b854fb89db6f369d 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -457,6 +457,19 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
     @NotNull
     public UUID getUniqueId();
 
+    // Daydream start - Add Packet API
+    /**
+     * Gets the metadata of the entity.
+     *
+     * @param index metadata index
+     * @return get or null
+     * @see <a href="https://wiki.vg/Entity_metadata">here</a>
+     */
+    @Nullable
+    @org.jetbrains.annotations.ApiStatus.Experimental
+    public Object getMetadata(int index);
+    // Daydream end
+
     /**
      * Gets the amount of ticks this entity has lived for.
      * <p>
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index dc75f005ae838621a3ace9294719e25ef949087c..6fd7587ea71af8188e5819348ee3133c8e813185 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -661,6 +661,22 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param buf byte buf object
      */
     public void sendCustomPayload(@NotNull org.bukkit.NamespacedKey channel, @NotNull moe.caramel.daydream.network.MojangByteBuf buf);
+
+    /**
+     * Send raw packet to this player
+     *
+     * @param packet The packet instance
+     * @deprecated use {@link Player#sendPacket(moe.caramel.daydream.network.Packet)}
+     */
+    @Deprecated
+    public void sendRawPacket(@NotNull Object packet);
+
+    /**
+     * Send packet to this player
+     *
+     * @param packet The packet instance
+     */
+    public void sendPacket(@NotNull moe.caramel.daydream.network.Packet packet);
     // Daydream end
 
     // Paper start
