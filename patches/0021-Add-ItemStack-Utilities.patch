From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Wed, 5 Apr 2023 00:53:49 +0900
Subject: [PATCH] Add ItemStack Utilities


diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
index d9dc45353d3efa7a3479a24a816dcbe394410dc7..34bec39e4a6baa773d9df27236bf32aab33e80ea 100644
--- a/src/main/java/org/bukkit/UnsafeValues.java
+++ b/src/main/java/org/bukkit/UnsafeValues.java
@@ -302,4 +302,18 @@ public interface UnsafeValues {
     @NotNull java.util.List<net.kyori.adventure.text.Component> computeTooltipLines(@NotNull ItemStack itemStack, @NotNull io.papermc.paper.inventory.tooltip.TooltipContext tooltipContext, @Nullable org.bukkit.entity.Player player); // Paper - expose itemstack tooltip lines
 
     @NotNull moe.caramel.daydream.world.DamageMata getDamageMeta(@NotNull Object damageSource); // Daydream - Add more API for EntityDamageEvent
+
+    // Daydream start - Add ItemStack Utilities
+    /**
+     * Create a new ItemStack
+     * (for Paper Compatibility)
+     *
+     * @param material the material
+     * @param count item count
+     * @return ItemStack
+     * @see <a href=https://github.com/PaperMC/Paper/pull/8711>here</a>
+     */
+    @org.jetbrains.annotations.NotNull
+    ItemStack newItem(@org.jetbrains.annotations.NotNull org.bukkit.Material material, int count);
+    // Daydream end - Add ItemStack Utilities
 }
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index 245a730a54c4b241a9a67eccceefafd2763bd238..e55f7c30a3426cdf412bbdac7ec9ed3f3ea3f23d 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -34,6 +34,99 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
     @Utility
     protected ItemStack() {}
 
+    // Daydream start - Add ItemStack Utilities
+    /**
+     * Defaults stack size to 1, with no extra data.
+     * <p>
+     * <b>IMPORTANT: An <i>Item</i>Stack is only designed to contain
+     * <i>items</i>. Do not use this class to encapsulate Materials for which
+     * {@link Material#isItem()} returns false.</b>
+     *
+     * @param type item material
+     */
+    @NotNull
+    public static ItemStack create(final @NotNull Material type) {
+        return Bukkit.getUnsafe().newItem(type, 1);
+    }
+
+    /**
+     * Create Item stack.
+     *
+     * @param type item material
+     * @param consumer the meta consumer
+     * @return the item stack
+     */
+    @NotNull
+    public static ItemStack create(final @NotNull Material type, final @NotNull java.util.function.Consumer<? super ItemMeta> consumer) {
+        final ItemStack item = Bukkit.getUnsafe().newItem(type, 1);
+        item.editMeta(consumer);
+        return item;
+    }
+
+    /**
+     * Create Item stack.
+     *
+     * @param type item material
+     * @param metaClass the type of meta to edit
+     * @param consumer the meta consumer
+     * @param <M> the meta type
+     * @return the item stack
+     */
+    @NotNull
+    public static <M extends ItemMeta> ItemStack create(final @NotNull Material type, final @NotNull Class<M> metaClass, final @NotNull java.util.function.Consumer<@NotNull ? super M> consumer) {
+        final ItemStack item = Bukkit.getUnsafe().newItem(type, 1);
+        item.editMeta(metaClass, consumer);
+        return item;
+    }
+
+    /**
+     * An item stack with no extra data.
+     * <p>
+     * <b>IMPORTANT: An <i>Item</i>Stack is only designed to contain
+     * <i>items</i>. Do not use this class to encapsulate Materials for which
+     * {@link Material#isItem()} returns false.</b>
+     *
+     * @param type item material
+     * @param amount stack size
+     */
+    @NotNull
+    public static ItemStack create(final @NotNull Material type, final int amount) {
+        return Bukkit.getUnsafe().newItem(type, amount);
+    }
+
+    /**
+     * Create Item stack.
+     *
+     * @param type item material
+     * @param amount stack size
+     * @param consumer the meta consumer
+     * @return the item stack
+     */
+    @NotNull
+    public static ItemStack create(final @NotNull Material type, final int amount, final @NotNull java.util.function.Consumer<? super ItemMeta> consumer) {
+        final ItemStack item = Bukkit.getUnsafe().newItem(type, amount);
+        item.editMeta(consumer);
+        return item;
+    }
+
+    /**
+     * Create Item stack.
+     *
+     * @param type item material
+     * @param amount stack size
+     * @param metaClass the type of meta to edit
+     * @param consumer the meta consumer
+     * @param <M> the meta type
+     * @return the item stack
+     */
+    @NotNull
+    public static <M extends ItemMeta> ItemStack create(final @NotNull Material type, final int amount, final @NotNull Class<M> metaClass, final @NotNull java.util.function.Consumer<@NotNull ? super M> consumer) {
+        final ItemStack item = Bukkit.getUnsafe().newItem(type, amount);
+        item.editMeta(metaClass, consumer);
+        return item;
+    }
+    // Daydream end - Add ItemStack Utilities
+
     /**
      * Defaults stack size to 1, with no extra data.
      * <p>
diff --git a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
index 478b6d2acbc5788f72db81f387daa08df7837a5d..0c8641ad116cc56bcc831409603591d9ecbd2e70 100644
--- a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
@@ -344,6 +344,23 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
      */
     void setUnbreakable(boolean unbreakable);
 
+    // Daydream start - Add ItemStack Utilities
+    /**
+     * 아이템의 빛남 여부를 가져옵니다.
+     *
+     * @return 만약 {@code true}라면 아이템이 빛남
+     */
+    boolean isGlowing();
+
+    /**
+     * 아이템의 빛남 여부를 설정합니다. 일반적으로 허용하지 않는 방법을 통해 아이템에 글로우 효과를 추가하므로,
+     * 여러 문제가 발생할 수 있습니다. 이 기능을 사용하는 경우 모든 인첸트가 해제되며, 인첸트가 추가되는 경우 해제됩니다.
+     *
+     * @param glowing 만약 {@code true}라면 빛나게 설정
+     */
+    void setGlowing(boolean glowing);
+    // Daydream end - Add ItemStack Utilities
+
     /**
      * Checks for the existence of any AttributeModifiers.
      *
