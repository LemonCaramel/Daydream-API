From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Sat, 31 Dec 2022 22:37:08 +0900
Subject: [PATCH] Add Daydream Utilities


diff --git a/src/main/java/moe/caramel/daydream/util/Pair.java b/src/main/java/moe/caramel/daydream/util/Pair.java
new file mode 100644
index 0000000000000000000000000000000000000000..21f088bc76bd04ca3c60a45cc6102c1a255aa063
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/util/Pair.java
@@ -0,0 +1,78 @@
+package moe.caramel.daydream.util;
+
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import java.util.Objects;
+
+/**
+ * Pair 클래스
+ *
+ * @param <K> Key 값의 타입
+ * @param <V> Value 값의 타입
+ */
+public final class Pair<K, V> {
+
+    private final K key;
+    private final V value;
+
+    public Pair(@Nullable K key, @Nullable V value) {
+        this.key = key;
+        this.value = value;
+    }
+
+    /**
+     * Pair를 생성합니다.
+     *
+     * @param key Key
+     * @param value Value
+     * @return Pair!
+     * @param <K> Key 값의 타입
+     * @param <V> Value 값의 타입
+     */
+    @NotNull
+    public static <K, V> Pair<K, V> of(@Nullable K key, @Nullable V value) {
+        return new Pair<>(key, value);
+    }
+
+    /**
+     * Key를 가져옵니다.
+     *
+     * @return key
+     */
+    @Nullable
+    public K key() {
+        return key;
+    }
+
+    /**
+     * Value를 가져옵니다.
+     *
+     * @return value
+     */
+    @Nullable
+    public V value() {
+        return value;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        final Pair<?, ?> pair = (Pair<?, ?>) o;
+        return Objects.equals(key, pair.key) &&
+               Objects.equals(value, pair.value);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(key, value);
+    }
+
+    @Override
+    public String toString() {
+        return "Pair{" +
+               "key=" + key +
+               ", value=" + value +
+               '}';
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/util/Triple.java b/src/main/java/moe/caramel/daydream/util/Triple.java
new file mode 100644
index 0000000000000000000000000000000000000000..8534633bad4360bc5c6c56df89510603ee1d5400
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/util/Triple.java
@@ -0,0 +1,95 @@
+package moe.caramel.daydream.util;
+
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import java.util.Objects;
+
+/**
+ * Triple 클래스
+ *
+ * @param <F> First 값의 타입
+ * @param <S> Second 값의 타입
+ * @param <T> Third 값의 타입
+ */
+public final class Triple<F, S, T> {
+
+    private final F first;
+    private final S second;
+    private final T third;
+
+    public Triple(@Nullable F first, @Nullable S second, @Nullable T third) {
+        this.first = first;
+        this.second = second;
+        this.third = third;
+    }
+
+    /**
+     * Triple을 생성합니다.
+     *
+     * @param first First
+     * @param second Second
+     * @param third Third
+     * @return Triple!
+     * @param <F> First 값의 타입
+     * @param <S> Second 값의 타입
+     * @param <T> Third 값의 타입
+     */
+    @NotNull
+    public static <F, S, T> Triple<F, S, T> of(@Nullable F first, @Nullable S second, @Nullable T third) {
+        return new Triple<>(first, second, third);
+    }
+
+    /**
+     * First 값을 가져옵니다.
+     *
+     * @return First
+     */
+    @Nullable
+    public F first() {
+        return first;
+    }
+
+    /**
+     * Second 값을 가져옵니다.
+     *
+     * @return Second
+     */
+    @Nullable
+    public S second() {
+        return second;
+    }
+
+    /**
+     * Third 값을 가져옵니다.
+     *
+     * @return Third
+     */
+    @Nullable
+    public T third() {
+        return third;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        final Triple<?, ?, ?> triple = (Triple<?, ?, ?>) o;
+        return Objects.equals(first, triple.first) &&
+               Objects.equals(second, triple.second) &&
+               Objects.equals(third, triple.third);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(first, second, third);
+    }
+
+    @Override
+    public String toString() {
+        return "Triple{" +
+               "first=" + first +
+               ", second=" + second +
+               ", third=" + third +
+               '}';
+    }
+}
