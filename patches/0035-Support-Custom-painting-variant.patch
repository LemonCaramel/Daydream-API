From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Mon, 12 Aug 2024 02:13:23 +0900
Subject: [PATCH] Support Custom painting variant


diff --git a/src/main/java/org/bukkit/Art.java b/src/main/java/org/bukkit/Art.java
index e57e34064262b90221b0621f1d13e9705e68421a..b22cb58609053c5c24120c7c6726002a0277a724 100644
--- a/src/main/java/org/bukkit/Art.java
+++ b/src/main/java/org/bukkit/Art.java
@@ -10,87 +10,73 @@ import org.jetbrains.annotations.Nullable;
 /**
  * Represents the art on a painting
  */
-public enum Art implements Keyed {
-    KEBAB(0, 1, 1),
-    AZTEC(1, 1, 1),
-    ALBAN(2, 1, 1),
-    AZTEC2(3, 1, 1),
-    BOMB(4, 1, 1),
-    PLANT(5, 1, 1),
-    WASTELAND(6, 1, 1),
-    POOL(7, 2, 1),
-    COURBET(8, 2, 1),
-    SEA(9, 2, 1),
-    SUNSET(10, 2, 1),
-    CREEBET(11, 2, 1),
-    WANDERER(12, 1, 2),
-    GRAHAM(13, 1, 2),
-    MATCH(14, 2, 2),
-    BUST(15, 2, 2),
-    STAGE(16, 2, 2),
-    VOID(17, 2, 2),
-    SKULL_AND_ROSES(18, 2, 2),
-    WITHER(19, 2, 2),
-    FIGHTERS(20, 4, 2),
-    POINTER(21, 4, 4),
-    PIGSCENE(22, 4, 4),
-    BURNING_SKULL(23, 4, 4),
-    SKELETON(24, 4, 3),
-    DONKEY_KONG(25, 4, 3),
-    EARTH(26, 2, 2),
-    WIND(27, 2, 2),
-    WATER(28, 2, 2),
-    FIRE(29, 2, 2),
-    BAROQUE(30, 2, 2),
-    HUMBLE(31, 2, 2),
-    MEDITATIVE(32, 1, 1),
-    PRAIRIE_RIDE(33, 1, 2),
-    UNPACKED(34, 4, 4),
-    BACKYARD(35, 3, 4),
-    BOUQUET(36, 3, 3),
-    CAVEBIRD(37, 3, 3),
-    CHANGING(38, 4, 2),
-    COTAN(39, 3, 3),
-    ENDBOSS(40, 3, 3),
-    FERN(41, 3, 3),
-    FINDING(42, 4, 2),
-    LOWMIST(43, 4, 2),
-    ORB(44, 4, 4),
-    OWLEMONS(45, 3, 3),
-    PASSAGE(46, 4, 2),
-    POND(47, 3, 4),
-    SUNFLOWERS(48, 3, 3),
-    TIDES(49, 3, 3);
-
-    private final int id, width, height;
-    private final NamespacedKey key;
-    private static final HashMap<String, Art> BY_NAME = Maps.newHashMap();
-    private static final HashMap<Integer, Art> BY_ID = Maps.newHashMap();
-
-    private Art(int id, int width, int height) {
-        this.id = id;
-        this.width = width;
-        this.height = height;
-        this.key = NamespacedKey.minecraft(name().toLowerCase(Locale.ROOT));
-    }
+// Daydream start - Support Custom painting variant
+public interface Art extends Keyed, org.bukkit.util.OldEnum<Art> {
+    Art KEBAB = getType("kebab");
+    Art AZTEC = getType("aztec");
+    Art ALBAN = getType("alban");
+    Art AZTEC2 = getType("aztec2");
+    Art BOMB = getType("bomb");
+    Art PLANT = getType("plant");
+    Art WASTELAND = getType("wasteland");
+    Art POOL = getType("pool");
+    Art COURBET = getType("courbet");
+    Art SEA = getType("sea");
+    Art SUNSET = getType("sunset");
+    Art CREEBET = getType("creebet");
+    Art WANDERER = getType("wanderer");
+    Art GRAHAM = getType("graham");
+    Art MATCH = getType("match");
+    Art BUST = getType("bust");
+    Art STAGE = getType("stage");
+    Art VOID = getType("void");
+    Art SKULL_AND_ROSES = getType("skull_and_roses");
+    Art WITHER = getType("wither");
+    Art FIGHTERS = getType("fighters");
+    Art POINTER = getType("pointer");
+    Art PIGSCENE = getType("pigscene");
+    Art BURNING_SKULL = getType("burning_skull");
+    Art SKELETON = getType("skeleton");
+    Art DONKEY_KONG = getType("donkey_kong");
+    Art EARTH = getType("earth");
+    Art WIND = getType("wind");
+    Art WATER = getType("water");
+    Art FIRE = getType("fire");
+    Art BAROQUE = getType("baroque");
+    Art HUMBLE = getType("humble");
+    Art MEDITATIVE = getType("meditative");
+    Art PRAIRIE_RIDE = getType("prairie_ride");
+    Art UNPACKED = getType("unpacked");
+    Art BACKYARD = getType("backyard");
+    Art BOUQUET = getType("bouquet");
+    Art CAVEBIRD = getType("cavebird");
+    Art CHANGING = getType("changing");
+    Art COTAN = getType("cotan");
+    Art ENDBOSS = getType("endboss");
+    Art FERN = getType("fern");
+    Art FINDING = getType("finding");
+    Art LOWMIST = getType("lowmist");
+    Art ORB = getType("orb");
+    Art OWLEMONS = getType("owlemons");
+    Art PASSAGE = getType("passage");
+    Art POND = getType("pond");
+    Art SUNFLOWERS = getType("sunflowers");
+    Art TIDES = getType("tides");
+    // Daydream end - Support Custom painting variant
 
     /**
      * Gets the width of the painting, in blocks
      *
      * @return The width of the painting, in blocks
      */
-    public int getBlockWidth() {
-        return width;
-    }
+    public int getBlockWidth(); // Daydream - Support Custom painting variant
 
     /**
      * Gets the height of the painting, in blocks
      *
      * @return The height of the painting, in blocks
      */
-    public int getBlockHeight() {
-        return height;
-    }
+    public int getBlockHeight(); // Daydream - Support Custom painting variant
 
     /**
      * Get the ID of this painting.
@@ -99,9 +85,7 @@ public enum Art implements Keyed {
      * @apiNote Internal Use Only
      */
     @org.jetbrains.annotations.ApiStatus.Internal // Paper
-    public int getId() {
-        return id;
-    }
+    public int getId(); // Daydream - Support Custom painting variant
 
     // Paper start - deprecate getKey
     /**
@@ -112,9 +96,7 @@ public enum Art implements Keyed {
     // Paper end - deprecate getKey
     @NotNull
     @Override
-    public NamespacedKey getKey() {
-        return key;
-    }
+    public NamespacedKey getKey(); // Daydream - Support Custom painting variant
 
     /**
      * Get a painting by its numeric ID
@@ -126,7 +108,14 @@ public enum Art implements Keyed {
     @org.jetbrains.annotations.ApiStatus.Internal // Paper
     @Nullable
     public static Art getById(int id) {
-        return BY_ID.get(id);
+        // Daydream start - Support Custom painting variant
+        for (final Art art : Registry.ART) {
+            if (art.getId() == id) {
+                return art;
+            }
+        }
+        return null;
+        // Daydream end - Support Custom painting variant
     }
 
     /**
@@ -141,13 +130,43 @@ public enum Art implements Keyed {
     public static Art getByName(@NotNull String name) {
         Preconditions.checkArgument(name != null, "Name cannot be null");
 
-        return BY_NAME.get(name.toLowerCase(Locale.ROOT));
+        // Daydream start - Support Custom painting variant
+        final NamespacedKey key = NamespacedKey.fromString(name.toLowerCase(Locale.ROOT));
+        Preconditions.checkNotNull(key, "Inconvertible name");
+        return Registry.ART.get(key);
+        // Daydream end - Support Custom painting variant
     }
 
-    static {
-        for (Art art : values()) {
-            BY_ID.put(art.id, art);
-            BY_NAME.put(art.toString().toLowerCase(Locale.ROOT), art);
-        }
+    // Daydream start - Support Custom painting variant
+    @NotNull
+    @org.jetbrains.annotations.ApiStatus.Internal
+    private static Art getType(@NotNull String name) {
+        final Art art = getByName(name);
+        Preconditions.checkNotNull(art, "No Painting Variant found for %s. This is a bug.", name);
+        return art;
+    }
+
+    /**
+     * @param name of the art.
+     * @return the pattern type with the given name.
+     * @deprecated only for backwards compatibility, use {@link Registry#get(NamespacedKey)} instead.
+     */
+    @NotNull
+    @Deprecated(since = "1.21")
+    public static Art valueOf(@NotNull String name) {
+        Art type = Registry.ART.get(NamespacedKey.fromString(name.toLowerCase(Locale.ROOT)));
+        Preconditions.checkArgument(type != null, "No art found with the name %s", name);
+        return type;
+    }
+
+    /**
+     * @return an array of all known arts.
+     * @deprecated use {@link Registry#iterator()}.
+     */
+    @NotNull
+    @Deprecated(since = "1.21")
+    public static Art[] values() {
+        return com.google.common.collect.Lists.newArrayList(Registry.ART).toArray(new Art[0]);
     }
+    // Daydream end - Support Custom painting variant
 }
diff --git a/src/main/java/org/bukkit/Registry.java b/src/main/java/org/bukkit/Registry.java
index b4ef3133fdd9d79a3381cf8f659ff561ab2b4fad..e4a415ffb70bae24da8a49fc0818a7fc3e7c19a8 100644
--- a/src/main/java/org/bukkit/Registry.java
+++ b/src/main/java/org/bukkit/Registry.java
@@ -87,7 +87,7 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
      *
      * @see Art
      */
-    Registry<Art> ART = new SimpleRegistry<>(Art.class);
+    Registry<Art> ART = Objects.requireNonNull(io.papermc.paper.registry.RegistryAccess.registryAccess().getRegistry(Art.class), "No registry present for Art. This is a bug."); // Daydream - Support Custom painting variant
     /**
      * Attribute.
      *
diff --git a/src/test/java/org/bukkit/ArtTest.java b/src/test/java/org/bukkit/ArtTest.java
index 102f4705f19174af138435a647cba261bb51ad36..e9c574216a05154f666459000088507b4f7e904a 100644
--- a/src/test/java/org/bukkit/ArtTest.java
+++ b/src/test/java/org/bukkit/ArtTest.java
@@ -5,6 +5,7 @@ import static org.hamcrest.Matchers.*;
 import static org.junit.jupiter.api.Assertions.*;
 import org.junit.jupiter.api.Test;
 
+@org.junit.jupiter.api.Disabled // Daydream - Support Custom painting variant
 public class ArtTest {
 
     @Test
