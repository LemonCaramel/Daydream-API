From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Fri, 19 May 2023 20:56:45 +0900
Subject: [PATCH] Add more Explosion API


diff --git a/src/main/java/moe/caramel/daydream/world/DamageMata.java b/src/main/java/moe/caramel/daydream/world/DamageMata.java
index aca7b9e9076a6c48cf3f27f42f841cd076dca587..b7995e0ea84dbe9c4a517ebcf5ccdcd99ac67fc3 100644
--- a/src/main/java/moe/caramel/daydream/world/DamageMata.java
+++ b/src/main/java/moe/caramel/daydream/world/DamageMata.java
@@ -241,4 +241,14 @@ public interface DamageMata {
      * @param knockback 대미지 처리 이후 받게 될 넉백
      */
     void setOverrideKnockback(final @Nullable Vector knockback);
+
+    // ==============================================
+
+    /**
+     * 폭발 래퍼를 가져옵니다.
+     *
+     * @return 폭발 래퍼
+     */
+    @Nullable
+    Explosion getExplosion();
 }
diff --git a/src/main/java/moe/caramel/daydream/world/Explosion.java b/src/main/java/moe/caramel/daydream/world/Explosion.java
new file mode 100644
index 0000000000000000000000000000000000000000..394159310ec31777c5c423f94405d9ec3721e95a
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/world/Explosion.java
@@ -0,0 +1,122 @@
+package moe.caramel.daydream.world;
+
+import org.bukkit.World;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
+import java.util.Map;
+
+/**
+ * 폭발 래퍼
+ */
+public interface Explosion {
+
+    /**
+     * 폭발이 발생한 월드를 가져옵니다.
+     *
+     * @return 폭발이 발생한 월드
+     */
+    @NotNull
+    World getWorld();
+
+    /**
+     * 폭발 시 방화 여부를 가져옵니다.
+     *
+     * @return 방화 여부
+     */
+    boolean isFire();
+
+    /**
+     * 폭발 발생 X 좌표를 가져옵니다.
+     *
+     * @return X 좌표
+     */
+    double getX();
+
+    /**
+     * 폭발 발생 Y 좌표를 가져옵니다.
+     *
+     * @return Y 좌표
+     */
+    double getY();
+
+    /**
+     * 폭발 발생 Z 좌표를 가져옵니다.
+     *
+     * @return Z 좌표
+     */
+    double getZ();
+
+    /**
+     * 폭발 범위를 가져옵니다.
+     *
+     * @return 폭발 범위
+     */
+    float getRadius();
+
+    /**
+     * 이 폭발에 블록이 영향받는지를 가져옵니다.
+     *
+     * @return 블록이 영향받는지
+     */
+    boolean interactsWithBlocks();
+
+    /**
+     * 이 폭발의 넉백 제거 활성화 여부를 설정합니다.
+     *
+     * @param mark 넉백 제거가 활성화 여부
+     */
+    void markNoKnockback(boolean mark);
+
+    /**
+     * 이 폭발에 넉백 제거가 활성화 되어있는지 가져옵니다.
+     *
+     * @return 넉백 제거가 활성화 여부
+     */
+    boolean markedNoKnockback();
+
+    /**
+     * 이 폭발에 영향을 받는 플레이어 목록을 가져옵니다.
+     *
+     * @return 플레이어 목록 및 벡터
+     */
+    @NotNull
+    Map<HumanEntity, Vector> getHitPlayers();
+
+    /**
+     * 이 폭발에 영향을 받는 플레이어 목록을 설정합니다.
+     *
+     * @param map 플레이어 목록 및 벡터
+     */
+    void setHitPlayers(@NotNull Map<HumanEntity, Vector> map);
+
+    /**
+     * 이 폭발에 영향을 받는 플레이어 목록을 비웁니다.
+     */
+    void clearHitPlayers();
+
+    /**
+     * 폭발의 메타데이터를 가져옵니다.
+     *
+     * @return 메타데이터
+     */
+    @NotNull
+    Map<String, Object> getMetadata();
+
+    /**
+     * 폭발을 시작합니다.
+     */
+    void explode();
+
+    /**
+     * 폭발을 마무리합니다.
+     */
+    void finalizeExplosion();
+
+    /**
+     * 폭발이 취소되었는지 여부를 가져옵니다.
+     *
+     * @return 폭발 취소의 여부
+     */
+    boolean wasCancelled();
+}
diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
index 672c4624cf7f6357a4ec9592ddfa8b029bc3ca9b..78dc018ce1fdd31443968a09e24062f7d23a55a6 100644
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -2159,6 +2159,182 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      */
     public boolean createExplosion(double x, double y, double z, float power, boolean setFire, boolean breakBlocks, @Nullable Entity source);
 
+    // Daydream start - Add more Explosion API
+    /**
+     * Creates explosion at given coordinates with given power and optionally
+     * setting blocks on fire or breaking blocks.
+     *
+     * @param loc Location to blow up
+     * @param power The power of explosion, where 4F is TNT
+     * @param setFire Whether or not to set blocks on fire
+     * @param breakBlocks Whether or not to have blocks be destroyed
+     * @param source the source entity, used for tracking damage
+     * @return returns the Explosion wrapper. Explosion is not enabled,
+     * explode and finalize should be called.
+     */
+    @NotNull
+    default moe.caramel.daydream.world.Explosion explosion(@NotNull Location loc, float power, boolean setFire, boolean breakBlocks, @Nullable Entity source) {
+        return explosion(loc.getX(), loc.getY(), loc.getZ(), power, setFire, breakBlocks, source);
+    }
+
+    /**
+     * Creates explosion at given coordinates with given power and optionally
+     * setting blocks on fire or breaking blocks.
+     *
+     * @param x X coordinate
+     * @param y Y coordinate
+     * @param z Z coordinate
+     * @param power The power of explosion, where 4F is TNT
+     * @param setFire Whether or not to set blocks on fire
+     * @param breakBlocks Whether or not to have blocks be destroyed
+     * @param source the source entity, used for tracking damage
+     * @return returns the Explosion wrapper. Explosion is not enabled,
+     * explode and finalize should be called.
+     */
+    @NotNull
+    default moe.caramel.daydream.world.Explosion explosion(double x, double y, double z, float power, boolean setFire, boolean breakBlocks, @Nullable Entity source) {
+        return explosion(
+            x, y, z, power, setFire, (breakBlocks ? ExplosionAction.MOB : ExplosionAction.NONE),
+            Particle.EXPLOSION_LARGE, null, Particle.EXPLOSION_HUGE, null,
+            Sound.ENTITY_GENERIC_EXPLODE, source
+        );
+    }
+
+    /**
+     * Creates explosion at given coordinates with given power and optionally
+     * setting blocks on fire or breaking blocks.
+     *
+     * @param loc Location to blow up
+     * @param power The power of explosion, where 4F is TNT
+     * @param setFire Whether or not to set blocks on fire
+     * @param explosionAction Explosion action
+     * @param largeParticle Large particle
+     * @param largeData Large particle data
+     * @param smallParticle Small particle
+     * @param smallData Small particle data
+     * @param sound Explosion sound
+     * @param source the source entity, used for tracking damage
+     * @return returns the Explosion wrapper. Explosion is not enabled,
+     * explode and finalize should be called.
+     */
+    @NotNull
+    default  <T> moe.caramel.daydream.world.Explosion explosion(
+        @NotNull Location loc, float power, boolean setFire, @NotNull ExplosionAction explosionAction,
+        @NotNull Particle largeParticle, @Nullable T largeData,
+        @NotNull Particle smallParticle, @Nullable T smallData,
+        @NotNull String sound, @Nullable Entity source
+    ) {
+        return explosion(loc.getX(), loc.getY(), loc.getZ(), power, setFire, explosionAction, largeParticle, largeData, smallParticle, smallData, sound, source);
+    }
+
+    /**
+     * Creates explosion at given coordinates with given power and optionally
+     * setting blocks on fire or breaking blocks.
+     *
+     * @param loc Location to blow up
+     * @param power The power of explosion, where 4F is TNT
+     * @param setFire Whether or not to set blocks on fire
+     * @param explosionAction Explosion action
+     * @param largeParticle Large particle
+     * @param largeData Large particle data
+     * @param smallParticle Small particle
+     * @param smallData Small particle data
+     * @param sound Explosion sound
+     * @param source the source entity, used for tracking damage
+     * @return returns the Explosion wrapper. Explosion is not enabled,
+     * explode and finalize should be called.
+     */
+    @NotNull
+    default  <T> moe.caramel.daydream.world.Explosion explosion(
+        @NotNull Location loc, float power, boolean setFire, @NotNull ExplosionAction explosionAction,
+        @NotNull Particle largeParticle, @Nullable T largeData,
+        @NotNull Particle smallParticle, @Nullable T smallData,
+        @NotNull Sound sound, @Nullable Entity source
+    ) {
+        return explosion(loc.getX(), loc.getY(), loc.getZ(), power, setFire, explosionAction, largeParticle, largeData, smallParticle, smallData, sound, source);
+    }
+
+    /**
+     * Creates explosion at given coordinates with given power and optionally
+     * setting blocks on fire or breaking blocks.
+     *
+     * @param x X coordinate
+     * @param y Y coordinate
+     * @param z Z coordinate
+     * @param power The power of explosion, where 4F is TNT
+     * @param setFire Whether or not to set blocks on fire
+     * @param explosionAction Explosion action
+     * @param largeParticle Large particle
+     * @param largeData Large particle data
+     * @param smallParticle Small particle
+     * @param smallData Small particle data
+     * @param sound Explosion sound
+     * @param source the source entity, used for tracking damage
+     * @return returns the Explosion wrapper. Explosion is not enabled,
+     * explode and finalize should be called.
+     */
+    @NotNull
+    public <T> moe.caramel.daydream.world.Explosion explosion(
+        double x, double y, double z, float power, boolean setFire, @NotNull ExplosionAction explosionAction,
+        @NotNull Particle largeParticle, @Nullable T largeData,
+        @NotNull Particle smallParticle, @Nullable T smallData,
+        @NotNull String sound, @Nullable Entity source
+    );
+
+    /**
+     * Creates explosion at given coordinates with given power and optionally
+     * setting blocks on fire or breaking blocks.
+     *
+     * @param x X coordinate
+     * @param y Y coordinate
+     * @param z Z coordinate
+     * @param power The power of explosion, where 4F is TNT
+     * @param setFire Whether or not to set blocks on fire
+     * @param explosionAction Explosion action
+     * @param largeParticle Large particle
+     * @param largeData Large particle data
+     * @param smallParticle Small particle
+     * @param smallData Small particle data
+     * @param sound Explosion sound
+     * @param source the source entity, used for tracking damage
+     * @return returns the Explosion wrapper. Explosion is not enabled,
+     * explode and finalize should be called.
+     */
+    @NotNull
+    public <T> moe.caramel.daydream.world.Explosion explosion(
+        double x, double y, double z, float power, boolean setFire, @NotNull ExplosionAction explosionAction,
+        @NotNull Particle largeParticle, @Nullable T largeData,
+        @NotNull Particle smallParticle, @Nullable T smallData,
+        @NotNull Sound sound, @Nullable Entity source
+    );
+
+    /**
+     * 폭발 상호작용 목록
+     */
+    public enum ExplosionAction {
+        /**
+         * 아무 작업도 수행하지 않음
+         */
+        NONE,
+        /**
+         * 블록을 파괴함
+         */
+        BLOCK,
+        /**
+         * 몹이 파괴한 것으로 취급
+         */
+        MOB,
+        /**
+         * TNT 폭발로 취급
+         */
+        TNT,
+        /**
+         * 현재 {@link org.bukkit.entity.WindCharge}에서 취급
+         */
+        BLOW
+    }
+    // Daydream end - Add more Explosion API
+
     /**
      * Creates explosion at given coordinates with given power
      *
diff --git a/src/main/java/org/bukkit/entity/TNTPrimed.java b/src/main/java/org/bukkit/entity/TNTPrimed.java
index 87e717c9ea61b0cbf536bc62fa829ddcfae5ad8c..517de12da7faf7394f56382fd26dd3766e9e3b8e 100644
--- a/src/main/java/org/bukkit/entity/TNTPrimed.java
+++ b/src/main/java/org/bukkit/entity/TNTPrimed.java
@@ -86,4 +86,16 @@ public interface TNTPrimed extends Explosive {
     @org.jetbrains.annotations.NotNull
     org.bukkit.block.data.BlockData getBlockData();
     // Paper end
+
+    // Daydream start - Add more Explosion API
+    /**
+     * {@link TNTPrimed}의 폭발 래퍼를 가져옵니다.
+     *
+     * @return 폭발이 완료되지 않은 상태로 반환되며,
+     * {@link org.bukkit.event.entity.ExplosionPrimeEvent}가
+     * 취소된 경우 {@code null}을 반환합니다.
+     */
+    @Nullable
+    moe.caramel.daydream.world.Explosion getExplosion();
+    // Daydream end - Add more Explosion API
 }
diff --git a/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java b/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java
index 7dcbb75170296c1dd1d784a032bf369602328b29..e6eb7694d572fb6409c3ab88194ff6ba4347d319 100644
--- a/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java
@@ -30,11 +30,29 @@ public class BlockExplodeEvent extends BlockEvent implements Cancellable {
     @org.jetbrains.annotations.ApiStatus.Internal
     public BlockExplodeEvent(@NotNull final Block what, @NotNull final List<Block> blocks, final float yield, @org.jetbrains.annotations.Nullable org.bukkit.block.BlockState explodedBlockState) {
         // Paper end
+        // Daydream start - Add more Explosion API
+        this(what, blocks, yield, explodedBlockState, null);
+    }
+    private final moe.caramel.daydream.world.Explosion explosion;
+
+    /**
+     * 폭발 래퍼를 가져옵니다.
+     *
+     * @return 폭발 래퍼
+     */
+    @NotNull
+    public moe.caramel.daydream.world.Explosion getExplosion() {
+        return explosion;
+    }
+
+    public BlockExplodeEvent(@NotNull final Block what, @NotNull final List<Block> blocks, final float yield, @org.jetbrains.annotations.Nullable org.bukkit.block.BlockState explodedBlockState, @NotNull moe.caramel.daydream.world.Explosion explosion) {
+        // Daydream end - Add more Explosion API
         super(what);
         this.blocks = blocks;
         this.yield = yield;
         this.cancel = false;
         this.explodedBlockState = explodedBlockState; // Paper
+        this.explosion = explosion; // Daydream - Add more Explosion API
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
index 0defdf1cc8722e8aef497fa5bb00138d836498e6..d75b85f2f38b70f116774ab4bf08e6f5fb8f91d8 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
@@ -58,6 +58,16 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
     public moe.caramel.daydream.world.DamageMata getDamageMeta() {
         return damageSource.getDamageMeta();
     }
+
+    /**
+     * 폭발 래퍼를 가져옵니다.
+     *
+     * @return 폭발 래퍼
+     */
+    @org.jetbrains.annotations.Nullable
+    public moe.caramel.daydream.world.Explosion getExplosion() {
+        return getDamageMeta().getExplosion();
+    }
     // Daydream end - Add more API for EntityDamageEvent
 
     @Override
diff --git a/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java b/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java
index 099efafa14c10910e4ed04abb1823f0c1a96b6a6..66ca6572c4b4312d03308c45793bcc907b1b7b0f 100644
--- a/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java
@@ -21,11 +21,29 @@ public class EntityExplodeEvent extends EntityEvent implements Cancellable {
     private float yield;
 
     public EntityExplodeEvent(@NotNull final Entity what, @NotNull final Location location, @NotNull final List<Block> blocks, final float yield) {
+        // Daydream start - Add more Explosion API
+        this(what, location, blocks, yield, null);
+    }
+    private final moe.caramel.daydream.world.Explosion explosion;
+
+    /**
+     * 폭발 래퍼를 가져옵니다.
+     *
+     * @return 폭발 래퍼
+     */
+    @NotNull
+    public moe.caramel.daydream.world.Explosion getExplosion() {
+        return explosion;
+    }
+
+    public EntityExplodeEvent(@NotNull final Entity what, @NotNull final Location location, @NotNull final List<Block> blocks, final float yield, @NotNull moe.caramel.daydream.world.Explosion explosion) {
+        // Daydream end - Add more Explosion API
         super(what);
         this.location = location;
         this.blocks = blocks;
         this.yield = yield;
         this.cancel = false;
+        this.explosion = explosion; // Daydream - Add more Explosion API
     }
 
     @Override
