From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Sat, 16 Jul 2022 00:04:33 +0900
Subject: [PATCH] Add Packet API


diff --git a/src/main/java/moe/caramel/daydream/event/packet/PacketType.java b/src/main/java/moe/caramel/daydream/event/packet/PacketType.java
new file mode 100644
index 0000000000000000000000000000000000000000..360675e7abc45240925a983d21387bd4c8c0f114
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/packet/PacketType.java
@@ -0,0 +1,22 @@
+package moe.caramel.daydream.event.packet;
+
+/**
+ * Packet Lists
+ */
+public interface PacketType {
+
+    /**
+     * [Client -> Server] Packets
+     */
+    enum Client {
+        PONG,
+        PLAYER_LOADED
+    }
+
+    /**
+     * [Server -> Client] Packets
+     */
+    enum Server {
+        ENTITY_EQUIPMENT
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/event/packet/ReceivePacketEvent.java b/src/main/java/moe/caramel/daydream/event/packet/ReceivePacketEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..a1f6ce66d317fc190021aa0b7fcb8c1b3953e9d6
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/packet/ReceivePacketEvent.java
@@ -0,0 +1,45 @@
+package moe.caramel.daydream.event.packet;
+
+import moe.caramel.daydream.event.packet.PacketType.Client;
+import org.bukkit.entity.Player;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
+
+/**
+ * 서버가 클라이언트로부터 패킷을 전달받았을 때 호출됩니다.
+ */
+@NullMarked
+public class ReceivePacketEvent extends PlayerEvent {
+
+    private final Client packetType;
+
+    @ApiStatus.Internal
+    public ReceivePacketEvent(final Player who, final Client packetType, final boolean async) {
+        super(who, async);
+        this.packetType = packetType;
+    }
+
+    /**
+     * 클라이언트가 보낸 패킷의 종류를 가져옵니다.
+     *
+     * @return 클라이언트가 보낸 패킷의 종류
+     */
+    public Client getPacketType() {
+        return packetType;
+    }
+
+    //<editor-fold desc="Bukkit Event Handler (Internal)" defaultstate="collapsed">
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+    //</editor-fold>
+}
diff --git a/src/main/java/moe/caramel/daydream/event/packet/ReceivePlayerLoadedPacketEvent.java b/src/main/java/moe/caramel/daydream/event/packet/ReceivePlayerLoadedPacketEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..b783aafc2006adc054cf2c6126bcd3f2eac8852c
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/packet/ReceivePlayerLoadedPacketEvent.java
@@ -0,0 +1,22 @@
+package moe.caramel.daydream.event.packet;
+
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
+
+/**
+ * 서버가 클라이언트로부터 {@link PacketType.Client#PLAYER_LOADED} 패킷을 전달받았을 때 호출됩니다.
+ */
+@NullMarked
+public final class ReceivePlayerLoadedPacketEvent extends ReceivePacketEvent {
+
+    @ApiStatus.Internal
+    public ReceivePlayerLoadedPacketEvent(final Player who) {
+        super(who, PacketType.Client.PLAYER_LOADED, false);
+    }
+
+    @Override
+    public String toString() {
+        return "ReceivePlayerLoadedPacketEvent";
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/event/packet/ReceivePongPacketEvent.java b/src/main/java/moe/caramel/daydream/event/packet/ReceivePongPacketEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..d6b15abc74fbc9fd1c2470dabbe6f730ff3fc9d2
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/packet/ReceivePongPacketEvent.java
@@ -0,0 +1,36 @@
+package moe.caramel.daydream.event.packet;
+
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
+
+/**
+ * 서버가 클라이언트로부터 {@link PacketType.Client#PONG} 패킷을 전달받았을 때 호출됩니다.
+ */
+@NullMarked
+public final class ReceivePongPacketEvent extends ReceivePacketEvent {
+
+    private final int id;
+
+    @ApiStatus.Internal
+    public ReceivePongPacketEvent(final Player who, final int id) {
+        super(who, PacketType.Client.PONG, true);
+        this.id = id;
+    }
+
+    /**
+     * Gets id.
+     *
+     * @return id
+     */
+    public int getId() {
+        return id;
+    }
+
+    @Override
+    public String toString() {
+        return "ReceivePongPacketEvent{" +
+               "id=" + id +
+               '}';
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/event/packet/SendEntityEquipmentEvent.java b/src/main/java/moe/caramel/daydream/event/packet/SendEntityEquipmentEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..95148773e843ab6f1d95d988f1b0fbcb242e997a
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/packet/SendEntityEquipmentEvent.java
@@ -0,0 +1,95 @@
+package moe.caramel.daydream.event.packet;
+
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.inventory.EquipmentSlot;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
+import java.util.Map;
+
+/**
+ * 서버가 클라이언트에게 {@link PacketType.Server#ENTITY_EQUIPMENT} 패킷을 전송할 때 호출됩니다.
+ */
+@NullMarked
+public final class SendEntityEquipmentEvent extends SendPacketEvent implements Cancellable {
+
+    private final Entity target;
+    private final Reason reason;
+    private final Map<EquipmentSlot, ItemStack> data;
+    private boolean cancelled;
+
+    @ApiStatus.Internal
+    public SendEntityEquipmentEvent(final Player player, final Entity target, final Reason reason, final Map<EquipmentSlot, ItemStack> data) {
+        super(player, PacketType.Server.ENTITY_EQUIPMENT, false);
+        this.reason = reason;
+        this.target = target;
+        this.data = data;
+    }
+
+    /**
+     * 이 패킷의 대상 엔티티를 가져옵니다.
+     *
+     * @return 패킷의 대상 엔티티
+     */
+    public Entity getTarget() {
+        return target;
+    }
+
+    /**
+     * 이벤트 호출 사유를 가져옵니다.
+     *
+     * @return 이벤트 호출 사유
+     */
+    public Reason getReason() {
+        return reason;
+    }
+
+    /**
+     * 전송 예정인 장비 목록을 반환하며, 목록을 수정할 수 있습니다.
+     *
+     * @return 장비 목록
+     */
+    public Map<EquipmentSlot, ItemStack> getData() {
+        return data;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(final boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    /**
+     * 이벤트 호출 사유
+     */
+    public enum Reason {
+        /**
+         * 대상 엔티티를 추적하기 시작했을 때
+         */
+        PAIRING,
+        /**
+         * 엔티티가 장비를 업데이트했을 때
+         */
+        UPDATE_EQUIPMENT
+    }
+
+    //<editor-fold desc="Bukkit Event Handler (Internal)" defaultstate="collapsed">
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+    //</editor-fold>
+}
diff --git a/src/main/java/moe/caramel/daydream/event/packet/SendPacketEvent.java b/src/main/java/moe/caramel/daydream/event/packet/SendPacketEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..b26665ab19e09a9ea8f1e3d52cd6a55526bf6fa4
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/packet/SendPacketEvent.java
@@ -0,0 +1,45 @@
+package moe.caramel.daydream.event.packet;
+
+import moe.caramel.daydream.event.packet.PacketType.Server;
+import org.bukkit.entity.Player;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
+
+/**
+ * 서버가 클라이언트에게 패킷을 전송할 때 호출됩니다.
+ */
+@NullMarked
+public class SendPacketEvent extends PlayerEvent {
+
+    private final Server packetType;
+
+    @ApiStatus.Internal
+    public SendPacketEvent(final Player who, final Server packetType, final boolean async) {
+        super(who, async);
+        this.packetType = packetType;
+    }
+
+    /**
+     * 서버가 보낼 패킷의 종류를 가져옵니다.
+     *
+     * @return 서버가 보낼 패킷의 종류
+     */
+    public Server getPacketType() {
+        return packetType;
+    }
+
+    //<editor-fold desc="Bukkit Event Handler (Internal)" defaultstate="collapsed">
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+    //</editor-fold>
+}
diff --git a/src/main/java/moe/caramel/daydream/packet/BundlePacket.java b/src/main/java/moe/caramel/daydream/packet/BundlePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..939da87d9d7b686acb41ec2a9cc5d67f5c4936b4
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/packet/BundlePacket.java
@@ -0,0 +1,26 @@
+package moe.caramel.daydream.packet;
+
+import org.jspecify.annotations.NullMarked;
+import java.util.List;
+
+@NullMarked
+public interface BundlePacket extends Packet {
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param packets 동시에 처리할 패킷 목록
+     * @return this
+     */
+    default BundlePacket create(final Packet... packets) {
+        return create(List.of(packets));
+    }
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param packets 동시에 처리할 패킷 목록
+     * @return this
+     */
+    BundlePacket create(final List<Packet> packets);
+}
diff --git a/src/main/java/moe/caramel/daydream/packet/ContainerSetSlotPacket.java b/src/main/java/moe/caramel/daydream/packet/ContainerSetSlotPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..bd1c05411028efb3d8d5308f58c3908e1fb80cb7
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/packet/ContainerSetSlotPacket.java
@@ -0,0 +1,19 @@
+package moe.caramel.daydream.packet;
+
+import org.bukkit.inventory.ItemStack;
+import org.jspecify.annotations.NullMarked;
+
+@NullMarked
+public interface ContainerSetSlotPacket extends Packet {
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param windowId 현재 업데이트 중인 창
+     * @param revision 상태 ID (플레이어가 아이템을 클릭했을 때 이 값을 돌려받습니다)
+     * @param slot 업데이트해야 하는 슬롯
+     * @param stack 아이템
+     * @return this
+     */
+    ContainerSetSlotPacket create(final int windowId, final int revision, final int slot, final ItemStack stack);
+}
diff --git a/src/main/java/moe/caramel/daydream/packet/GameEventPacket.java b/src/main/java/moe/caramel/daydream/packet/GameEventPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..fc8bd0bd5282c838cc8c602aea7844fc90027bf9
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/packet/GameEventPacket.java
@@ -0,0 +1,32 @@
+package moe.caramel.daydream.packet;
+
+import org.jspecify.annotations.NullMarked;
+
+@NullMarked
+public interface GameEventPacket extends Packet {
+
+    int NO_RESPAWN_BLOCK_AVAILABLE = 0;
+    int START_RAINING = 1;
+    int STOP_RAINING = 2;
+    int CHANGE_GAME_MODE = 3;
+    int WIN_GAME = 4;
+    int DEMO_EVENT = 5;
+    int ARROW_HIT_PLAYER = 6;
+    int RAIN_LEVEL_CHANGE = 7;
+    int THUNDER_LEVEL_CHANGE = 8;
+    int PUFFER_FISH_STING = 9;
+    int GUARDIAN_ELDER_EFFECT = 10;
+    int IMMEDIATE_RESPAWN = 11;
+    int LIMITED_CRAFTING = 12;
+    int LEVEL_CHUNKS_LOAD_START = 13;
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param event 게임 이벤트
+     * @param value 이벤트에 따라 값이 다릅니다.
+     *              <a href="http://wiki.vg/Protocol#Game_Event">여기</a>를 참고하세요.
+     * @return this
+     */
+    GameEventPacket create(final int event, final float value);
+}
diff --git a/src/main/java/moe/caramel/daydream/packet/Packet.java b/src/main/java/moe/caramel/daydream/packet/Packet.java
new file mode 100644
index 0000000000000000000000000000000000000000..efc58af1c71f425d7195544b86ac3947bb8b4fd6
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/packet/Packet.java
@@ -0,0 +1,27 @@
+package moe.caramel.daydream.packet;
+
+import org.jspecify.annotations.NullMarked;
+
+@NullMarked
+public interface Packet {
+
+    /**
+     * Packet API Version
+     */
+    int API_VERSION = 2;
+
+    /**
+     * 패킷을 가져옵니다.
+     *
+     * @return 패킷 인스턴스를 반환합니다.
+     * @throws RuntimeException 패킷 빌드가 불가능한 경우 던져집니다.
+     */
+    Object getPacket();
+
+    /**
+     * 패킷이 빌드 가능한지 확인합니다.
+     *
+     * @return 빌드가 가능하면 {@code true}를 반환합니다.
+     */
+    boolean canBuild();
+}
diff --git a/src/main/java/moe/caramel/daydream/packet/PingPacket.java b/src/main/java/moe/caramel/daydream/packet/PingPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..e107ede35337e27e84c3cbe1e09bbe06cc8e9792
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/packet/PingPacket.java
@@ -0,0 +1,15 @@
+package moe.caramel.daydream.packet;
+
+import org.jspecify.annotations.NullMarked;
+
+@NullMarked
+public interface PingPacket extends Packet {
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param id {@link moe.caramel.daydream.event.packet.PacketType.Client#PONG} 패킷으로 돌려받을 Id
+     * @return this
+     */
+    PingPacket create(final int id);
+}
diff --git a/src/main/java/moe/caramel/daydream/packet/PlayerInfoRemovePacket.java b/src/main/java/moe/caramel/daydream/packet/PlayerInfoRemovePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..78515358d7d62bf42e693f02323f16ebedc710a3
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/packet/PlayerInfoRemovePacket.java
@@ -0,0 +1,41 @@
+package moe.caramel.daydream.packet;
+
+import org.bukkit.entity.Player;
+import org.jspecify.annotations.NullMarked;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.UUID;
+
+@NullMarked
+public interface PlayerInfoRemovePacket extends Packet {
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param players 플레이어 목록
+     * @return this
+     */
+    default PlayerInfoRemovePacket create(final Player... players) {
+        final List<UUID> list = new ArrayList<>();
+        for (Player player : players) list.add(player.getUniqueId());
+        return create(list);
+    }
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param uuids 플레이어 목록
+     * @return this
+     */
+    default PlayerInfoRemovePacket create(final UUID... uuids) {
+        return create(List.of(uuids));
+    }
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param uuids 플레이어 목록
+     * @return this
+     */
+    PlayerInfoRemovePacket create(final List<UUID> uuids);
+}
diff --git a/src/main/java/moe/caramel/daydream/packet/PlayerInfoUpdatePacket.java b/src/main/java/moe/caramel/daydream/packet/PlayerInfoUpdatePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..22d7bbfd30beacaae491dfffbe3c2d8e9e79024c
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/packet/PlayerInfoUpdatePacket.java
@@ -0,0 +1,217 @@
+package moe.caramel.daydream.packet;
+
+import com.destroystokyo.paper.ClientOption;
+import com.mojang.authlib.GameProfile;
+import moe.caramel.daydream.player.ChatSession;
+import net.kyori.adventure.text.Component;
+import org.bukkit.GameMode;
+import org.bukkit.entity.Player;
+import org.jspecify.annotations.NullMarked;
+import org.jspecify.annotations.Nullable;
+import java.util.Collection;
+import java.util.EnumSet;
+import java.util.List;
+import java.util.UUID;
+
+@NullMarked
+public interface PlayerInfoUpdatePacket extends Packet {
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param actions 패킷이 수행할 작업의 목록
+     * @param players 플레이어 목록
+     * @return this
+     */
+    PlayerInfoUpdatePacket create(final EnumSet<Action> actions, final Player... players);
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param actions 패킷이 수행할 작업의 목록
+     * @param data 플레이어 데이터
+     * @return this
+     */
+    default PlayerInfoUpdatePacket create(final EnumSet<Action> actions, final PlayerData... data) {
+        return create(actions, List.of(data));
+    }
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param actions 패킷이 수행할 작업의 목록
+     * @param data 플레이어 데이터
+     * @return this
+     */
+    PlayerInfoUpdatePacket create(final EnumSet<Action> actions, final Collection<PlayerData> data);
+
+
+    /**
+     * 플레이어 데이터
+     *
+     * @param profileId 플레이어의 게임 프로파일 UUID (필수: 모두)
+     * @param profile 플레이어의 게임 프로파일 (필수: {@link Action#ADD_PLAYER})
+     * @param listed 탭 리스트 표시 여부 (필수: {@link Action#UPDATE_LISTED})
+     * @param latency 플레이어의 지연 시간 (필수: {@link Action#UPDATE_LATENCY})
+     * @param gameMode 플레이어의 게임 모드 (필수: {@link Action#UPDATE_GAME_MODE})
+     * @param playerListName 플레이어의 표시 이름 (필수: {@link Action#UPDATE_DISPLAY_NAME})
+     * @param showHat 플레이어 스킨의 모자 레이어 표시 여부 (필수: {@link Action#UPDATE_HAT})
+     * @param listOrder 플레이어 탭 리스트 순서 (필수: {@link Action#UPDATE_LIST_ORDER})
+     * @param chatSession 플레이어의 채팅 세션 (선택: {@link Action#INITIALIZE_CHAT})
+     */
+    record PlayerData(
+        UUID profileId, @Nullable GameProfile profile,
+        boolean listed, int latency, @Nullable GameMode gameMode,
+        @Nullable Component playerListName, boolean showHat,
+        int listOrder, @Nullable ChatSession chatSession
+    ) { }
+
+
+    /**
+     * for Add Player Action
+     *
+     * @param profileId 플레이어의 프로파일 UUID
+     * @param profile 플레이어의 게임 프로파일
+     * @param listed 탭 리스트 표시 여부
+     * @param latency 플레이어의 지연 시간
+     * @param gameMode 플레이어의 게임 모드
+     * @param playerListName 플레이어의 표시 이름 (nullable)
+     * @param showHat 플레이어 스킨의 모자 레이어 표시 여부 (필수: {@link Action#UPDATE_HAT})
+     * @param listOrder 플레이어의 탭 리스트 정렬 순서
+     * @param chatSession 플레이어의 채팅 세션 (nullable)
+     * @return 플레이어 데이터
+     */
+    static PlayerData addPlayer(
+        final UUID profileId, final GameProfile profile,
+        final boolean listed, final int latency, final GameMode gameMode,
+        final @Nullable Component playerListName, final boolean showHat,
+        final int listOrder, final @Nullable ChatSession chatSession
+    ) {
+        return new PlayerData(profileId, profile, listed, latency, gameMode, playerListName, showHat, listOrder, chatSession);
+    }
+
+    /**
+     * for Add Player Action
+     *
+     * @param player 대상 플레이어
+     * @return 플레이어 데이터
+     */
+    static PlayerData addPlayer(final Player player) {
+        return PlayerInfoUpdatePacket.addPlayer(
+            player.getUniqueId(),
+            player.getProfile(),
+            true,
+            player.getPing(),
+            player.getGameMode(),
+            player.playerListName(),
+            player.getClientOption(ClientOption.SKIN_PARTS).hasHatsEnabled(),
+            player.getPlayerListOrder(),
+            player.getChatSession()
+        );
+    }
+
+    /**
+     * for Update GameMode Action
+     *
+     * @param uuid 플레이어의 UUID
+     * @param gameMode 플레이어의 게임 모드
+     * @return 플레이어 데이터
+     */
+    static PlayerData updateGameMode(final UUID uuid, final GameMode gameMode) {
+        return new PlayerData(uuid, null, false, 0, gameMode, null, false, 0, null);
+    }
+
+    /**
+     * for Update Listed Action
+     *
+     * @param uuid 플레이어의 UUID
+     * @param listed 플레이어가 탭 리스트에 표시될지의 여부
+     * @return 플레이어 데이터
+     */
+    static PlayerData updateListed(final UUID uuid, final boolean listed) {
+        return new PlayerData(uuid, null, listed, 0, null, null, false, 0, null);
+    }
+
+    /**
+     * for Update Latency Action
+     *
+     * @param uuid 플레이어의 UUID
+     * @param latency 플레이어의 지연 시간
+     * @return 플레이어 데이터
+     */
+    static PlayerData updateLatency(final UUID uuid, final int latency) {
+        return new PlayerData(uuid, null, false, latency, null, null, false, 0, null);
+    }
+
+    /**
+     * for Update PlayerListName Action
+     *
+     * @param uuid 플레이어의 UUID
+     * @param playerListName 플레이어의 표시 이름 (nullable)
+     * @return 플레이어 데이터
+     */
+    static PlayerData updatePlayerListName(final UUID uuid, final @Nullable Component playerListName) {
+        return new PlayerData(uuid, null, false, 0, null, playerListName, false, 0, null);
+    }
+
+    /**
+     * for Update ListOrder Action
+     *
+     * @param uuid 플레이어의 UUID
+     * @param order 플레이어의 탭 리스트 정렬 위치
+     * @return 플레이어 데이터
+     */
+    static PlayerData updateListOrder(final UUID uuid, final int order) {
+        return new PlayerData(uuid, null, false, 0, null, null, false, order, null);
+    }
+
+    /**
+     * for Update Hat Action
+     *
+     * @param uuid 플레이어의 UUID
+     * @param show 플레이어 스킨의 모자 레이어 표시 여부
+     * @return 플레이어 데이터
+     */
+    static PlayerData updateShowHat(final UUID uuid, final boolean show) {
+        return new PlayerData(uuid, null, false, 0, null, null, show, 0, null);
+    }
+
+
+    /**
+     * Player Info Update 패킷 액션
+     */
+    enum Action {
+        /**
+         * 플레이어를 추가합니다.
+         */
+        ADD_PLAYER,
+        /**
+         * 채팅 세션을 설정합니다.
+         */
+        INITIALIZE_CHAT,
+        /**
+         * 플레이어의 게임 모드를 업데이트합니다.
+         */
+        UPDATE_GAME_MODE,
+        /**
+         * 플레이어를 탭 리스트에 포함할지 결정합니다.
+         */
+        UPDATE_LISTED,
+        /**
+         * 플레이어의 지연 시간을 업데이트합니다.
+         */
+        UPDATE_LATENCY,
+        /**
+         * 플레이어의 표시 이름을 업데이트합니다.
+         */
+        UPDATE_DISPLAY_NAME,
+        /**
+         * 플레이어의 탭 리스트 정렬 순서를 업데이트합니다.
+         */
+        UPDATE_LIST_ORDER,
+        /**
+         * 플레이어 스킨의 모자 레이어 활성화 여부를 업데이트합니다.
+         */
+        UPDATE_HAT;
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/packet/SetChunkCacheRadiusPacket.java b/src/main/java/moe/caramel/daydream/packet/SetChunkCacheRadiusPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..10eb869b90b715c19f71e4798a5e23bdb7b83135
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/packet/SetChunkCacheRadiusPacket.java
@@ -0,0 +1,15 @@
+package moe.caramel.daydream.packet;
+
+import org.jspecify.annotations.NullMarked;
+
+@NullMarked
+public interface SetChunkCacheRadiusPacket extends Packet {
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param distance 플레이어의 청크 렌더 거리
+     * @return this
+     */
+    SetChunkCacheRadiusPacket create(final int distance);
+}
diff --git a/src/main/java/moe/caramel/daydream/packet/SetDisplayObjectivePacket.java b/src/main/java/moe/caramel/daydream/packet/SetDisplayObjectivePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..88fb62d3eaa0ae94302eceab515076cbc164ee75
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/packet/SetDisplayObjectivePacket.java
@@ -0,0 +1,30 @@
+package moe.caramel.daydream.packet;
+
+import org.bukkit.scoreboard.DisplaySlot;
+import org.bukkit.scoreboard.Objective;
+import org.jspecify.annotations.NullMarked;
+import org.jspecify.annotations.Nullable;
+
+@NullMarked
+public interface SetDisplayObjectivePacket extends Packet {
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param slot 목표의 위치
+     * @param objective {@link org.bukkit.scoreboard.Objective} 객체
+     * @return this
+     */
+    default SetDisplayObjectivePacket create(final DisplaySlot slot, final Objective objective) {
+        return this.create(slot, objective.getName());
+    }
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param slot 목표의 위치
+     * @param scoreName {@link org.bukkit.scoreboard.Objective}의 이름
+     * @return this
+     */
+    SetDisplayObjectivePacket create(final DisplaySlot slot, final @Nullable String scoreName);
+}
diff --git a/src/main/java/moe/caramel/daydream/packet/SetEntityMotionPacket.java b/src/main/java/moe/caramel/daydream/packet/SetEntityMotionPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..72b3baf16e5c8199bffabfbce4d3c733b7a1917c
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/packet/SetEntityMotionPacket.java
@@ -0,0 +1,29 @@
+package moe.caramel.daydream.packet;
+
+import org.bukkit.entity.Entity;
+import org.bukkit.util.Vector;
+import org.jspecify.annotations.NullMarked;
+
+@NullMarked
+public interface SetEntityMotionPacket extends Packet {
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param entity 대상 엔티티
+     * @param velocity 엔티티의 속도
+     * @return this
+     */
+    default SetEntityMotionPacket create(final Entity entity, final Vector velocity) {
+        return this.create(entity.getEntityId(), velocity);
+    }
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param entityId 대상 엔티티 ID
+     * @param velocity 엔티티의 속도
+     * @return this
+     */
+    SetEntityMotionPacket create(final int entityId, final Vector velocity);
+}
diff --git a/src/main/java/moe/caramel/daydream/packet/SetPlayerInventoryPacket.java b/src/main/java/moe/caramel/daydream/packet/SetPlayerInventoryPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..9e428668451ac6ed72bcc00e80de3ca867b8ffe3
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/packet/SetPlayerInventoryPacket.java
@@ -0,0 +1,17 @@
+package moe.caramel.daydream.packet;
+
+import org.bukkit.inventory.ItemStack;
+import org.jspecify.annotations.NullMarked;
+
+@NullMarked
+public interface SetPlayerInventoryPacket extends Packet {
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param slot 업데이트해야 하는 슬롯
+     * @param stack 아이템
+     * @return this
+     */
+    SetPlayerInventoryPacket create(final int slot, final ItemStack stack);
+}
diff --git a/src/main/java/moe/caramel/daydream/packet/SetPlayerTeamPacket.java b/src/main/java/moe/caramel/daydream/packet/SetPlayerTeamPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..a5472453a4e1694c8d16b01fa3bd8edabbeae83b
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/packet/SetPlayerTeamPacket.java
@@ -0,0 +1,135 @@
+package moe.caramel.daydream.packet;
+
+import net.kyori.adventure.text.Component;
+import org.bukkit.ChatColor;
+import org.bukkit.scoreboard.Team;
+import org.jspecify.annotations.NullMarked;
+import org.jspecify.annotations.Nullable;
+import java.util.Collection;
+
+@NullMarked
+public interface SetPlayerTeamPacket extends Packet {
+
+    /*
+        CREATE OR UPDATE
+     */
+
+    /**
+     * 팀 추가 또는 업데이트 패킷을 생성합니다.
+     *
+     * @param team 추가 또는 업데이트할 팀
+     * @param add 만약 {@code true}라면 추가, 아니라면 정보를 업데이트 합니다
+     * @return this
+     */
+    SetPlayerTeamPacket createTeamAddOrUpdatePacket(final Team team, final boolean add);
+
+    /**
+     * 팀 추가 또는 업데이트 패킷을 생성합니다.
+     *
+     * @param teamName 추가 또는 업데이트할 팀의 이름
+     * @param displayName 팀의 디스플레이 이름
+     * @param allowFriendlyFire 만약 {@code true}라면 아군 사격을 허용합니다
+     * @param canSeeFriendlyInvisibles 만약 {@code true}라면 보이지 않는 플레이어를 볼 수 있습니다
+     * @param nametagVisibility 팀의 이름 태그 가시성 규칙
+     * @param collisionRule 팀의 충돌 규칙
+     * @param color 팀의 색
+     * @param teamPrefix 팀의 접두사
+     * @param teamSuffix 팀의 접미사
+     * @param add 만약 {@code true}라면 추가, 아니라면 정보를 업데이트 합니다
+     * @return this
+     */
+    default SetPlayerTeamPacket createTeamAddOrUpdatePacket(
+        final String teamName,
+        final Component displayName,
+        final boolean allowFriendlyFire,
+        final boolean canSeeFriendlyInvisibles,
+        final Team.OptionStatus nametagVisibility,
+        final Team.OptionStatus collisionRule,
+        final ChatColor color,
+        final Component teamPrefix,
+        final Component teamSuffix,
+        boolean add
+    ) {
+        return createTeamAddOrUpdatePacket(
+            teamName, displayName, allowFriendlyFire, canSeeFriendlyInvisibles,
+            nametagVisibility, collisionRule, color, teamPrefix, teamSuffix,
+            add, null
+        );
+    }
+
+    /**
+     * 팀 추가 또는 업데이트 패킷을 생성합니다.
+     *
+     * @param teamName 추가 또는 업데이트할 팀의 이름
+     * @param displayName 팀의 디스플레이 이름
+     * @param allowFriendlyFire 만약 {@code true}라면 아군 사격을 허용합니다
+     * @param canSeeFriendlyInvisibles 만약 {@code true}라면 보이지 않는 플레이어를 볼 수 있습니다
+     * @param nametagVisibility 팀의 이름 태그 가시성 규칙
+     * @param collisionRule 팀의 충돌 규칙
+     * @param color 팀의 색
+     * @param teamPrefix 팀의 접두사
+     * @param teamSuffix 팀의 접미사
+     * @param add 만약 {@code true}라면 추가, 아니라면 정보를 업데이트 합니다
+     * @param players 팀의 초기 플레이어 목록
+     * @return this
+     */
+    SetPlayerTeamPacket createTeamAddOrUpdatePacket(
+        final String teamName,
+        final Component displayName,
+        final boolean allowFriendlyFire,
+        final boolean canSeeFriendlyInvisibles,
+        final Team.OptionStatus nametagVisibility,
+        final Team.OptionStatus collisionRule,
+        final ChatColor color,
+        final Component teamPrefix,
+        final Component teamSuffix,
+        final boolean add,
+        final @Nullable Collection<String> players
+    );
+
+
+    /*
+        REMOVE
+     */
+
+    /**
+     * 팀 제거 패킷을 생성합니다.
+     *
+     * @param team 제거할 팀
+     * @return this
+     */
+    SetPlayerTeamPacket createTeamRemovePacket(final Team team);
+
+    /**
+     * 팀 제거 패킷을 생성합니다.
+     *
+     * @param teamName 제거할 팀의 이름
+     * @return this
+     */
+    SetPlayerTeamPacket createTeamRemovePacket(final String teamName);
+
+
+    /*
+        JOIN OR LEAVE
+     */
+
+    /**
+     * 팀 가입 또는 탈퇴 패킷을 생성합니다.
+     *
+     * @param team 가입 또는 탈퇴할 팀
+     * @param players 가입 또는 탈퇴할 플레이어의 목록
+     * @param join 만약 {@code true}라면 가입, 아니라면 탈퇴
+     * @return this
+     */
+    SetPlayerTeamPacket createTeamJoinOrLeavePacket(final Team team, final Collection<String> players, final boolean join);
+
+    /**
+     * 팀 가입 또는 탈퇴 패킷을 생성합니다.
+     *
+     * @param teamName 가입 또는 탈퇴할 팀의 이름
+     * @param players 가입 또는 탈퇴할 플레이어의 목록
+     * @param join 만약 {@code true}라면 가입, 아니라면 탈퇴
+     * @return this
+     */
+    SetPlayerTeamPacket createTeamJoinOrLeavePacket(final String teamName, final Collection<String> players, final boolean join);
+}
diff --git a/src/main/java/moe/caramel/daydream/player/ChatSession.java b/src/main/java/moe/caramel/daydream/player/ChatSession.java
new file mode 100644
index 0000000000000000000000000000000000000000..5d4727cf68c09203e3663c2bb794f20986f8015b
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/player/ChatSession.java
@@ -0,0 +1,49 @@
+package moe.caramel.daydream.player;
+
+import org.jspecify.annotations.NullMarked;
+import java.util.UUID;
+
+/**
+ * 채팅 세션 클래스
+ */
+@NullMarked
+public final class ChatSession {
+
+    private final UUID sessionId;
+    private final IdentifyKey profileIdentifyKey;
+
+    public static ChatSession create(final UUID sessionId, final IdentifyKey profileIdentifyKey) {
+        return new ChatSession(sessionId, profileIdentifyKey);
+    }
+
+    ChatSession(final UUID sessionId, final IdentifyKey profileIdentifyKey) {
+        this.sessionId = sessionId;
+        this.profileIdentifyKey = profileIdentifyKey;
+    }
+
+    /**
+     * 채팅 세션의 세션 ID를 가져옵니다.
+     *
+     * @return 채팅 세션의 세션 ID
+     */
+    public UUID sessionId() {
+        return sessionId;
+    }
+
+    /**
+     * 프로파일의 공개키를 가져옵니다.
+     *
+     * @return 프로파일의 공개키
+     */
+    public IdentifyKey profileIdentifyKey() {
+        return profileIdentifyKey;
+    }
+
+    @Override
+    public String toString() {
+        return "ChatSession{" +
+            "sessionId=" + sessionId +
+            ", profileIdentifyKey=" + profileIdentifyKey +
+            '}';
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/player/IdentifyKey.java b/src/main/java/moe/caramel/daydream/player/IdentifyKey.java
new file mode 100644
index 0000000000000000000000000000000000000000..d654fe8bfd2c79024f3bd937193708abd4031d44
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/player/IdentifyKey.java
@@ -0,0 +1,63 @@
+package moe.caramel.daydream.player;
+
+import org.jspecify.annotations.NullMarked;
+import java.security.PublicKey;
+import java.time.Instant;
+import java.util.Arrays;
+
+/**
+ * 플레이어 공개키 클래스
+ */
+@NullMarked
+public final class IdentifyKey {
+
+    private final Instant expiresAt;
+    private final PublicKey key;
+    private final byte[] signature;
+
+    public static IdentifyKey create(final Instant expiresAt, final PublicKey key, final byte[] signature) {
+        return new IdentifyKey(expiresAt, key, signature);
+    }
+
+    IdentifyKey(final Instant expiresAt, final PublicKey key, final byte[] signature) {
+        this.expiresAt = expiresAt;
+        this.key = key;
+        this.signature = signature;
+    }
+
+    /**
+     * 공개키의 만료 시간을 가져옵니다.
+     *
+     * @return 공개키의 만료 시간
+     */
+    public Instant expiresAt() {
+        return expiresAt;
+    }
+
+    /**
+     * 플레이어의 공개키를 가져옵니다.
+     *
+     * @return 플레이어의 공개키
+     */
+    public PublicKey key() {
+        return key;
+    }
+
+    /**
+     * 공개키의 서명을 가져옵니다.
+     *
+     * @return 공개키의 서명
+     */
+    public byte[] signature() {
+        return signature;
+    }
+
+    @Override
+    public String toString() {
+        return "IdentifyKey{" +
+            "expiresAt=" + expiresAt +
+            ", key=" + key +
+            ", signature=" + Arrays.toString(signature) +
+            '}';
+    }
+}
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index 275f34d24d13e91a973efd443162407ddbb73891..0d7c40695f8783ccc40338043b765a423262662c 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -3070,6 +3070,20 @@ public final class Bukkit {
     }
     // Paper end - Folia region threading API
 
+    // Daydream start - Add Packet API
+    /**
+     * 패킷 인스턴스를 생성합니다.
+     *
+     * @param packet 패킷 타입
+     * @return 패킷 인스턴스
+     * @param <T> 패킷 타입
+     */
+    @NotNull
+    public static <T extends moe.caramel.daydream.packet.Packet> T createPacket(@NotNull Class<T> packet) {
+        return server.createPacket(packet);
+    }
+    // Daydream end - Add Packet API
+
     @NotNull
     public static Server.Spigot spigot() {
         return server.spigot();
diff --git a/src/main/java/org/bukkit/ChatColor.java b/src/main/java/org/bukkit/ChatColor.java
index 918a045165cdcde264bc24082b7afebb407271de..0756634ad506aa81e8f3a789f5c28c8489c79659 100644
--- a/src/main/java/org/bukkit/ChatColor.java
+++ b/src/main/java/org/bukkit/ChatColor.java
@@ -10,9 +10,8 @@ import org.jetbrains.annotations.Nullable;
 
 /**
  * All supported color values for chat
- * @deprecated ChatColor has been deprecated in favor of <a href="https://docs.advntr.dev/text.html">Adventure</a> API. See {@link net.kyori.adventure.text.format.NamedTextColor} for the adventure equivalent of pre-defined text colors
  */
-@Deprecated // Paper
+//@Deprecated // Paper // Daydream - No
 public enum ChatColor {
     /**
      * Represents black
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 71a5b1bb8ad7b4b3fa1bed33b7570c85b55aaf8b..9ffd883ef360e405f7bb36ab2dadf75046b4b4b4 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -2703,4 +2703,16 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      */
     void allowPausing(@NotNull org.bukkit.plugin.Plugin plugin, boolean value);
     // Paper end - API to check if the server is sleeping
+
+    // Daydream start - Add Packet API
+    /**
+     * 패킷 인스턴스를 생성합니다.
+     *
+     * @param packet 패킷 타입
+     * @return 패킷 인스턴스
+     * @param <T> 패킷 타입
+     */
+    @NotNull
+    <T extends moe.caramel.daydream.packet.Packet> T createPacket(@NotNull Class<T> packet);
+    // Daydream end - Add Packet API
 }
diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
index c679817a7311e0a5c1cafa14df81c8334445e987..f9e0abf4d6c40105b83f92cc761972bf4c65ef07 100644
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -1627,6 +1627,17 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
     public Entity getEntity(@NotNull java.util.UUID uuid);
     // Paper end
 
+    // Daydream start - Add Packet API (getEntityById)
+    /**
+     * Gets an entity in this world by its ID
+     *
+     * @param id the ID of the entity
+     * @return the entity with the given ID, or null if it isn't found
+     */
+    @Nullable
+    public Entity getEntity(int id);
+    // Daydream end - Add Packet API
+
     /**
      * Returns a list of entities within a bounding box centered around a
      * Location.
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index 19272cff8d6d040e95b2644d70acdac606e06c16..8c36a3bf4cd4c9f286d9b9d06c192a20143f0955 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -532,6 +532,19 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
     @NotNull
     public UUID getUniqueId();
 
+    // Daydream start - Add Packet API
+    /**
+     * Gets the metadata of the entity.
+     *
+     * @param index metadata index
+     * @return get or null
+     * @see <a href="https://wiki.vg/Entity_metadata">here</a>
+     */
+    @Nullable
+    @org.jetbrains.annotations.ApiStatus.Experimental
+    public Object getMetadata(int index);
+    // Daydream end - Add Packet API
+
     /**
      * Gets the amount of ticks this entity has lived for.
      * <p>
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 26fd11130544179f49cf5f684dcddbfe270dca20..11c606b9514edc65a755471544a826ac893229d1 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -476,6 +476,16 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      */
     public boolean performCommand(@NotNull String command);
 
+    // Daydream start - Add Packet API
+    /**
+     * 플레이어의 채팅 세션을 가져옵니다.
+     *
+     * @return 플레이어의 채팅 세션
+     */
+    @Nullable
+    public moe.caramel.daydream.player.ChatSession getChatSession();
+    // Daydream end - Add Packet API
+
     /**
      * Returns true if the entity is supported by a block.
      *
@@ -1094,6 +1104,31 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     public void sendCustomPayload(@NotNull org.bukkit.NamespacedKey channel, @NotNull io.netty.buffer.ByteBuf buf);
     // Daydream end - Add Network API
 
+    // Daydream start - Add Packet API
+    /**
+     * 플레이어에게 raw 패킷을 전송합니다.
+     *
+     * @param nmsPacket NMS 패킷 인스턴스
+     * @deprecated {@link Player#sendPacket(moe.caramel.daydream.packet.Packet)}를 사용해주세요
+     */
+    @Deprecated
+    public void sendRawPacket(@NotNull Object nmsPacket);
+
+    /**
+     * 플레이어에게 패킷을 전송합니다.
+     *
+     * @param packet 패킷 인스턴스
+     */
+    public void sendPacket(@NotNull moe.caramel.daydream.packet.Packet packet);
+
+    /**
+     * 플레이어 및 플레이어를 트래킹하고 있는 플레이어에게 패킷을 전송합니다.
+     *
+     * @param packet 패킷 인스턴스
+     */
+    public void sendAndBroadcastPacket(@NotNull moe.caramel.daydream.packet.Packet packet);
+    // Daydream end - Add Packet API
+
     // Paper start
     /**
      * Send a sign change. This fakes a sign change packet for a user at
