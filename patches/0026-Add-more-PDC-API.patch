From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Thu, 20 Jul 2023 04:32:28 +0900
Subject: [PATCH] Add more PDC API


diff --git a/src/main/java/io/papermc/paper/persistence/PersistentDataContainerView.java b/src/main/java/io/papermc/paper/persistence/PersistentDataContainerView.java
index 4a4949fde3f03e2ea9d2dde245f7dea119e202bf..606f1b5ef72d4de9164e8ee19612117dfda42d3a 100644
--- a/src/main/java/io/papermc/paper/persistence/PersistentDataContainerView.java
+++ b/src/main/java/io/papermc/paper/persistence/PersistentDataContainerView.java
@@ -164,4 +164,118 @@ public interface PersistentDataContainerView {
      * @throws java.io.IOException if we fail to write this container to a byte array
      */
     byte @NonNull [] serializeToBytes() throws java.io.IOException;
+
+    // Daydream start - Add more PDC API
+    /**
+     * Returns if the persistent metadata provider has metadata registered
+     * matching the provided parameters.
+     * <p>
+     * This method will only return true if the found value has the same primitive
+     * data type as the provided key.
+     * <p>
+     * Storing a value using a custom {@link PersistentDataType} implementation
+     * will not store the complex data type. Therefore storing a UUID (by
+     * storing a byte[]) will match has("key" ,
+     * {@link PersistentDataType#BYTE_ARRAY}). Likewise a stored byte[] will
+     * always match your UUID {@link PersistentDataType} even if it is not 16
+     * bytes long.
+     * <p>
+     * This method is only usable for custom object keys. Overwriting existing
+     * tags, like the display name, will not work as the values are stored
+     * using your namespace.
+     *
+     * @param key the key the value is stored under
+     * @param type the type the primative stored value has to match
+     * @param <P> the generic type of the stored primitive
+     * @param <C> the generic type of the eventually created complex object
+     *
+     * @return if a value with the provided key and type exists
+     *
+     * @throws IllegalArgumentException if the key to look up is null
+     * @throws IllegalArgumentException if the type to cast the found object to is
+     * null
+     */
+    <P, C> boolean has(@NonNull String key, @NonNull PersistentDataType<P, C> type);
+
+    /**
+     * Returns if the persistent metadata provider has metadata registered matching
+     * the provided parameters.
+     * <p>
+     * This method will return true as long as a value with the given key exists,
+     * regardless of its type.
+     * <p>
+     * This method is only usable for custom object keys. Overwriting existing tags,
+     * like the display name, will not work as the values are stored using your
+     * namespace.
+     *
+     * @param key the key the value is stored under
+     *
+     * @return if a value with the provided key exists
+     *
+     * @throws IllegalArgumentException if the key to look up is null
+     */
+    boolean has(@NonNull String key);
+
+    /**
+     * Returns the metadata value that is stored on the
+     * {@link PersistentDataHolder} instance.
+     *
+     * @param key the key to look up in the custom tag map
+     * @param type the type the value must have and will be casted to
+     * @param <P> the generic type of the stored primitive
+     * @param <C> the generic type of the eventually created complex object
+     *
+     * @return the value or {@code null} if no value was mapped under the given
+     * value
+     *
+     * @throws IllegalArgumentException if the key to look up is null
+     * @throws IllegalArgumentException if the type to cast the found object to is
+     * null
+     * @throws IllegalArgumentException if a value exists under the given key,
+     * but cannot be accessed using the given type
+     * @throws IllegalArgumentException if no suitable adapter was found for
+     * the {@link
+     * PersistentDataType#getPrimitiveType()}
+     */
+    @org.jetbrains.annotations.Nullable
+    <P, C> C get(@NonNull String key, @NonNull PersistentDataType<P, C> type);
+
+    /**
+     * Returns the metadata value that is stored on the
+     * {@link PersistentDataHolder} instance. If the value does not exist in the
+     * container, the default value provided is returned.
+     *
+     * @param key the key to look up in the custom tag map
+     * @param type the type the value must have and will be casted to
+     * @param defaultValue the default value to return if no value was found for
+     * the provided key
+     * @param <P> the generic type of the stored primitive
+     * @param <C> the generic type of the eventually created complex object
+     *
+     * @return the value or the default value if no value was mapped under the
+     * given key
+     *
+     * @throws IllegalArgumentException if the key to look up is null
+     * @throws IllegalArgumentException if the type to cast the found object to is
+     * null
+     * @throws IllegalArgumentException if a value exists under the given key,
+     * but cannot be accessed using the given type
+     * @throws IllegalArgumentException if no suitable adapter was found for
+     * the {@link PersistentDataType#getPrimitiveType()}
+     */
+    @NonNull
+    <P, C> C getOrDefault(@NonNull String key, @NonNull PersistentDataType<P, C> type, @NonNull C defaultValue);
+
+    /**
+     * Get the set of keys present on this {@link PersistentDataContainer}
+     * instance.
+     *
+     * Any changes made to the returned set will not be reflected on the
+     * instance.
+     *
+     * @return the key set
+     */
+    @NonNull
+    Set<String> keys();
+    // Daydream end - Add more PDC API
 }
diff --git a/src/main/java/io/papermc/paper/persistence/PersistentDataViewHolder.java b/src/main/java/io/papermc/paper/persistence/PersistentDataViewHolder.java
index 9789916f949374bfb50da535b076180700f7ae73..e297ecf95e623db9e8c4c28c1b02c5ee0c38f693 100644
--- a/src/main/java/io/papermc/paper/persistence/PersistentDataViewHolder.java
+++ b/src/main/java/io/papermc/paper/persistence/PersistentDataViewHolder.java
@@ -20,4 +20,20 @@ public interface PersistentDataViewHolder {
      * @return the persistent data container view
      */
     @NonNull PersistentDataContainerView getPersistentDataContainer();
+
+    // Daydream start - Add more PDC API
+    /**
+     * Returns a custom tag container view capable of viewing tags on the object.
+     * <p>
+     * Note that the tags stored on this container are all stored under their
+     * own custom namespace therefore modifying default tags using this
+     * {@link PersistentDataViewHolder} is impossible.
+     *
+     * @return the persistent data container view
+     */
+    @NonNull
+    default PersistentDataContainerView getPdc() {
+        return getPersistentDataContainer();
+    }
+    // Daydream end - Add more PDC API
 }
diff --git a/src/main/java/org/bukkit/persistence/PersistentDataContainer.java b/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
index 0f40eb52f6e2a5b6932cf9f223c1bbe9ab9eab1b..a601da2e7facb2172cdd186487b8a7b22cf0fc25 100644
--- a/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
+++ b/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
@@ -71,4 +71,43 @@ public interface PersistentDataContainer extends io.papermc.paper.persistence.Pe
         this.readFromBytes(bytes, true);
     }
     // Paper end - byte array serialization
+
+    // Daydream start - Add more PDC API
+    /**
+     * Stores a metadata value on the {@link PersistentDataHolder} instance.
+     * <p>
+     * This API cannot be used to manipulate minecraft data, as the values will
+     * be stored using your namespace. This method will override any existing
+     * value the {@link PersistentDataHolder} may have stored under the provided
+     * key.
+     *
+     * @param key the key this value will be stored under
+     * @param type the type this tag uses
+     * @param value the value to store in the tag
+     * @param <P> the generic java type of the tag value
+     * @param <C> the generic type of the object to store
+     *
+     * @throws IllegalArgumentException if the key is null
+     * @throws IllegalArgumentException if the type is null
+     * @throws IllegalArgumentException if the value is null. Removing a tag should
+     * be done using {@link #remove(String)}
+     * @throws IllegalArgumentException if no suitable adapter was found for
+     * the {@link PersistentDataType#getPrimitiveType()}
+     */
+    <P, C> void set(@NotNull String key, @NotNull PersistentDataType<P, C> type, @NotNull C value);
+
+    /**
+     * Removes a custom key from the {@link PersistentDataHolder} instance.
+     *
+     * @param key the key to remove
+     *
+     * @throws IllegalArgumentException if the provided key is null
+     */
+    void remove(@NotNull String key);
+
+    /**
+     * Clears PersistentDataContainer instances.
+     */
+    void clear();
+    // Daydream end - Add more PDC API
 }
diff --git a/src/main/java/org/bukkit/persistence/PersistentDataHolder.java b/src/main/java/org/bukkit/persistence/PersistentDataHolder.java
index 71f33c1265bc753ef40108ffce0d4bd8656d2903..8670975efd18c63a4bfee4c284471cfc596b66ce 100644
--- a/src/main/java/org/bukkit/persistence/PersistentDataHolder.java
+++ b/src/main/java/org/bukkit/persistence/PersistentDataHolder.java
@@ -22,4 +22,19 @@ public interface PersistentDataHolder extends io.papermc.paper.persistence.Persi
     @NotNull
     PersistentDataContainer getPersistentDataContainer();
 
+    // Daydream start - Add more PDC API
+    /**
+     * Returns a custom tag container capable of storing tags on the object.
+     *
+     * Note that the tags stored on this container are all stored under their
+     * own custom namespace therefore modifying default tags using this
+     * {@link PersistentDataHolder} is impossible.
+     *
+     * @return the persistent metadata container
+     */
+    @Override
+    default @NotNull PersistentDataContainer getPdc() {
+        return getPersistentDataContainer();
+    }
+    // Daydream end - Add more PDC API
 }
