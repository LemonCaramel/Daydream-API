From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Tue, 24 Aug 2021 00:10:34 +0900
Subject: [PATCH] Add caramel.moe Network Support


diff --git a/build.gradle.kts b/build.gradle.kts
index 9be8981d930323a9f88be2f13b6e1b0d98b34c0d..5e8a039eee05e9bc4ae33af924b12de49aead965 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -46,6 +46,7 @@ dependencies {
     }
     // Daydream end
     api("com.mojang:authlib:2.3.31") // Daydream - Mojang Authlib (keep in sync with major MC versions)
+    api("moe.caramel:acacia-user:1.0.0-proto") // Daydream - caramel.moe Network
 
     implementation("org.ow2.asm:asm:9.1")
     implementation("org.ow2.asm:asm-commons:9.1")
diff --git a/src/main/java/moe/caramel/daydream/DaydreamConstants.java b/src/main/java/moe/caramel/daydream/DaydreamConstants.java
new file mode 100644
index 0000000000000000000000000000000000000000..705398836f0a82320e08a7b9deefb54a7b8909ca
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/DaydreamConstants.java
@@ -0,0 +1,9 @@
+package moe.caramel.daydream;
+
+public final class DaydreamConstants {
+
+    /* caramel.moe Network Data */
+    private static boolean USE_CARAMEL_NETWORK_DATA = false;
+    public static void enableCaramelNetworkData() { USE_CARAMEL_NETWORK_DATA = true; }
+    public static boolean useCaramelNetworkData() { return USE_CARAMEL_NETWORK_DATA; }
+}
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 5b165f922de0d8bdf8fee9f81c3634008325c2ea..4f0555bacbbbf201489f6ed0b6c324167f28b22e 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -43,6 +43,10 @@ import org.jetbrains.annotations.Nullable;
  */
 public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient, net.kyori.adventure.identity.Identified, com.destroystokyo.paper.network.NetworkClient { // Paper
 
+    // Daydream start
+    @NotNull moe.caramel.acacia.user.User getUserData();
+    // Daydream end
+
     // Paper start
     @Override
     default @NotNull net.kyori.adventure.identity.Identity identity() {
diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
index 694a81769076ea58aae9f14f076ab80c9952c957..9dc629f9e107e8b6fa97145498d6eee2bc15cb6a 100644
--- a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
+++ b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
@@ -22,6 +22,7 @@ public class AsyncPlayerPreLoginEvent extends Event {
     private final InetAddress ipAddress;
     private final InetAddress rawAddress; // Paper
     //private UUID uniqueId; // Paper - Not used anymore
+    private moe.caramel.acacia.user.User userData; // Daydream
 
     @Deprecated
     public AsyncPlayerPreLoginEvent(@NotNull final String name, @NotNull final InetAddress ipAddress) {
@@ -231,6 +232,22 @@ public class AsyncPlayerPreLoginEvent extends Event {
         this.message = org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(message); // Paper
     }
 
+    // Daydream start
+    @NotNull
+    public moe.caramel.acacia.user.User getUserData() {
+        return userData;
+    }
+
+    /**
+     * caramel.moe 네트워크 유저 데이터
+     *
+     * @param userData caramel.moe 네트워크 유저 데이터
+     */
+    public void setUserData(@NotNull moe.caramel.acacia.user.User userData) {
+        this.userData = userData;
+    }
+    // Daydream end
+
     /**
      * Gets the player's name.
      *
diff --git a/src/main/java/org/bukkit/event/server/ServerLoadEvent.java b/src/main/java/org/bukkit/event/server/ServerLoadEvent.java
index c9a252d7e2f8c82b8ce10c02a92ada4529495f71..3876f150f428f77bffbf1b4753a5e514f7b6e2a1 100644
--- a/src/main/java/org/bukkit/event/server/ServerLoadEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServerLoadEvent.java
@@ -37,6 +37,29 @@ public class ServerLoadEvent extends ServerEvent {
         return type;
     }
 
+    // Daydream start
+    private Class<? extends moe.caramel.acacia.user.User> deserializeClass;
+
+    /**
+     * Returns a class for deserialization.
+     *
+     * @return a class for deserialize
+     */
+    @org.jetbrains.annotations.Nullable
+    public Class<? extends moe.caramel.acacia.user.User> getDeserializeClass() {
+        return deserializeClass;
+    }
+
+    /**
+     * Sets the class for deserialization.
+     *
+     * @param deserializeClass class for deserialize.
+     */
+    public void setDeserializeClass(@NotNull Class<? extends moe.caramel.acacia.user.User> deserializeClass) {
+        this.deserializeClass = deserializeClass;
+    }
+    // Daydream end
+
     @NotNull
     @Override
     public HandlerList getHandlers() {
