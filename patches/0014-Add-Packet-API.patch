From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Sat, 16 Jul 2022 00:04:33 +0900
Subject: [PATCH] Add Packet API


diff --git a/src/main/java/moe/caramel/daydream/event/packet/PacketType.java b/src/main/java/moe/caramel/daydream/event/packet/PacketType.java
new file mode 100644
index 0000000000000000000000000000000000000000..61211adc0df36f4de80f03cba515ffe1e1dff79d
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/packet/PacketType.java
@@ -0,0 +1,22 @@
+package moe.caramel.daydream.event.packet;
+
+/**
+ * Packet Lists
+ */
+public interface PacketType {
+
+    /**
+     * [Client -> Server] Packets
+     */
+    enum Client {
+        PLAYER_INPUT,
+        PONG
+    }
+
+    /**
+     * [Server -> Client] Packets
+     */
+    enum Server {
+        ENTITY_EQUIPMENT
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/event/packet/ReceivePacketEvent.java b/src/main/java/moe/caramel/daydream/event/packet/ReceivePacketEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..72ba6a908a0986f5c857e4d536a385ab1ec23144
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/packet/ReceivePacketEvent.java
@@ -0,0 +1,36 @@
+package moe.caramel.daydream.event.packet;
+
+import moe.caramel.daydream.event.packet.PacketType.Client;
+import org.bukkit.entity.Player;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * 서버가 클라이언트로부터 패킷을 전달받았을 때 호출됩니다.
+ */
+public class ReceivePacketEvent extends PlayerEvent {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+    public @NotNull HandlerList getHandlers() { return HANDLER_LIST; }
+    public static @NotNull HandlerList getHandlerList() { return HANDLER_LIST; }
+
+    private final Client packetType;
+
+    @ApiStatus.Internal
+    public ReceivePacketEvent(final @NotNull Player who, final @NotNull Client packetType, final boolean async) {
+        super(who, async);
+        this.packetType = packetType;
+    }
+
+    /**
+     * 클라이언트가 보낸 패킷의 종류를 가져옵니다.
+     *
+     * @return 클라이언트가 보낸 패킷의 종류
+     */
+    @NotNull
+    public Client getPacketType() {
+        return packetType;
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/event/packet/ReceivePlayerInputPacketEvent.java b/src/main/java/moe/caramel/daydream/event/packet/ReceivePlayerInputPacketEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..da9b1b6b0c28a19168b3ca02b83c927d5f191059
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/packet/ReceivePlayerInputPacketEvent.java
@@ -0,0 +1,120 @@
+package moe.caramel.daydream.event.packet;
+
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * 서버가 클라이언트로부터 {@link PacketType.Client#PLAYER_INPUT} 패킷을 전달받았을 때 호출됩니다.
+ */
+public final class ReceivePlayerInputPacketEvent extends ReceivePacketEvent implements Cancellable {
+
+    private float sideways, forward;
+    private boolean jumping, shiftKeyDown;
+    private boolean cancelled;
+
+    @ApiStatus.Internal
+    public ReceivePlayerInputPacketEvent(final @NotNull Player who, final float sideways, final float forward, final boolean jumping, final boolean shiftKeyDown) {
+        super(who, PacketType.Client.PLAYER_INPUT, false);
+        this.sideways = sideways;
+        this.forward = forward;
+        this.jumping = jumping;
+        this.shiftKeyDown = shiftKeyDown;
+    }
+
+    /**
+     * Gets sideways value.
+     *
+     * @return sideways value
+     */
+    public float getSideways() {
+        return sideways;
+    }
+
+    /**
+     * Sets sideways value.
+     *
+     * @param sideways new sideways value
+     */
+    public void setSideways(final float sideways) {
+        this.sideways = sideways;
+    }
+
+    /**
+     * Gets forward value.
+     *
+     * @return forward value
+     */
+    public float getForward() {
+        return forward;
+    }
+
+    /**
+     * Sets forward value.
+     *
+     * @param forward new forward value
+     */
+    public void setForward(final float forward) {
+        this.forward = forward;
+    }
+
+    /**
+     * Gets jumping value.
+     *
+     * @return jumping value
+     */
+    public boolean isJumping() {
+        return jumping;
+    }
+
+    /**
+     * Sets jumping value.
+     *
+     * @param jumping new jumping value
+     */
+    public void setJumping(final boolean jumping) {
+        this.jumping = jumping;
+    }
+
+    /**
+     * Gets shiftKeyDown value.
+     *
+     * @return shiftKeyDown value
+     */
+    public boolean isShiftKeyDown() {
+        return shiftKeyDown;
+    }
+
+    /**
+     * Sets shiftKeyDown value.
+     *
+     * @param shiftKeyDown new shiftKeyDown value
+     */
+    public void setShiftKeyDown(final boolean shiftKeyDown) {
+        this.shiftKeyDown = shiftKeyDown;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return this.cancelled;
+    }
+
+    @Override
+    public void setCancelled(final boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    @Override
+    public String toString() {
+        return "ReceivePlayerInputPacketEvent{" +
+               "packetType=" + this.getPacketType() +
+               ", player=" + this.getPlayer() +
+               ", sideways=" + sideways +
+               ", forward=" + forward +
+               ", jumping=" + jumping +
+               ", shiftKeyDown=" + shiftKeyDown +
+               ", cancelled=" + this.isCancelled() +
+               '}';
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/event/packet/ReceivePongPacketEvent.java b/src/main/java/moe/caramel/daydream/event/packet/ReceivePongPacketEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..5edab026e3719dfa7e0c6f8390929d7a69c7d5bc
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/packet/ReceivePongPacketEvent.java
@@ -0,0 +1,35 @@
+package moe.caramel.daydream.event.packet;
+
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * 서버가 클라이언트로부터 {@link PacketType.Client#PONG} 패킷을 전달받았을 때 호출됩니다.
+ */
+public final class ReceivePongPacketEvent extends ReceivePacketEvent {
+
+    private final int id;
+
+    @ApiStatus.Internal
+    public ReceivePongPacketEvent(final @NotNull Player who, final int id) {
+        super(who, PacketType.Client.PONG, true);
+        this.id = id;
+    }
+
+    /**
+     * Gets id.
+     *
+     * @return id
+     */
+    public int getId() {
+        return id;
+    }
+
+    @Override
+    public String toString() {
+        return "ReceivePongPacketEvent{" +
+               "id=" + id +
+               '}';
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/event/packet/SendEntityEquipmentEvent.java b/src/main/java/moe/caramel/daydream/event/packet/SendEntityEquipmentEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..10cd77a43e1551cf8c8f4b58060f52e281986513
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/packet/SendEntityEquipmentEvent.java
@@ -0,0 +1,88 @@
+package moe.caramel.daydream.event.packet;
+
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.inventory.EquipmentSlot;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+import java.util.Map;
+
+/**
+ * 서버가 클라이언트에게 {@link PacketType.Server#ENTITY_EQUIPMENT} 패킷을 전송할 때 호출됩니다.
+ */
+public final class SendEntityEquipmentEvent extends SendPacketEvent implements Cancellable {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+    public @NotNull HandlerList getHandlers() { return HANDLER_LIST; }
+    public static @NotNull HandlerList getHandlerList() { return HANDLER_LIST; }
+
+    private final Entity target;
+    private final Reason reason;
+    private final Map<EquipmentSlot, ItemStack> data;
+    private boolean cancelled;
+
+    @ApiStatus.Internal
+    public SendEntityEquipmentEvent(final @NotNull Player player, final @NotNull Entity target, final @NotNull Reason reason, final @NotNull Map<EquipmentSlot, ItemStack> data) {
+        super(player, PacketType.Server.ENTITY_EQUIPMENT, false);
+        this.reason = reason;
+        this.target = target;
+        this.data = data;
+    }
+
+    /**
+     * 이 패킷의 대상 엔티티를 가져옵니다.
+     *
+     * @return 패킷의 대상 엔티티
+     */
+    @NotNull
+    public Entity getTarget() {
+        return target;
+    }
+
+    /**
+     * 이벤트 호출 사유를 가져옵니다.
+     *
+     * @return 이벤트 호출 사유
+     */
+    @NotNull
+    public Reason getReason() {
+        return reason;
+    }
+
+    /**
+     * 전송 예정인 장비 목록을 반환하며, 목록을 수정할 수 있습니다.
+     *
+     * @return 장비 목록
+     */
+    @NotNull
+    public Map<EquipmentSlot, ItemStack> getData() {
+        return data;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(final boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    /**
+     * 이벤트 호출 사유
+     */
+    public enum Reason {
+        /**
+         * 대상 엔티티를 추적하기 시작했을 때
+         */
+        PAIRING,
+        /**
+         * 엔티티가 장비를 업데이트했을 때
+         */
+        UPDATE_EQUIPMENT
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/event/packet/SendPacketEvent.java b/src/main/java/moe/caramel/daydream/event/packet/SendPacketEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..4f0058a42e44293d41ae419e4aea2b663fe54ed5
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/packet/SendPacketEvent.java
@@ -0,0 +1,36 @@
+package moe.caramel.daydream.event.packet;
+
+import moe.caramel.daydream.event.packet.PacketType.Server;
+import org.bukkit.entity.Player;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * 서버가 클라이언트에게 패킷을 전송할 때 호출됩니다.
+ */
+public class SendPacketEvent extends PlayerEvent {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+    public @NotNull HandlerList getHandlers() { return HANDLER_LIST; }
+    public static @NotNull HandlerList getHandlerList() { return HANDLER_LIST; }
+
+    private final Server packetType;
+
+    @ApiStatus.Internal
+    public SendPacketEvent(final @NotNull Player who, final @NotNull Server packetType, final boolean async) {
+        super(who, async);
+        this.packetType = packetType;
+    }
+
+    /**
+     * 서버가 보낼 패킷의 종류를 가져옵니다.
+     *
+     * @return 서버가 보낼 패킷의 종류
+     */
+    @NotNull
+    public Server getPacketType() {
+        return packetType;
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/packet/BundlePacket.java b/src/main/java/moe/caramel/daydream/packet/BundlePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..e2b2e8569dbe39c7dea763e2ea9035f23c8a8e6d
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/packet/BundlePacket.java
@@ -0,0 +1,27 @@
+package moe.caramel.daydream.packet;
+
+import org.jetbrains.annotations.NotNull;
+import java.util.List;
+
+public interface BundlePacket extends Packet {
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param packets 동시에 처리할 패킷 목록
+     * @return this
+     */
+    @NotNull
+    default BundlePacket create(final @NotNull Packet... packets) {
+        return create(List.of(packets));
+    }
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param packets 동시에 처리할 패킷 목록
+     * @return this
+     */
+    @NotNull
+    BundlePacket create(final @NotNull List<Packet> packets);
+}
diff --git a/src/main/java/moe/caramel/daydream/packet/ContainerSetSlotPacket.java b/src/main/java/moe/caramel/daydream/packet/ContainerSetSlotPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..e8de852815ded191cb0f872c5a7449721240520c
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/packet/ContainerSetSlotPacket.java
@@ -0,0 +1,22 @@
+package moe.caramel.daydream.packet;
+
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
+public interface ContainerSetSlotPacket extends Packet {
+
+    int CARRIED_ITEM = -1;
+    int PLAYER_INVENTORY = -2;
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param windowId 현재 업데이트 중인 창
+     * @param revision 상태 ID (플레이어가 아이템을 클릭했을 때 이 값을 돌려받습니다)
+     * @param slot 업데이트해야 하는 슬롯
+     * @param stack 아이템
+     * @return this
+     */
+    @NotNull
+    ContainerSetSlotPacket create(int windowId, int revision, int slot, @NotNull ItemStack stack);
+}
diff --git a/src/main/java/moe/caramel/daydream/packet/GameEventPacket.java b/src/main/java/moe/caramel/daydream/packet/GameEventPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..7033a700cdd53ffbfbe6ba16e3f5f21d9cf9ffd0
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/packet/GameEventPacket.java
@@ -0,0 +1,32 @@
+package moe.caramel.daydream.packet;
+
+import org.jetbrains.annotations.NotNull;
+
+public interface GameEventPacket extends Packet {
+
+    int NO_RESPAWN_BLOCK_AVAILABLE = 0;
+    int START_RAINING = 1;
+    int STOP_RAINING = 2;
+    int CHANGE_GAME_MODE = 3;
+    int WIN_GAME = 4;
+    int DEMO_EVENT = 5;
+    int ARROW_HIT_PLAYER = 6;
+    int RAIN_LEVEL_CHANGE = 7;
+    int THUNDER_LEVEL_CHANGE = 8;
+    int PUFFER_FISH_STING = 9;
+    int GUARDIAN_ELDER_EFFECT = 10;
+    int IMMEDIATE_RESPAWN = 11;
+    int LIMITED_CRAFTING = 12;
+    int LEVEL_CHUNKS_LOAD_START = 13;
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param event 게임 이벤트
+     * @param value 이벤트에 따라 값이 다릅니다.
+     *              <a href="http://wiki.vg/Protocol#Game_Event">여기</a>를 참고하세요.
+     * @return this
+     */
+    @NotNull
+    GameEventPacket create(int event, float value);
+}
diff --git a/src/main/java/moe/caramel/daydream/packet/Packet.java b/src/main/java/moe/caramel/daydream/packet/Packet.java
new file mode 100644
index 0000000000000000000000000000000000000000..be95753a33227574d73e50405621134b97fa523e
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/packet/Packet.java
@@ -0,0 +1,27 @@
+package moe.caramel.daydream.packet;
+
+import org.jetbrains.annotations.NotNull;
+
+public interface Packet {
+
+    /**
+     * Packet API Version
+     */
+    int API_VERSION = 2;
+
+    /**
+     * 패킷을 가져옵니다.
+     *
+     * @return 패킷 인스턴스를 반환합니다.
+     * @throws RuntimeException 패킷 빌드가 불가능한 경우 던져집니다.
+     */
+    @NotNull
+    Object getPacket();
+
+    /**
+     * 패킷이 빌드 가능한지 확인합니다.
+     *
+     * @return 빌드가 가능하면 {@code true}를 반환합니다.
+     */
+    boolean canBuild();
+}
diff --git a/src/main/java/moe/caramel/daydream/packet/PingPacket.java b/src/main/java/moe/caramel/daydream/packet/PingPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..8859a585b20a0759f9a7277509de125af28940b0
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/packet/PingPacket.java
@@ -0,0 +1,15 @@
+package moe.caramel.daydream.packet;
+
+import org.jetbrains.annotations.NotNull;
+
+public interface PingPacket extends Packet {
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param id {@link moe.caramel.daydream.event.packet.PacketType.Client#PONG} 패킷으로 돌려받을 Id
+     * @return this
+     */
+    @NotNull
+    PingPacket create(int id);
+}
diff --git a/src/main/java/moe/caramel/daydream/packet/PlayerInfoRemovePacket.java b/src/main/java/moe/caramel/daydream/packet/PlayerInfoRemovePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..2fc82ce169d9b1a4eae924d0cf14d0bf9381fd59
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/packet/PlayerInfoRemovePacket.java
@@ -0,0 +1,43 @@
+package moe.caramel.daydream.packet;
+
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.UUID;
+
+public interface PlayerInfoRemovePacket extends Packet {
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param players 플레이어 목록
+     * @return this
+     */
+    @NotNull
+    default PlayerInfoRemovePacket create(@NotNull Player... players) {
+        final List<UUID> list = new ArrayList<>();
+        for (Player player : players) list.add(player.getUniqueId());
+        return create(list);
+    }
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param uuids 플레이어 목록
+     * @return this
+     */
+    @NotNull
+    default PlayerInfoRemovePacket create(@NotNull UUID... uuids) {
+        return create(List.of(uuids));
+    }
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param uuids 플레이어 목록
+     * @return this
+     */
+    @NotNull
+    PlayerInfoRemovePacket create(@NotNull List<UUID> uuids);
+}
diff --git a/src/main/java/moe/caramel/daydream/packet/PlayerInfoUpdatePacket.java b/src/main/java/moe/caramel/daydream/packet/PlayerInfoUpdatePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..ed534ade84893f41e032697027a17172a485d9ee
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/packet/PlayerInfoUpdatePacket.java
@@ -0,0 +1,182 @@
+package moe.caramel.daydream.packet;
+
+import com.mojang.authlib.GameProfile;
+import moe.caramel.daydream.player.ChatSession;
+import net.kyori.adventure.text.Component;
+import org.bukkit.GameMode;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import java.util.Collection;
+import java.util.EnumSet;
+import java.util.List;
+import java.util.UUID;
+
+public interface PlayerInfoUpdatePacket extends Packet {
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param actions 패킷이 수행할 작업의 목록
+     * @param players 플레이어 목록
+     * @return this
+     */
+    @NotNull
+    PlayerInfoUpdatePacket create(@NotNull EnumSet<Action> actions, @NotNull Player... players);
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param actions 패킷이 수행할 작업의 목록
+     * @param data 플레이어 데이터
+     * @return this
+     */
+    @NotNull
+    default PlayerInfoUpdatePacket create(@NotNull EnumSet<Action> actions, @NotNull PlayerData... data) {
+        return create(actions, List.of(data));
+    }
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param actions 패킷이 수행할 작업의 목록
+     * @param data 플레이어 데이터
+     * @return this
+     */
+    @NotNull
+    PlayerInfoUpdatePacket create(@NotNull EnumSet<Action> actions, @NotNull Collection<PlayerData> data);
+
+
+    /**
+     * 플레이어 데이터
+     *
+     * @param profileId 플레이어의 게임 프로파일 UUID (필수: 모두)
+     * @param profile 플레이어의 게임 프로파일 (필수: {@link Action#ADD_PLAYER})
+     * @param listed 탭 리스트 표시 여부 (필수: {@link Action#UPDATE_LISTED})
+     * @param latency 플레이어의 지연 시간 (필수: {@link Action#UPDATE_LATENCY})
+     * @param gameMode 플레이어의 게임 모드 (필수: {@link Action#UPDATE_GAME_MODE})
+     * @param playerListName 플레이어의 표시 이름 (필수: {@link Action#UPDATE_DISPLAY_NAME})
+     * @param chatSession 플레이어의 채팅 세션 (선택: {@link Action#INITIALIZE_CHAT})
+     */
+    record PlayerData(
+        @NotNull UUID profileId, @NotNull GameProfile profile,
+        boolean listed, int latency, @NotNull GameMode gameMode,
+        @Nullable Component playerListName, @Nullable ChatSession chatSession
+    ) {}
+
+
+    /**
+     * for Add Player Action
+     *
+     * @param profileId 플레이어의 프로파일 UUID
+     * @param profile 플레이어의 게임 프로파일
+     * @param listed 탭 리스트 표시 여부
+     * @param latency 플레이어의 지연 시간
+     * @param gameMode 플레이어의 게임 모드
+     * @param playerListName 플레이어의 표시 이름 (nullable)
+     * @param chatSession 플레이어의 채팅 세션 (nullable)
+     * @return 플레이어 데이터
+     */
+    @NotNull
+    static PlayerData addPlayer(
+        @NotNull UUID profileId, @NotNull GameProfile profile,
+        boolean listed, int latency, @NotNull GameMode gameMode,
+        @Nullable Component playerListName, @Nullable ChatSession chatSession
+    ) {
+        return new PlayerData(profileId, profile, listed, latency, gameMode, playerListName, chatSession);
+    }
+
+    /**
+     * for Add Player Action
+     *
+     * @param player 대상 플레이어
+     * @return 플레이어 데이터
+     */
+    @NotNull
+    static PlayerData addPlayer(@NotNull Player player) {
+        return PlayerInfoUpdatePacket.addPlayer(
+            player.getUniqueId(), player.getProfile(),
+            true, player.getPing(), player.getGameMode(),
+            player.playerListName(), player.getChatSession()
+        );
+    }
+
+    /**
+     * for Update GameMode Action
+     *
+     * @param uuid 플레이어의 UUID
+     * @param gameMode 플레이어의 게임 모드
+     * @return 플레이어 데이터
+     */
+    @NotNull
+    static PlayerData updateGameMode(@NotNull UUID uuid, @NotNull GameMode gameMode) {
+        return new PlayerData(uuid, null, false, 0, gameMode, null, null);
+    }
+
+    /**
+     * for Update Listed Action
+     *
+     * @param uuid 플레이어의 UUID
+     * @param listed 플레이어가 탭 리스트에 표시될지의 여부
+     * @return 플레이어 데이터
+     */
+    @NotNull
+    static PlayerData updateListed(@NotNull UUID uuid, boolean listed) {
+        return new PlayerData(uuid, null, listed, 0, null, null, null);
+    }
+
+    /**
+     * for Update Latency Action
+     *
+     * @param uuid 플레이어의 UUID
+     * @param latency 플레이어의 지연 시간
+     * @return 플레이어 데이터
+     */
+    @NotNull
+    static PlayerData updateLatency(@NotNull UUID uuid, int latency) {
+        return new PlayerData(uuid, null, false, latency, null, null, null);
+    }
+
+    /**
+     * for Update PlayerListName Action
+     *
+     * @param uuid 플레이어의 UUID
+     * @param playerListName 플레이어의 표시 이름 (nullable)
+     * @return 플레이어 데이터
+     */
+    @NotNull
+    static PlayerData updatePlayerListName(@NotNull UUID uuid, @Nullable Component playerListName) {
+        return new PlayerData(uuid, null, false, 0, null, playerListName, null);
+    }
+
+
+    /**
+     * Player Info Update 패킷 액션
+     */
+    enum Action {
+        /**
+         * 플레이어를 추가합니다.
+         */
+        ADD_PLAYER,
+        /**
+         * 채팅 세션을 설정합니다.
+         */
+        INITIALIZE_CHAT,
+        /**
+         * 플레이어의 게임 모드를 업데이트합니다.
+         */
+        UPDATE_GAME_MODE,
+        /**
+         * 플레이어를 탭 리스트에 포함할지 결정합니다.
+         */
+        UPDATE_LISTED,
+        /**
+         * 플레이어의 지연 시간을 업데이트합니다.
+         */
+        UPDATE_LATENCY,
+        /**
+         * 플레이어의 표시 이름을 업데이트합니다.
+         */
+        UPDATE_DISPLAY_NAME;
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/packet/SetChunkCacheRadiusPacket.java b/src/main/java/moe/caramel/daydream/packet/SetChunkCacheRadiusPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..54b0611fec0111151897645577a9cda1683800b4
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/packet/SetChunkCacheRadiusPacket.java
@@ -0,0 +1,15 @@
+package moe.caramel.daydream.packet;
+
+import org.jetbrains.annotations.NotNull;
+
+public interface SetChunkCacheRadiusPacket extends Packet {
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param distance 플레이어의 청크 렌더 거리
+     * @return this
+     */
+    @NotNull
+    SetChunkCacheRadiusPacket create(int distance);
+}
diff --git a/src/main/java/moe/caramel/daydream/packet/SetDisplayObjectivePacket.java b/src/main/java/moe/caramel/daydream/packet/SetDisplayObjectivePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..1bb0d67feeb2f9bf113f63581ecaa8a89401f247
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/packet/SetDisplayObjectivePacket.java
@@ -0,0 +1,31 @@
+package moe.caramel.daydream.packet;
+
+import org.bukkit.scoreboard.DisplaySlot;
+import org.bukkit.scoreboard.Objective;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public interface SetDisplayObjectivePacket extends Packet {
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param slot 목표의 위치
+     * @param objective {@link org.bukkit.scoreboard.Objective} 객체
+     * @return this
+     */
+    @NotNull
+    default SetDisplayObjectivePacket create(@NotNull DisplaySlot slot, @NotNull Objective objective) {
+        return this.create(slot, objective.getName());
+    }
+
+    /**
+     * 패킷을 생성합니다.
+     *
+     * @param slot 목표의 위치
+     * @param scoreName {@link org.bukkit.scoreboard.Objective}의 이름
+     * @return this
+     */
+    @NotNull
+    SetDisplayObjectivePacket create(@NotNull DisplaySlot slot, @Nullable String scoreName);
+}
diff --git a/src/main/java/moe/caramel/daydream/packet/SetPlayerTeamPacket.java b/src/main/java/moe/caramel/daydream/packet/SetPlayerTeamPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..1e1253044cc9602e0dd0dd8f715b9f0862902a88
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/packet/SetPlayerTeamPacket.java
@@ -0,0 +1,134 @@
+package moe.caramel.daydream.packet;
+
+import net.kyori.adventure.text.Component;
+import org.bukkit.ChatColor;
+import org.bukkit.scoreboard.Team;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import java.util.Collection;
+
+public interface SetPlayerTeamPacket extends Packet {
+
+    /*
+        CREATE OR UPDATE
+     */
+
+    /**
+     * 팀 추가 또는 업데이트 패킷을 생성합니다.
+     *
+     * @param team 추가 또는 업데이트할 팀
+     * @param add 만약 {@code true}라면 추가, 아니라면 정보를 업데이트 합니다
+     * @return this
+     */
+    @NotNull
+    SetPlayerTeamPacket createTeamAddOrUpdatePacket(@NotNull Team team, boolean add);
+
+    /**
+     * 팀 추가 또는 업데이트 패킷을 생성합니다.
+     *
+     * @param teamName 추가 또는 업데이트할 팀의 이름
+     * @param displayName 팀의 디스플레이 이름
+     * @param allowFriendlyFire 만약 {@code true}라면 아군 사격을 허용합니다
+     * @param canSeeFriendlyInvisibles 만약 {@code true}라면 보이지 않는 플레이어를 볼 수 있습니다
+     * @param nametagVisibility 팀의 이름 태그 가시성 규칙
+     * @param collisionRule 팀의 충돌 규칙
+     * @param color 팀의 색
+     * @param teamPrefix 팀의 접두사
+     * @param teamSuffix 팀의 접미사
+     * @param add 만약 {@code true}라면 추가, 아니라면 정보를 업데이트 합니다
+     * @return this
+     */
+    @NotNull
+    default SetPlayerTeamPacket createTeamAddOrUpdatePacket(
+        @NotNull String teamName,
+        @NotNull Component displayName,
+        boolean allowFriendlyFire, boolean canSeeFriendlyInvisibles,
+        @NotNull Team.OptionStatus nametagVisibility,
+        @NotNull Team.OptionStatus collisionRule, @NotNull ChatColor color,
+        @NotNull Component teamPrefix, @NotNull Component teamSuffix,
+        boolean add
+    ) {
+        return createTeamAddOrUpdatePacket(
+            teamName, displayName, allowFriendlyFire, canSeeFriendlyInvisibles,
+            nametagVisibility, collisionRule, color, teamPrefix, teamSuffix,
+            add, null
+        );
+    }
+
+    /**
+     * 팀 추가 또는 업데이트 패킷을 생성합니다.
+     *
+     * @param teamName 추가 또는 업데이트할 팀의 이름
+     * @param displayName 팀의 디스플레이 이름
+     * @param allowFriendlyFire 만약 {@code true}라면 아군 사격을 허용합니다
+     * @param canSeeFriendlyInvisibles 만약 {@code true}라면 보이지 않는 플레이어를 볼 수 있습니다
+     * @param nametagVisibility 팀의 이름 태그 가시성 규칙
+     * @param collisionRule 팀의 충돌 규칙
+     * @param color 팀의 색
+     * @param teamPrefix 팀의 접두사
+     * @param teamSuffix 팀의 접미사
+     * @param add 만약 {@code true}라면 추가, 아니라면 정보를 업데이트 합니다
+     * @param players 팀의 초기 플레이어 목록
+     * @return this
+     */
+    @NotNull
+    SetPlayerTeamPacket createTeamAddOrUpdatePacket(
+        @NotNull String teamName,
+        @NotNull Component displayName,
+        boolean allowFriendlyFire, boolean canSeeFriendlyInvisibles,
+        @NotNull Team.OptionStatus nametagVisibility,
+        @NotNull Team.OptionStatus collisionRule, @NotNull ChatColor color,
+        @NotNull Component teamPrefix, @NotNull Component teamSuffix,
+        boolean add, @Nullable Collection<String> players
+    );
+
+
+    /*
+        REMOVE
+     */
+
+    /**
+     * 팀 제거 패킷을 생성합니다.
+     *
+     * @param team 제거할 팀
+     * @return this
+     */
+    @NotNull
+    SetPlayerTeamPacket createTeamRemovePacket(@NotNull Team team);
+
+    /**
+     * 팀 제거 패킷을 생성합니다.
+     *
+     * @param teamName 제거할 팀의 이름
+     * @return this
+     */
+    @NotNull
+    SetPlayerTeamPacket createTeamRemovePacket(@NotNull String teamName);
+
+
+    /*
+        JOIN OR LEAVE
+     */
+
+    /**
+     * 팀 가입 또는 탈퇴 패킷을 생성합니다.
+     *
+     * @param team 가입 또는 탈퇴할 팀
+     * @param players 가입 또는 탈퇴할 플레이어의 목록
+     * @param join 만약 {@code true}라면 가입, 아니라면 탈퇴
+     * @return this
+     */
+    @NotNull
+    SetPlayerTeamPacket createTeamJoinOrLeavePacket(@NotNull Team team, @NotNull Collection<String> players, boolean join);
+
+    /**
+     * 팀 가입 또는 탈퇴 패킷을 생성합니다.
+     *
+     * @param teamName 가입 또는 탈퇴할 팀의 이름
+     * @param players 가입 또는 탈퇴할 플레이어의 목록
+     * @param join 만약 {@code true}라면 가입, 아니라면 탈퇴
+     * @return this
+     */
+    @NotNull
+    SetPlayerTeamPacket createTeamJoinOrLeavePacket(@NotNull String teamName, @NotNull Collection<String> players, boolean join);
+}
diff --git a/src/main/java/moe/caramel/daydream/player/ChatSession.java b/src/main/java/moe/caramel/daydream/player/ChatSession.java
new file mode 100644
index 0000000000000000000000000000000000000000..cc0d7fa52044d0d6340bdb9ab277765c44bda95b
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/player/ChatSession.java
@@ -0,0 +1,51 @@
+package moe.caramel.daydream.player;
+
+import org.jetbrains.annotations.NotNull;
+import java.util.UUID;
+
+/**
+ * 채팅 세션 클래스
+ */
+public final class ChatSession {
+
+    private final UUID sessionId;
+    private final IdentifyKey profileIdentifyKey;
+
+    @NotNull
+    public static ChatSession create(@NotNull UUID sessionId, @NotNull IdentifyKey profileIdentifyKey) {
+        return new ChatSession(sessionId, profileIdentifyKey);
+    }
+
+    ChatSession(@NotNull UUID sessionId, @NotNull IdentifyKey profileIdentifyKey) {
+        this.sessionId = sessionId;
+        this.profileIdentifyKey = profileIdentifyKey;
+    }
+
+    /**
+     * 채팅 세션의 세션 ID를 가져옵니다.
+     *
+     * @return 채팅 세션의 세션 ID
+     */
+    @NotNull
+    public UUID sessionId() {
+        return sessionId;
+    }
+
+    /**
+     * 프로파일의 공개키를 가져옵니다.
+     *
+     * @return 프로파일의 공개키
+     */
+    @NotNull
+    public IdentifyKey profileIdentifyKey() {
+        return profileIdentifyKey;
+    }
+
+    @Override
+    public String toString() {
+        return "ChatSession{" +
+            "sessionId=" + sessionId +
+            ", profileIdentifyKey=" + profileIdentifyKey +
+            '}';
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/player/IdentifyKey.java b/src/main/java/moe/caramel/daydream/player/IdentifyKey.java
new file mode 100644
index 0000000000000000000000000000000000000000..a4b9dcd4179fa4d4089d1929b639a6d663b53d99
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/player/IdentifyKey.java
@@ -0,0 +1,65 @@
+package moe.caramel.daydream.player;
+
+import org.jetbrains.annotations.NotNull;
+import java.security.PublicKey;
+import java.time.Instant;
+import java.util.Arrays;
+
+/**
+ * 플레이어 공개키 클래스
+ */
+public final class IdentifyKey {
+
+    private final Instant expiresAt;
+    private final PublicKey key;
+    private final byte[] signature;
+
+    @NotNull
+    public static IdentifyKey create(@NotNull Instant expiresAt, @NotNull PublicKey key, byte @NotNull [] signature) {
+        return new IdentifyKey(expiresAt, key, signature);
+    }
+
+    IdentifyKey(@NotNull Instant expiresAt, @NotNull PublicKey key, byte @NotNull [] signature) {
+        this.expiresAt = expiresAt;
+        this.key = key;
+        this.signature = signature;
+    }
+
+    /**
+     * 공개키의 만료 시간을 가져옵니다.
+     *
+     * @return 공개키의 만료 시간
+     */
+    @NotNull
+    public Instant expiresAt() {
+        return expiresAt;
+    }
+
+    /**
+     * 플레이어의 공개키를 가져옵니다.
+     *
+     * @return 플레이어의 공개키
+     */
+    @NotNull
+    public PublicKey key() {
+        return key;
+    }
+
+    /**
+     * 공개키의 서명을 가져옵니다.
+     *
+     * @return 공개키의 서명
+     */
+    public byte @NotNull [] signature() {
+        return signature;
+    }
+
+    @Override
+    public String toString() {
+        return "IdentifyKey{" +
+            "expiresAt=" + expiresAt +
+            ", key=" + key +
+            ", signature=" + Arrays.toString(signature) +
+            '}';
+    }
+}
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index 3ede33a2269805cef78effe5bdae5883a726a53b..e245b38d24b43f52bd68750db84d716c430a950e 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -2950,6 +2950,20 @@ public final class Bukkit {
     }
     // Paper end - Folia region threading API
 
+    // Daydream start - Add Packet API
+    /**
+     * 패킷 인스턴스를 생성합니다.
+     *
+     * @param packet 패킷 타입
+     * @return 패킷 인스턴스
+     * @param <T> 패킷 타입
+     */
+    @NotNull
+    public static <T extends moe.caramel.daydream.packet.Packet> T createPacket(@NotNull Class<T> packet) {
+        return server.createPacket(packet);
+    }
+    // Daydream end - Add Packet API
+
     @NotNull
     public static Server.Spigot spigot() {
         return server.spigot();
diff --git a/src/main/java/org/bukkit/ChatColor.java b/src/main/java/org/bukkit/ChatColor.java
index 918a045165cdcde264bc24082b7afebb407271de..0756634ad506aa81e8f3a789f5c28c8489c79659 100644
--- a/src/main/java/org/bukkit/ChatColor.java
+++ b/src/main/java/org/bukkit/ChatColor.java
@@ -10,9 +10,8 @@ import org.jetbrains.annotations.Nullable;
 
 /**
  * All supported color values for chat
- * @deprecated ChatColor has been deprecated in favor of <a href="https://docs.advntr.dev/text.html">Adventure</a> API. See {@link net.kyori.adventure.text.format.NamedTextColor} for the adventure equivalent of pre-defined text colors
  */
-@Deprecated // Paper
+//@Deprecated // Paper // Daydream - No
 public enum ChatColor {
     /**
      * Represents black
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 407ebae95cfb66ea4671fac00c46485067abae4f..733862f325a9dbf9f7744d9ce34cc5ac9bb82edc 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -2581,4 +2581,16 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      */
     boolean isOwnedByCurrentRegion(@NotNull Entity entity);
     // Paper end - Folia region threading API
+
+    // Daydream start - Add Packet API
+    /**
+     * 패킷 인스턴스를 생성합니다.
+     *
+     * @param packet 패킷 타입
+     * @return 패킷 인스턴스
+     * @param <T> 패킷 타입
+     */
+    @NotNull
+    <T extends moe.caramel.daydream.packet.Packet> T createPacket(@NotNull Class<T> packet);
+    // Daydream end - Add Packet API
 }
diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
index 7deafda6c4b96398b3ac334df9dee9e2c7112ac5..672c4624cf7f6357a4ec9592ddfa8b029bc3ca9b 100644
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -1587,6 +1587,17 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
     public Entity getEntity(@NotNull java.util.UUID uuid);
     // Paper end
 
+    // Daydream start - Add Packet API (getEntityById)
+    /**
+     * Gets an entity in this world by its ID
+     *
+     * @param id the ID of the entity
+     * @return the entity with the given ID, or null if it isn't found
+     */
+    @Nullable
+    public Entity getEntity(int id);
+    // Daydream end - Add Packet API
+
     /**
      * Returns a list of entities within a bounding box centered around a
      * Location.
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index d9929d9311e4b2b0ae13a8f6f13563257263f298..aa01787527e1796d47c294dd0fdfa01d744869bd 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -488,6 +488,19 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
     @NotNull
     public UUID getUniqueId();
 
+    // Daydream start - Add Packet API
+    /**
+     * Gets the metadata of the entity.
+     *
+     * @param index metadata index
+     * @return get or null
+     * @see <a href="https://wiki.vg/Entity_metadata">here</a>
+     */
+    @Nullable
+    @org.jetbrains.annotations.ApiStatus.Experimental
+    public Object getMetadata(int index);
+    // Daydream end - Add Packet API
+
     /**
      * Gets the amount of ticks this entity has lived for.
      * <p>
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index c2d8831df9f97cde8aa230bdb79ea61ccdcb5f54..49325a322c14980a5a2bec23091bc8ea1fefff1c 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -408,6 +408,16 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      */
     public boolean performCommand(@NotNull String command);
 
+    // Daydream start - Add Packet API
+    /**
+     * 플레이어의 채팅 세션을 가져옵니다.
+     *
+     * @return 플레이어의 채팅 세션
+     */
+    @Nullable
+    public moe.caramel.daydream.player.ChatSession getChatSession();
+    // Daydream end - Add Packet API
+
     /**
      * Returns true if the entity is supported by a block.
      *
@@ -1002,6 +1012,24 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     public void sendCustomPayload(@NotNull org.bukkit.NamespacedKey channel, @NotNull io.netty.buffer.ByteBuf buf);
     // Daydream end - Add Network API
 
+    // Daydream start - Add Packet API
+    /**
+     * 플레이어에게 raw 패킷을 전송합니다.
+     *
+     * @param nmsPacket NMS 패킷 인스턴스
+     * @deprecated {@link Player#sendPacket(moe.caramel.daydream.packet.Packet)}를 사용해주세요
+     */
+    @Deprecated
+    public void sendRawPacket(@NotNull Object nmsPacket);
+
+    /**
+     * 플레이어에게 패킷을 전송합니다.
+     *
+     * @param packet 패킷 인스턴스
+     */
+    public void sendPacket(@NotNull moe.caramel.daydream.packet.Packet packet);
+    // Daydream end - Add Packet API
+
     // Paper start
     /**
      * Send a sign change. This fakes a sign change packet for a user at
