From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Fri, 6 Aug 2021 20:08:04 +0900
Subject: [PATCH] Add more Player API


diff --git a/src/main/java/io/papermc/paper/event/player/AbstractChatEvent.java b/src/main/java/io/papermc/paper/event/player/AbstractChatEvent.java
index a0fd845bc9b2540c398fe1dbbf821803a7017a28..91c0a765ac78e076aebbf2b4f5aa27b86e408aab 100644
--- a/src/main/java/io/papermc/paper/event/player/AbstractChatEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/AbstractChatEvent.java
@@ -27,6 +27,38 @@ public abstract class AbstractChatEvent extends PlayerEvent implements Cancellab
     private Component message;
 
     private boolean cancelled;
+    // Daydream start - Add more Player API (Improve Chat System)
+    private net.kyori.adventure.chat.ChatType chatType = null;
+
+    /**
+     * Get the player message wrapper.
+     *
+     * @return player message wrapper
+     */
+    @NotNull
+    public moe.caramel.daydream.player.PlayerMessage playerMessage() {
+        return (moe.caramel.daydream.player.PlayerMessage) signedMessage;
+    }
+
+    /**
+     * 채팅 포맷을 가져옵니다.
+     *
+     * @return 채팅 포맷
+     */
+    @org.jetbrains.annotations.Nullable
+    public net.kyori.adventure.chat.ChatType chatType() {
+        return chatType;
+    }
+
+    /**
+     * 채팅 포맷을 설정합니다.
+     *
+     * @param chatType 채팅 포맷
+     */
+    public void chatType(final @NotNull net.kyori.adventure.chat.ChatType chatType) {
+        this.chatType = chatType;
+    }
+    // Daydream end - Add more Player API (Improve Chat System)
 
     AbstractChatEvent(final boolean async, final @NotNull Player player, final @NotNull Set<Audience> viewers, final @NotNull ChatRenderer renderer, final @NotNull Component message, final @NotNull Component originalMessage, final @NotNull SignedMessage signedMessage) {
         super(player, async);
diff --git a/src/main/java/io/papermc/paper/event/player/ChatEvent.java b/src/main/java/io/papermc/paper/event/player/ChatEvent.java
index 7411f58f9f36beaadcc47c2264a4af313956ee03..201fe24d393beb8d0be4c4212aff56439076edc9 100644
--- a/src/main/java/io/papermc/paper/event/player/ChatEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/ChatEvent.java
@@ -28,6 +28,13 @@ public final class ChatEvent extends AbstractChatEvent {
         super(false, player, viewers, renderer, message, originalMessage, signedMessage);
     }
 
+    // Daydream start - Add more Player API (Improve Chat System)
+    @Override
+    public @NotNull moe.caramel.daydream.player.PlayerMessage playerMessage() {
+        throw new UnsupportedOperationException("Async Only");
+    }
+    // Daydream end - Add more Player API (Improve Chat System)
+
     @NotNull
     @Override
     public HandlerList getHandlers() {
diff --git a/src/main/java/moe/caramel/daydream/event/player/AsyncPlayerDataPreLoadEvent.java b/src/main/java/moe/caramel/daydream/event/player/AsyncPlayerDataPreLoadEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..96b35864b50695c27f22005aa5581e5c2bc38735
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/player/AsyncPlayerDataPreLoadEvent.java
@@ -0,0 +1,76 @@
+package moe.caramel.daydream.event.player;
+
+import com.destroystokyo.paper.profile.PlayerProfile;
+import com.mojang.authlib.GameProfile;
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+import java.net.InetAddress;
+import java.util.UUID;
+
+/**
+ * 비동기 플레이어 데이터 사전 로드 이벤트
+ * <p>
+ * {@link org.bukkit.event.player.AsyncPlayerPreLoginEvent} 호출 이후에
+ * 플레이어의 {@link GameProfile}이 완성되면 호출됩니다.
+ * </p>
+ */
+public abstract class AsyncPlayerDataPreLoadEvent extends Event {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+    public @NotNull HandlerList getHandlers() { return HANDLER_LIST; }
+    public static @NotNull HandlerList getHandlerList() { return HANDLER_LIST; }
+
+    @ApiStatus.Internal
+    public AsyncPlayerDataPreLoadEvent() {
+        super(true);
+    }
+
+    /**
+     * 플레이어의 프로필을 가져옵니다.
+     *
+     * @return 플레이어의 프로필
+     */
+    @NotNull
+    public abstract GameProfile getGameProfile();
+
+    /**
+     * 플레이어의 프로필을 가져옵니다.
+     *
+     * @deprecated 메서드를 호출할 때마다 새로운 프로필 미러가 생성됩니다.
+     * {@link #getGameProfile()}를 사용하세요.
+     * @return 플레이어의 프로필
+     */
+    @NotNull
+    @Deprecated
+    public abstract PlayerProfile getProfile();
+
+    /**
+     * 플레이어의 이름을 가져옵니다.
+     *
+     * @return 플레이어의 이름
+     */
+    @NotNull
+    public final String getName() {
+        return getGameProfile().getName();
+    }
+
+    /**
+     * 플레이어의 UUID를 가져옵니다.
+     *
+     * @return 플레이어의 UUID
+     */
+    @NotNull
+    public final UUID getUniqueId() {
+        return getGameProfile().getId();
+    }
+
+    /**
+     * 플레이어의 IP 주소를 가져옵니다.
+     *
+     * @return 플레이어의 IP 주소
+     */
+    @NotNull
+    public abstract InetAddress getAddress();
+}
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 7c56182acaf827f4b1a986a61cea8e9960604c98..83517098f9523c6c9d6a20991297d1e71f3aa9a8 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -1998,6 +1998,22 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      */
     public void setAllowFlight(boolean flight);
 
+    // Daydream start - Add more Player API
+    /**
+     * FOV 크기를 가져옵니다.
+     *
+     * @return FOV 크기 (기본 값: {@code 1.0f})
+     */
+    public float getFovScale();
+
+    /**
+     * FOV 크기를 설정합니다.
+     *
+     * @param fov FOV 크기
+     */
+    public void setFovScale(final float fov);
+    // Daydream end - Add more Player API
+
     // Paper start - flying fall damage
     /**
      * Allows you to enable fall damage while {@link #getAllowFlight()} is {@code true}
@@ -3459,6 +3475,16 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     }
     // Paper end
 
+    // Daydream start - Add more Player API (Expose Game Profile)
+    /**
+     * Gets this player's game profile.
+     *
+     * @return player's game profile object
+     */
+    @NotNull
+    com.mojang.authlib.GameProfile getProfile();
+    // Daydream end - Add more Player API (Expose Game Profile)
+
     // Paper start - Player Profile API
     /**
      * Gets a copy of this players profile
diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
index ae02788536d0c6736aba4ccf812844df4f9789f1..6b900914f66b0adb6f1b30dadf9ef7cf95d703c7 100644
--- a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
+++ b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
@@ -288,6 +288,29 @@ public class AsyncPlayerPreLoginEvent extends Event {
     }
     // Paper end
 
+    // Daydream start - Add more Player API (Initial locale)
+    private java.util.Locale initialLocale;
+
+    /**
+     * 플레이어의 초기 언어를 가져옵니다.
+     *
+     * @return 플레이어의 초기 언어
+     */
+    @org.jetbrains.annotations.Nullable
+    public java.util.Locale initialLocale() {
+        return initialLocale;
+    }
+
+    /**
+     * 플레이어의 초기 언어를 설정합니다.
+     *
+     * @param initialLocale 플레이어의 초기 언어
+     */
+    public void initialLocale(final @org.jetbrains.annotations.Nullable java.util.Locale initialLocale) {
+        this.initialLocale = initialLocale;
+    }
+    // Daydream end - Add more Player API (Initial locale)
+
     /**
      * Gets if this connection has been transferred from another server.
      *
