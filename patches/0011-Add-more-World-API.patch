From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Sun, 8 Aug 2021 22:10:59 +0900
Subject: [PATCH] Add more World API


diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
index 97f97ea5c6aa513c439f86a9c82821e0f7d9cd1e..39a67ecd45de8a3700bb20c40e6c1a38dba233a3 100644
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -3397,6 +3397,38 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      */
     void playSound(@NotNull Location location, @NotNull String sound, @NotNull SoundCategory category, float volume, float pitch);
 
+    // Daydream start - Add more World API (Sound)
+    /**
+     * Play a Sound at the provided Location in the World.
+     * <p>
+     * This function will fail silently if Location or Sound are null.
+     *
+     * @param except The except player
+     * @param location The location to play the sound
+     * @param sound The sound to play
+     * @param category the category of the sound
+     * @param volume The volume of the sound
+     * @param pitch The pitch of the sound
+     */
+    void playSound(@NotNull Player except, @NotNull Location location, @NotNull Sound sound, @NotNull SoundCategory category, float volume, float pitch);
+
+    /**
+     * Play a Sound at the provided Location in the World.
+     * <p>
+     * This function will fail silently if Location or Sound are null. No sound
+     * will be heard by the players if their clients do not have the respective
+     * sound for the value passed.
+     *
+     * @param except The except player
+     * @param location The location to play the sound
+     * @param sound The internal sound name to play
+     * @param category The category of the sound
+     * @param volume The volume of the sound
+     * @param pitch The pitch of the sound
+     */
+    void playSound(@NotNull Player except, @NotNull Location location, @NotNull String sound, @NotNull SoundCategory category, float volume, float pitch);
+    // Daydream end - Add more World API (Sound)
+
     /**
      * Play a Sound at the provided Location in the World. For sounds with multiple
      * variations passing the same seed will always play the same variation.
diff --git a/src/main/java/org/bukkit/block/Block.java b/src/main/java/org/bukkit/block/Block.java
index 8a842840e1a2652a6356d4a56e4749a5ba36e902..385e8454987046850a22a790eae27120770d25c8 100644
--- a/src/main/java/org/bukkit/block/Block.java
+++ b/src/main/java/org/bukkit/block/Block.java
@@ -590,6 +590,20 @@ public interface Block extends Metadatable, Translatable, net.kyori.adventure.tr
      */
     boolean breakNaturally(@NotNull ItemStack tool, boolean triggerEffect, boolean dropExperience);
 
+    // Daydream start - Add more World API (Block)
+    /**
+     * Breaks the block and spawns items as if a player had digged it with a
+     * specific tool
+     *
+     * @param tool The tool or item in hand used for digging
+     * @param triggerEffect Play the block break particle effect and sound
+     * @param dropExperience drop exp if the block normally does so
+     * @param dropItem Item Drop
+     * @return true if the block was destroyed
+     */
+    boolean breakNaturally(@NotNull ItemStack tool, boolean triggerEffect, boolean dropExperience, boolean dropItem);
+    // Daydream end - Add more World API (Block)
+
     /**
      * Causes the block to be ticked, this is different from {@link Block#randomTick()},
      * in that it is usually scheduled to occur, for example
diff --git a/src/main/java/org/bukkit/event/world/ChunkLoadEvent.java b/src/main/java/org/bukkit/event/world/ChunkLoadEvent.java
index 7873d387f337b1580d8ea1a85595c033c1d7787c..e14706ffe7cd756b261ddb22bacb450721be9aeb 100644
--- a/src/main/java/org/bukkit/event/world/ChunkLoadEvent.java
+++ b/src/main/java/org/bukkit/event/world/ChunkLoadEvent.java
@@ -13,8 +13,26 @@ public class ChunkLoadEvent extends ChunkEvent {
     private final boolean newChunk;
 
     public ChunkLoadEvent(@NotNull final Chunk chunk, final boolean newChunk) {
+        // Daydream start - Add more World API (Chunk)
+        this(chunk, newChunk, null);
+    }
+    private final Object rawLevelChunk;
+
+    /**
+     * NMS 청크를 가져옵니다.
+     *
+     * @return NMS 청크
+     */
+    @NotNull
+    public Object getRawLevelChunk() {
+        return rawLevelChunk;
+    }
+
+    public ChunkLoadEvent(@NotNull final Chunk chunk, final boolean newChunk, @NotNull final Object rawLevelChunk) {
+        // Daydream end - Add more World API (Chunk)
         super(chunk);
         this.newChunk = newChunk;
+        this.rawLevelChunk = rawLevelChunk; // Daydream - Add more World API (Chunk)
     }
 
     /**
diff --git a/src/main/java/org/bukkit/util/StructureSearchResult.java b/src/main/java/org/bukkit/util/StructureSearchResult.java
index 129c14ef4a89bcd14b31343a756773bde43d48ab..3126ac3adc0dc6c8681b02d45c14813575e9f102 100644
--- a/src/main/java/org/bukkit/util/StructureSearchResult.java
+++ b/src/main/java/org/bukkit/util/StructureSearchResult.java
@@ -29,4 +29,14 @@ public interface StructureSearchResult {
      */
     @NotNull
     Location getLocation();
+
+    // Daydream start - Add more World API (Structure)
+    /**
+     * 구조물의 경계 상자를 가져옵니다.
+     *
+     * @return 구조물의 경계 상자
+     */
+    @NotNull
+    BoundingBox getBoundingBox();
+    // Daydream end - Add more World API (Structure)
 }
