From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Thu, 22 Jul 2021 16:33:04 +0900
Subject: [PATCH] Add more World, BoundingBox, Block, BlockData API


diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
index 8efc8e0db687e1506eee2b19466ec917ba4edcdc..6538a68da18a47bef9b524c69526ce4a1f4f03d1 100644
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -86,6 +86,14 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
     public boolean lineOfSightExists(@NotNull Location from, @NotNull Location to);
     // Paper end
 
+    // Daydream start
+    /**
+     * @param boundingBox 체크할 범위의 BoundingBox Object
+     * @return BoundingBox Object 범위 내에 블록이 존재한다면 true 를 반환합니다.
+     */
+    boolean checkBoundingBoxRangeInBlock(@NotNull BoundingBox boundingBox);
+    // Daydream end
+
     /**
      * Gets the {@link Block} at the given coordinates
      *
diff --git a/src/main/java/org/bukkit/block/Block.java b/src/main/java/org/bukkit/block/Block.java
index 08e6f1741685f54506c8a4ff29bbd30f62cf8e45..f5af0f7f24cbd8b2d721d681e6d4719eefc46c06 100644
--- a/src/main/java/org/bukkit/block/Block.java
+++ b/src/main/java/org/bukkit/block/Block.java
@@ -526,6 +526,19 @@ public interface Block extends Metadatable {
     boolean breakNaturally(@NotNull ItemStack tool, boolean triggerEffect);
     // Paper end
 
+    // Daydream start
+    /**
+     * Breaks the block and spawns items as if a player had digged it with a
+     * specific tool
+     *
+     * @param tool The tool or item in hand used for digging
+     * @param triggerEffect Play the block break particle effect and sound
+     * @param dropItem Item Drop
+     * @return true if the block was destroyed
+     */
+    boolean breakNaturally(@NotNull ItemStack tool, boolean triggerEffect, boolean dropItem);
+    // Daydream end
+
     /**
      * Simulate bone meal application to this block (if possible).
      *
diff --git a/src/main/java/org/bukkit/block/data/BlockData.java b/src/main/java/org/bukkit/block/data/BlockData.java
index c35a60a2607b90a9dca82b03a7415f9b93156400..4d1575daf5c971a8b20706e65def59fcdd407842 100644
--- a/src/main/java/org/bukkit/block/data/BlockData.java
+++ b/src/main/java/org/bukkit/block/data/BlockData.java
@@ -103,4 +103,13 @@ public interface BlockData extends Cloneable {
      */
     @NotNull
     SoundGroup getSoundGroup();
+
+    // Daydream start
+    /**
+     * Returns if this block is air
+     *
+     * @return if this block is air
+     */
+    boolean isAir();
+    // Daydream end
 }
diff --git a/src/main/java/org/bukkit/util/BoundingBox.java b/src/main/java/org/bukkit/util/BoundingBox.java
index 01f80020b12c7b4637e5c22f7277a0268fe40cd2..7d86e526f8b5e7431a522f135f3f0ff7edaf3c24 100644
--- a/src/main/java/org/bukkit/util/BoundingBox.java
+++ b/src/main/java/org/bukkit/util/BoundingBox.java
@@ -533,6 +533,55 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
         return this.expand(blockFace.getDirection(), expansion);
     }
 
+    // Daydream start
+    /**
+     * NMS Method
+     *
+     * @param x x direction
+     * @param y y direction
+     * @param z z direction
+     * @return new bounding box
+     */
+    @NotNull
+    public BoundingBox grow(double x, double y, double z) {
+        return new BoundingBox(this.minX - x, this.minY - y, this.minZ - z, this.maxX + x, this.maxY + y, this.maxZ + z);
+    }
+
+    @NotNull
+    public BoundingBox grow(double grow) {
+        return this.grow(grow, grow, grow);
+    }
+
+    /**
+     * NMS Method
+     *
+     * @param x x direction
+     * @param y y direction
+     * @param z z direction
+     * @return new bounding box
+     */
+    @NotNull
+    public BoundingBox nmsExpand(double x, double y, double z) {
+        double minX = this.minX;
+        double minY = this.minY;
+        double minZ = this.minZ;
+        double maxX = this.maxX;
+        double maxY = this.maxY;
+        double maxZ = this.maxZ;
+
+        if (x < 0.0D) minX += x;
+        else if (x > 0.0D) maxX += x;
+
+        if (y < 0.0D) minY += y;
+        else if (y > 0.0D) maxY += y;
+
+        if (z < 0.0D) minZ += z;
+        else if (z > 0.0D) maxZ += z;
+
+        return new BoundingBox(minX, minY, minZ, maxX, maxY, maxZ);
+    }
+    // Daydream end
+
     /**
      * Expands this bounding box in the specified direction.
      * <p>
