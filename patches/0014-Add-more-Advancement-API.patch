From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Fri, 4 Feb 2022 11:18:12 +0900
Subject: [PATCH] Add more Advancement API


diff --git a/src/main/java/io/papermc/paper/advancement/AdvancementDisplay.java b/src/main/java/io/papermc/paper/advancement/AdvancementDisplay.java
index 59228f2e66e982feca77d9f962004ceacb648783..c1439f57443b2401acd590517ff1076ef7e607e7 100644
--- a/src/main/java/io/papermc/paper/advancement/AdvancementDisplay.java
+++ b/src/main/java/io/papermc/paper/advancement/AdvancementDisplay.java
@@ -100,6 +100,46 @@ public interface AdvancementDisplay {
      */
     Component displayName();
 
+    // Daydream start - Add more Advancement API
+    /**
+     * 발전 과제 디스플레이의 위치가 재계산되지 않도록 고정되어 있는지를 확인합니다.
+     *
+     * @return 고정 여부
+     */
+    boolean isPositionLocked();
+
+    /**
+     * 발전 과제 디스플레이의 위치가 재계산되지 않도록 고정되어 있는지를 설정합니다.
+     *
+     * @param lock 고정 여부
+     * @return this
+     */
+    AdvancementDisplay setPositionLock(final boolean lock);
+
+    /**
+     * 발전 과제 디스플레이의 X 위치를 가져옵니다.
+     *
+     * @return X 위치
+     */
+    float positionX();
+
+    /**
+     * 발전 과제 디스플레이의 Y 위치를 가져옵니다.
+     *
+     * @return Y 위치
+     */
+    float positionY();
+
+    /**
+     * 발전 과제 디스플레이의 위치를 설정합니다.
+     *
+     * @param x X 위치
+     * @param y Y 위치
+     * @return this
+     */
+    AdvancementDisplay position(final float x, final float y);
+    // Daydream end - Add more Advancement API
+
     /**
      * Defines how the {@link #icon()} appears in the advancements screen and
      * the color used with the {@link #title() advancement name}.
diff --git a/src/main/java/moe/caramel/daydream/advancement/AdvancementBuilder.java b/src/main/java/moe/caramel/daydream/advancement/AdvancementBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..d328a323a0a2bc93a93d8c24880ba5983dd76e01
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/advancement/AdvancementBuilder.java
@@ -0,0 +1,334 @@
+package moe.caramel.daydream.advancement;
+
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import io.papermc.paper.advancement.AdvancementDisplay;
+import moe.caramel.daydream.plugin.AdvancementProvider;
+import net.kyori.adventure.text.Component;
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.advancement.Advancement;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
+import org.jspecify.annotations.Nullable;
+import java.util.List;
+
+/**
+ * 발전 과제 빌더
+ */
+@NullMarked
+@ApiStatus.NonExtendable
+public interface AdvancementBuilder {
+
+    /**
+     * 발전 과제 프로바이더를 가져옵니다.
+     *
+     * @return 발전 과제 프로바이더
+     */
+    AdvancementProvider getProvider();
+
+    // ===========================
+
+    /**
+     * 기본 발전 과제 저장 구역
+     */
+    NamespacedKey MAIN_SAVE_SECTION = NamespacedKey.minecraft("main");
+
+    /**
+     * 발전 과제 저장 구역을 설정합니다.
+     * <p>기본 저장 구역인 {@link #MAIN_SAVE_SECTION}이 아닌 경우, 개발자가 진행도 저장을 직접 구현해야합니다.</p>
+     *
+     * @param section 저장 구역
+     * @return this
+     */
+    AdvancementBuilder saveSection(final NamespacedKey section);
+
+    // ===========================
+
+    /**
+     * 부모 발전 과제를 설정합니다.
+     *
+     * @param parent 부모 발전 과제
+     * @return this
+     */
+    AdvancementBuilder parent(final Advancement parent);
+
+    /**
+     * 이 발전 과제가 항상 보여야 되는 경우에 사용합니다.
+     *
+     * @return this
+     */
+    AdvancementBuilder alwaysVisible();
+
+    // ===========================
+
+    /**
+     * 이 발전 과제의 디스플레이를 설정합니다.
+     *
+     * @param icon 프레임에 표시되는 아이콘
+     * @param title 제목
+     * @param description 설명
+     * @param background 배경 텍스처 위치 (루트 발전 과제 전용)
+     * @param frame 프레임
+     * @param showToast 완료 시에 토스트를 출력해야 하는 경우 {@code true}
+     * @param announceChat 완료 시에 메시지를 보내야 하는 경우 {@code true}
+     * @param hidden 발전 과제가 숨겨진 경우 {@code true}
+     * @return this
+     */
+    default AdvancementBuilder display(
+        final Material icon, final Component title, final Component description,
+        final @Nullable NamespacedKey background, final AdvancementDisplay.Frame frame,
+        final boolean showToast, final boolean announceChat, final boolean hidden
+    ) {
+        return display(new ItemStack(icon), title, description, background, frame, showToast, announceChat, hidden);
+    }
+
+    /**
+     * 이 발전 과제의 디스플레이를 설정합니다.
+     *
+     * @param icon 프레임에 표시되는 아이콘
+     * @param title 제목
+     * @param description 설명
+     * @param background 배경 텍스처 위치 (루트 발전 과제 전용)
+     * @param frame 프레임
+     * @param showToast 완료 시에 토스트를 출력해야 하는 경우 {@code true}
+     * @param announceChat 완료 시에 메시지를 보내야 하는 경우 {@code true}
+     * @param hidden 발전 과제가 숨겨진 경우 {@code true}
+     * @return this
+     */
+    default AdvancementBuilder display(
+        final ItemStack icon, final Component title, final Component description,
+        final @Nullable NamespacedKey background, final AdvancementDisplay.Frame frame,
+        final boolean showToast, final boolean announceChat, final boolean hidden
+    ) {
+        this.display(getProvider().createDisplay(icon, title, description, background, frame, showToast, announceChat, hidden));
+        return this;
+    }
+
+    /**
+     * 이 발전 과제의 디스플레이를 고정된 위치로 설정합니다.
+     *
+     * @param icon 프레임에 표시되는 아이콘
+     * @param title 제목
+     * @param description 설명
+     * @param background 배경 텍스처 위치 (루트 발전 과제 전용)
+     * @param frame 프레임
+     * @param x 고정할 X 위치
+     * @param y 고정할 Y 위치
+     * @param showToast 완료 시에 토스트를 출력해야 하는 경우 {@code true}
+     * @param announceChat 완료 시에 메시지를 보내야 하는 경우 {@code true}
+     * @param hidden 발전 과제가 숨겨진 경우 {@code true}
+     * @return this
+     */
+    default AdvancementBuilder display(
+        final Material icon, final Component title, final Component description,
+        final @Nullable NamespacedKey background, final AdvancementDisplay.Frame frame,
+        final float x, final float y, final boolean showToast, final boolean announceChat, final boolean hidden
+    ) {
+        return display(new ItemStack(icon), title, description, background, frame, x, y, showToast, announceChat, hidden);
+    }
+
+    /**
+     * 이 발전 과제의 디스플레이를 고정된 위치로 설정합니다.
+     *
+     * @param icon 프레임에 표시되는 아이콘
+     * @param title 제목
+     * @param description 설명
+     * @param background 배경 텍스처 위치 (루트 발전 과제 전용)
+     * @param frame 프레임
+     * @param x 고정할 X 위치
+     * @param y 고정할 Y 위치
+     * @param showToast 완료 시에 토스트를 출력해야 하는 경우 {@code true}
+     * @param announceChat 완료 시에 메시지를 보내야 하는 경우 {@code true}
+     * @param hidden 발전 과제가 숨겨진 경우 {@code true}
+     * @return this
+     */
+    default AdvancementBuilder display(
+        final ItemStack icon, final Component title, final Component description,
+        final @Nullable NamespacedKey background, final AdvancementDisplay.Frame frame,
+        final float x, final float y, final boolean showToast, final boolean announceChat, final boolean hidden
+    ) {
+        this.display(getProvider()
+            .createDisplay(icon, title, description, background, frame, showToast, announceChat, hidden)
+            .setPositionLock(true)
+            .position(x, y));
+        return this;
+    }
+
+    /**
+     * 이 발전 과제의 디스플레이를 설정합니다.
+     *
+     * @param display 디스플레이
+     * @return this
+     */
+    AdvancementBuilder display(final AdvancementDisplay display);
+
+    // ===========================
+
+    /**
+     * 이 발전 과제의 보상을 설정합니다.
+     *
+     * @param experience 제공할 경험치
+     * @param loot 전리품 테이블 키
+     * @param recipes 레시피 키
+     * @param function 실행할 함수
+     * @return 발전 과제 보상
+     */
+    default AdvancementBuilder reward(
+        final int experience,
+        final List<NamespacedKey> loot, final List<NamespacedKey> recipes,
+        final @Nullable NamespacedKey function
+    ) {
+        return reward(this.getProvider().createReward(experience, loot, recipes, function));
+    }
+
+    /**
+     * 이 발전 과제의 보상을 설정합니다.
+     *
+     * @param reward 보상
+     * @return this
+     */
+    AdvancementBuilder reward(final AdvancementReward reward);
+
+    // ===========================
+
+    /**
+     * 카운트 타입 발전과제의 조건 (Magic value)
+     */
+    String COUNT_CRITERION = "#count";
+
+    /**
+     * 달성 기준을 추가합니다. 트리거는 JSON 형식입니다.
+     *
+     * @param name 달성 기준의 이름
+     * @param criterion JSON 예시 <pre>{@code {
+     *   "conditions": {
+     *     "player": [
+     *       {
+     *         "condition": "minecraft:entity_properties",
+     *         "entity": "this",
+     *         "predicate": {
+     *           "location": {
+     *             "biome": "minecraft:badlands"
+     *           }
+     *         }
+     *       }
+     *     ]
+     *   },
+     *   "trigger": "minecraft:location"
+     * }}</pre>
+     * @return this
+     */
+    AdvancementBuilder addCriterion(final String name, final JsonElement criterion);
+
+    /**
+     * 달성 기준을 추가합니다. 트리거는 Impossible 트리거로 고정됩니다.
+     *
+     * @param name 달성 기준의 이름
+     * @return this
+     */
+    AdvancementBuilder addImpossibleCriterion(final String name);
+
+    /**
+     * 사용자 지정 트리거를 사용한 달성 기준을 추가합니다.
+     *
+     * @param name 달성 기준의 이름
+     * @param key 사용자 지정 트리거 ID
+     * @return this
+     */
+    default AdvancementBuilder addCustomTriggerCriterion(final String name, final NamespacedKey key) {
+        return addCustomTriggerCriterion(name, key, null);
+    }
+
+    /**
+     * 사용자 지정 트리거를 사용한 달성 기준을 추가합니다.
+     *
+     * @param name 달성 기준의 이름
+     * @param key 사용자 지정 트리거 ID
+     * @param dataPredicate 데이터 매치 조건<pre>{@code [
+     *   {
+     *       "name": "player_name",
+     *       "type": "STRING_EQUAL",
+     *       "value": "Notch"
+     *   },
+     *   {
+     *       "name": "player_age",
+     *       "type": "INT_RANGE",
+     *       "value": {
+     *           "min": 10,
+     *           "max": 40
+     *       }
+     *   }
+     * ]}</pre>
+     * @return this
+     */
+    AdvancementBuilder addCustomTriggerCriterion(final String name, final NamespacedKey key, final @Nullable JsonElement dataPredicate);
+
+    /**
+     * 플레이어가 발전 과제를 완료하는 데 필요한 조건을 설정합니다.
+     *
+     * @param and {@code true}인 경우, 플레이어가 모든 기준을 완료해야합니다. ({@code false}인 경우, OR)
+     * @return this
+     */
+    AdvancementBuilder requirements(final boolean and);
+
+    /**
+     * 플레이어가 발전 과제를 완료하는 데 필요한 조건을 설정합니다.
+     *
+     * @param requirements 필요한 조건
+     * @return this
+     */
+    AdvancementBuilder requirements(final List<List<String>> requirements);
+
+    /**
+     * 이 발전 과제에 카운트를 사용합니다. 기준 설정이 필요하지 않습니다.
+     *
+     * @param count 최대 카운트
+     * @return this
+     */
+    AdvancementBuilder enableCount(final int count);
+
+    /**
+     * 이 발전 과제에 카운트를 사용합니다.
+     *
+     * @param count 최대 카운트
+     * @param triggerId 사용자 지정 트리거 ID
+     * @return this
+     */
+    AdvancementBuilder enableCount(final int count, final NamespacedKey triggerId);
+
+    /**
+     * 이 발전 과제에 카운트를 사용합니다.
+     *
+     * @param count 최대 카운트
+     * @param criterion JSON 예시 <pre>{@code {
+     *   "conditions": {
+     *     "player": [
+     *       {
+     *         "condition": "minecraft:entity_properties",
+     *         "entity": "this",
+     *         "predicate": {
+     *           "location": {
+     *             "biome": "minecraft:badlands"
+     *           }
+     *         }
+     *       }
+     *     ]
+     *   },
+     *   "trigger": "minecraft:location"
+     * }}</pre>
+     * @return this
+     */
+    AdvancementBuilder enableCount(final int count, final JsonElement criterion);
+
+    // ===========================
+
+    /**
+     * 발전 과제에 추가 JSON 데이터를 저장합니다.
+     *
+     * @param json JSON 데이터
+     * @return this
+     */
+    AdvancementBuilder extra(final @Nullable JsonObject json);
+}
diff --git a/src/main/java/moe/caramel/daydream/advancement/AdvancementFormat.java b/src/main/java/moe/caramel/daydream/advancement/AdvancementFormat.java
new file mode 100644
index 0000000000000000000000000000000000000000..d6f4673200e7b2d5f08b28d124f56e3ad4ac1519
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/advancement/AdvancementFormat.java
@@ -0,0 +1,68 @@
+package moe.caramel.daydream.advancement;
+
+import com.google.gson.JsonElement;
+import org.jspecify.annotations.NullMarked;
+import java.util.Objects;
+
+/**
+ * 발전 과제 데이터 저장 포맷
+ *
+ * @param <T> 타입
+ */
+@NullMarked
+public final class AdvancementFormat<T> {
+
+    /**
+     * Json (기본)
+     */
+    public static final AdvancementFormat<JsonElement> JSON = new AdvancementFormat<>("json", false);
+    /**
+     * 압축된 Json
+     */
+    public static final AdvancementFormat<JsonElement> COMPRESSED_JSON = new AdvancementFormat<>("compressed_json", true);
+    /**
+     * NBT
+     */
+    public static final AdvancementFormat<byte[]> NBT = new AdvancementFormat<>("nbt", false);
+    /**
+     * 압축된 NBT
+     */
+    public static final AdvancementFormat<byte[]> COMPRESSED_NBT = new AdvancementFormat<>("compressed_nbt", true);
+    /**
+     * 진행도 맵
+     */
+    public static final AdvancementFormat<ProgressMap> PROGRESS_MAP = new AdvancementFormat<>("progress_map", false);
+
+    private final String name;
+    private final boolean compressed;
+
+    private AdvancementFormat(final String name, final boolean compressed) {
+        this.name = name;
+        this.compressed = compressed;
+    }
+
+    /**
+     * 요구하는 데이터 형식이 압축된 데이터 형식인지 확인합니다.
+     *
+     * @return 만약 {@code true}인 경우 압축된 데이터를 요구합니다
+     */
+    public boolean isCompressed() {
+        return compressed;
+    }
+
+    @Override
+    public boolean equals(final Object o) {
+        if (this == o) {
+            return true;
+        } else if (o instanceof AdvancementFormat<?> that) {
+            return (compressed == that.compressed) && Objects.equals(name, that.name);
+        } else {
+            return false;
+        }
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(name, compressed);
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/advancement/AdvancementReward.java b/src/main/java/moe/caramel/daydream/advancement/AdvancementReward.java
new file mode 100644
index 0000000000000000000000000000000000000000..58fe348a02593bb8bcb80106e816d07a2b4cdbfc
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/advancement/AdvancementReward.java
@@ -0,0 +1,58 @@
+package moe.caramel.daydream.advancement;
+
+import org.bukkit.NamespacedKey;
+import org.bukkit.inventory.Recipe;
+import org.bukkit.loot.LootTable;
+import org.jetbrains.annotations.Unmodifiable;
+import org.jspecify.annotations.NullMarked;
+import org.jspecify.annotations.Nullable;
+import java.util.List;
+
+/**
+ * 발전 과제 보상
+ */
+@NullMarked
+public interface AdvancementReward {
+
+    /**
+     * 플레이어가 받게 될 경험치를 가져옵니다.
+     *
+     * @return 경험치
+     */
+    int experience();
+
+    /**
+     * 전리품 테이블의 키 목록을 가져옵니다.
+     *
+     * @return 전리품 테이블의 키 목록
+     */
+    @Unmodifiable List<NamespacedKey> lootKeys();
+
+    /**
+     * 전리품 테이블 목록을 가져옵니다.
+     *
+     * @return 전리품 테이블 목록
+     */
+    @Unmodifiable List<LootTable> loot();
+
+    /**
+     * 레시피의 키 목록을 가져옵니다.
+     *
+     * @return 레시피의 키 목록
+     */
+    @Unmodifiable List<NamespacedKey> recipeKeys();
+
+    /**
+     * 레시피 목록을 가져옵니다.
+     *
+     * @return 레시피 목록
+     */
+    @Unmodifiable List<Recipe> recipes();
+
+    /**
+     * 실행될 함수의 키를 가져옵니다.
+     *
+     * @return 실행될 함수의 키
+     */
+    @Nullable NamespacedKey function();
+}
diff --git a/src/main/java/moe/caramel/daydream/advancement/PlayerAdvancementData.java b/src/main/java/moe/caramel/daydream/advancement/PlayerAdvancementData.java
new file mode 100644
index 0000000000000000000000000000000000000000..56280d54120ba584972e0dce6ca4ea82394c96ef
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/advancement/PlayerAdvancementData.java
@@ -0,0 +1,62 @@
+package moe.caramel.daydream.advancement;
+
+import moe.caramel.daydream.advancement.progress.CriterionProgress;
+import org.bukkit.NamespacedKey;
+import org.jspecify.annotations.NullMarked;
+import org.jspecify.annotations.Nullable;
+import java.time.Instant;
+import java.util.Map;
+
+/**
+ * 플레이어 발전 과제 데이터
+ */
+@NullMarked
+public interface PlayerAdvancementData {
+
+    /**
+     * 새로운 진행도 맵을 생성합니다.
+     *
+     * @see #loadFromData(AdvancementFormat, Object)
+     * @return 진행도 맵
+     */
+    ProgressMap createProgressMap();
+
+    /**
+     * 현재의 진행도 맵을 가져옵니다.
+     *
+     * @param section 발전 과제 저장 위치
+     * @return 현재의 진행도 맵
+     */
+    ProgressMap asProgressMap(final NamespacedKey section);
+
+    /**
+     * 새로운 기준 진행도를 생성합니다.
+     *
+     * @see ProgressMap#newProgress(NamespacedKey, Map)
+     * @param obtainedTime 기준 달성 시간 ({@code null}인 경우 달성하지 않음)
+     * @return 기준 진행도
+     */
+    CriterionProgress createCriterionProgress(final @Nullable Instant obtainedTime);
+
+    /**
+     * 데이터에서 발전 과제 진행도를 로드합니다.
+     *
+     * @param format 발전 과제 데이터 저장 포맷
+     * @param data 진행도 데이터
+     * @param <T> 데이터의 타입
+     * @throws Exception 일부 데이터는 읽는 도중 예외가 던져질 수 있습니다.
+     */
+    <T> void loadFromData(final AdvancementFormat<T> format, final T data) throws Exception;
+
+    /**
+     * 발전 과제 진행도를 직렬화된 데이터로 변환합니다.
+     *
+     * @see moe.caramel.daydream.event.player.PlayerAdvancementSaveEvent#getData()
+     * @param format 발전 과제 데이터 저장 포맷
+     * @param progress 진행도 데이터
+     * @return 진행도 데이터
+     * @param <T> 데이터의 타입
+     * @throws Exception 일부 데이터는 저장 도중 예외가 던져질 수 있습니다.
+     */
+    <T> T saveToData(final AdvancementFormat<T> format, final ProgressMap progress) throws Exception;
+}
diff --git a/src/main/java/moe/caramel/daydream/advancement/ProgressMap.java b/src/main/java/moe/caramel/daydream/advancement/ProgressMap.java
new file mode 100644
index 0000000000000000000000000000000000000000..4725ffb0ff41d54d4973d607d100ae822421b467
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/advancement/ProgressMap.java
@@ -0,0 +1,52 @@
+package moe.caramel.daydream.advancement;
+
+import moe.caramel.daydream.advancement.progress.CountableProgress;
+import moe.caramel.daydream.advancement.progress.CriterionProgress;
+import moe.caramel.daydream.advancement.progress.CriteriaProgress;
+import org.bukkit.NamespacedKey;
+import org.jetbrains.annotations.UnmodifiableView;
+import org.jspecify.annotations.NullMarked;
+import org.jspecify.annotations.Nullable;
+import java.time.Instant;
+import java.util.Map;
+import java.util.function.BiConsumer;
+
+/**
+ * 플레이어 발전 과제 진행도 맵
+ */
+@NullMarked
+public interface ProgressMap {
+
+    /**
+     * 진행도 맵의 데이터를 가져옵니다.
+     *
+     * @return 수정할 수 없는 데이터 맵
+     */
+    @UnmodifiableView Map<NamespacedKey, CriteriaProgress> getData();
+
+    /**
+     * 진행도 맵에 대하여 반복을 실행합니다.
+     *
+     * @param action 수행할 작업
+     */
+    void iterator(final BiConsumer<NamespacedKey, CriteriaProgress> action);
+
+    /**
+     * 주어진 발전 과제에 대하여 새로운 진행도를 생성하고 추가합니다.
+     *
+     * @param key 대상 발전 과제의 키
+     * @param criteria 기준 달성 목록
+     * @return 생성된 진행도
+     */
+    CriteriaProgress newProgress(final NamespacedKey key, final Map<String, CriterionProgress> criteria);
+
+    /**
+     * 주어진 발전 과제에 대하여 새로운 카운트 형식의 진행도를 생성하고 추가합니다.
+     *
+     * @param key 대상 발전 과제의 키
+     * @param currentCount 현재 카운트
+     * @param obtainedTime 기준 달성 시간 ({@code null}인 경우 달성하지 않음)
+     * @return 생성된 카운트 형식의 진행도
+     */
+    CountableProgress newCountProgress(final NamespacedKey key, final int currentCount, final @Nullable Instant obtainedTime);
+}
diff --git a/src/main/java/moe/caramel/daydream/advancement/progress/CountableProgress.java b/src/main/java/moe/caramel/daydream/advancement/progress/CountableProgress.java
new file mode 100644
index 0000000000000000000000000000000000000000..2a26693dc8161dec6e94f8c26e9baec2b8ee0e18
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/advancement/progress/CountableProgress.java
@@ -0,0 +1,14 @@
+package moe.caramel.daydream.advancement.progress;
+
+/**
+ * 카운트 형식의 발전 과제 진행도
+ */
+public interface CountableProgress extends CriteriaProgress {
+
+    /**
+     * 현재 카운트를 가져옵니다.
+     *
+     * @return 현재 카운트
+     */
+    int getCurrentCount();
+}
diff --git a/src/main/java/moe/caramel/daydream/advancement/progress/CriteriaProgress.java b/src/main/java/moe/caramel/daydream/advancement/progress/CriteriaProgress.java
new file mode 100644
index 0000000000000000000000000000000000000000..da5f54828cd0ad73e74c78550415811016bc6b90
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/advancement/progress/CriteriaProgress.java
@@ -0,0 +1,18 @@
+package moe.caramel.daydream.advancement.progress;
+
+/**
+ * 발전 과제 진행도 ({@link CriterionProgress}의 집합)
+ * <p>
+ * {@link org.bukkit.advancement.AdvancementProgress}와 동일하지만
+ * NMS를 직접 래핑하므로 제한된 작업만 가능합니다.
+ * </p>
+ */
+public interface CriteriaProgress {
+
+    /**
+     * 발전 과제를 달성했는지 여부를 가져옵니다.
+     *
+     * @return 발전 과제 달성 여부
+     */
+    boolean isProgressDone();
+}
diff --git a/src/main/java/moe/caramel/daydream/advancement/progress/CriterionProgress.java b/src/main/java/moe/caramel/daydream/advancement/progress/CriterionProgress.java
new file mode 100644
index 0000000000000000000000000000000000000000..5f7bda5dd47a84555e44820a059ef241080ad92c
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/advancement/progress/CriterionProgress.java
@@ -0,0 +1,38 @@
+package moe.caramel.daydream.advancement.progress;
+
+import org.jspecify.annotations.NullMarked;
+import org.jspecify.annotations.Nullable;
+import java.time.Instant;
+
+/**
+ * 기준 진행도
+ *
+ * @see CriteriaProgress
+ */
+@NullMarked
+public interface CriterionProgress {
+
+    /**
+     * 기준을 달성했는지 여부를 가져옵니다.
+     *
+     * @return 기준 달성 여부
+     */
+    boolean isProgressDone();
+
+    /**
+     * 기준을 달성한 것으로 변경합니다.
+     */
+    void setGrant();
+
+    /**
+     * 기준을 달성하지 않은 것으로 변경합니다.
+     */
+    void setRevoke();
+
+    /**
+     * 기준의 달성 시간을 가져옵니다.
+     *
+     * @return 기준 달성 시간
+     */
+    @Nullable Instant getObtainedTime();
+}
diff --git a/src/main/java/moe/caramel/daydream/event/player/AsyncPlayerDataPreLoadEvent.java b/src/main/java/moe/caramel/daydream/event/player/AsyncPlayerDataPreLoadEvent.java
index 18cd85f6c3a8eb7be560b5ca0b46dbfef6e9e6c2..d03c4521931268c9c94722a5e340ff2f1711177c 100644
--- a/src/main/java/moe/caramel/daydream/event/player/AsyncPlayerDataPreLoadEvent.java
+++ b/src/main/java/moe/caramel/daydream/event/player/AsyncPlayerDataPreLoadEvent.java
@@ -95,6 +95,19 @@ public abstract class AsyncPlayerDataPreLoadEvent extends Event {
         this.disconnectMessage = disconnectMessage;
     }
 
+    // Daydream start - Add more Advancement API
+    /**
+     * 플레이어 발전 과제 데이터를 생성하고 가져옵니다.
+     * <p>
+     * 플레이어의 로그인이 완료되기 전에 생성되기에 중복 로그인으로
+     * 인한 데이터 증발 등 데이터 관리에 주의해주세요.
+     * </p>
+     *
+     * @return 플레이어 발전 과제 데이터 (이미 생성된 경우 기존의 인스턴스를 가져옴)
+     */
+    public abstract moe.caramel.daydream.advancement.PlayerAdvancementData createAndGetAdvancements();
+    // Daydream end - Add more Advancement API
+
     //<editor-fold desc="Bukkit Event Handler (Internal)" defaultstate="collapsed">
     private static final HandlerList HANDLER_LIST = new HandlerList();
 
diff --git a/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementPreLoadEvent.java b/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementPreLoadEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..82cd55258366de38a1a7c424c56a1e9435bc1b51
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementPreLoadEvent.java
@@ -0,0 +1,132 @@
+package moe.caramel.daydream.event.player;
+
+import moe.caramel.daydream.advancement.AdvancementFormat;
+import moe.caramel.daydream.advancement.PlayerAdvancementData;
+import moe.caramel.daydream.advancement.ProgressMap;
+import moe.caramel.daydream.advancement.progress.CriterionProgress;
+import org.bukkit.NamespacedKey;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
+import org.jspecify.annotations.Nullable;
+import java.time.Instant;
+
+/**
+ * 플레이어의 발전 과제 데이터를 로드하기 직전에 호출됩니다.
+ * <p>
+ * 일반적으로 {@link org.bukkit.event.player.PlayerJoinEvent} 이전에 호출됩니다.
+ * </p>
+ */
+@NullMarked
+public final class PlayerAdvancementPreLoadEvent extends PlayerEvent implements PlayerAdvancementData, Cancellable {
+
+    private final PlayerAdvancementData provider;
+    private final Reason reason;
+    private boolean cancelled;
+
+    @ApiStatus.Internal
+    public PlayerAdvancementPreLoadEvent(final Player who, final PlayerAdvancementData provider, final Reason reason) {
+        super(who);
+        this.provider = provider;
+        this.reason = reason;
+    }
+
+    /**
+     * 플레이어 발전 과제 데이터를 가져옵니다.
+     *
+     * @return 플레이어 발전 과제 데이터
+     */
+    public PlayerAdvancementData getData() {
+        return provider;
+    }
+
+    /**
+     * 이벤트 호출 사유를 가져옵니다.
+     *
+     * @return 이벤트 호출 사유
+     */
+    public Reason getReason() {
+        return reason;
+    }
+
+    /**
+     * 발전 과제 데이터를 파일에서 읽어오는 바닐라 동작을 취소할지 여부를 가져옵니다.
+     *
+     * @return 바닐라 동작 취소 여부
+     */
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    /**
+     * 발전 과제 데이터를 파일에서 읽어오는 바닐라 동작을 취소할지 여부를 결정합니다.
+     *
+     * @param cancel 바닐라 동작 취소 여부
+     */
+    @Override
+    public void setCancelled(final boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    /**
+     * 이벤트 호출 사유
+     */
+    public enum Reason {
+        /**
+         * 플레이어 접속
+         */
+        PLAYER_JOIN,
+        /**
+         * 서버 리소스 리로드
+         */
+        SERVER_RESOURCE_RELOAD,
+        /**
+         * 알 수 없는 이유
+         */
+        UNKNOWN
+    }
+
+    //<editor-fold desc="Provider wrapper" defaultstate="collapsed">
+    @Override
+    public ProgressMap createProgressMap() {
+        return provider.createProgressMap();
+    }
+
+    @Override
+    public ProgressMap asProgressMap(final NamespacedKey section) {
+        return provider.asProgressMap(section);
+    }
+
+    @Override
+    public CriterionProgress createCriterionProgress(final @Nullable Instant obtainedTime) {
+        return provider.createCriterionProgress(obtainedTime);
+    }
+
+    @Override
+    public <T> void loadFromData(final AdvancementFormat<T> format, final T data) throws Exception {
+        this.provider.loadFromData(format, data);
+    }
+
+    @Override
+    public <T> T saveToData(final AdvancementFormat<T> format, final ProgressMap progress) throws Exception {
+        return provider.saveToData(format, progress);
+    }
+    //</editor-fold>
+
+    //<editor-fold desc="Bukkit Event Handler (Internal)" defaultstate="collapsed">
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+    //</editor-fold>
+}
diff --git a/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementSaveEvent.java b/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementSaveEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..b4d9ef8faaaa60243e1edfb7940c37532d38eb1c
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementSaveEvent.java
@@ -0,0 +1,132 @@
+package moe.caramel.daydream.event.player;
+
+import moe.caramel.daydream.advancement.AdvancementFormat;
+import moe.caramel.daydream.advancement.PlayerAdvancementData;
+import moe.caramel.daydream.advancement.ProgressMap;
+import org.bukkit.NamespacedKey;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
+
+/**
+ * 플레이어 발전 과제 데이터가 저장될 때 호출됩니다.
+ */
+@NullMarked
+public final class PlayerAdvancementSaveEvent extends PlayerEvent implements Cancellable {
+
+    private final NamespacedKey section;
+    private final ProgressMap progress;
+    private final Reason reason;
+    private boolean cancelled;
+
+    @ApiStatus.Internal
+    public PlayerAdvancementSaveEvent(final Player who, final NamespacedKey section, final ProgressMap progress, final Reason reason) {
+        super(who);
+        this.section = section;
+        this.progress = progress;
+        this.reason = reason;
+    }
+
+    /**
+     * 플레이어의 발전 과제 데이터 인스턴스를 가져옵니다.
+     *
+     * @return 발전 과제 데이터 인스턴스
+     */
+    public PlayerAdvancementData getAdvancementData() {
+        return player.getAdvancementData();
+    }
+
+    /**
+     * 발전 과제 진행도를 직렬화된 데이터로 변환합니다.
+     *
+     * @param format 발전 과제 데이터 저장 포맷
+     * @return 진행도 데이터
+     * @param <T> 데이터의 타입
+     * @throws Exception 일부 데이터는 저장 도중 예외가 던져질 수 있습니다.
+     */
+    public <T> T saveToData(final AdvancementFormat<T> format) throws Exception {
+        return getAdvancementData().saveToData(format, this.getData());
+    }
+
+    /**
+     * 발전 과제의 저장 구역을 가져옵니다.
+     * <p>실제 파일로는 바닐라 메인 구역 데이터만 저장됩니다.</p>
+     *
+     * @return 저장 구역
+     */
+    public NamespacedKey getSection() {
+        return section;
+    }
+
+    /**
+     * 저장될 발전 과제 데이터를 가져옵니다.
+     *
+     * @return 발전 과제 데이터
+     */
+    public ProgressMap getData() {
+        return progress;
+    }
+
+    /**
+     * 이벤트 호출 사유를 가져옵니다.
+     *
+     * @return 이벤트 호출 사유
+     */
+    public Reason getReason() {
+        return reason;
+    }
+
+    /**
+     * 발전 과제 데이터를 파일에 저장하는 바닐라 동작을 취소할지 여부를 가져옵니다.
+     *
+     * @return 바닐라 동작 취소 여부
+     */
+    @Override
+    public boolean isCancelled() {
+        return this.cancelled;
+    }
+
+    /**
+     * 발전 과제 데이터를 파일에 저장하는 바닐라 동작을 취소할지 여부를 결정합니다.
+     *
+     * @param cancel 바닐라 동작 취소 여부
+     */
+    @Override
+    public void setCancelled(final boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    /**
+     * 이벤트 호출 사유
+     */
+    public enum Reason {
+        /**
+         * 일반 저장
+         */
+        GENERAL,
+        /**
+         * 서버 리소스 리로드
+         */
+        SERVER_RESOURCE_RELOAD,
+        /**
+         * 알 수 없는 이유
+         */
+        UNKNOWN
+    }
+
+    //<editor-fold desc="Bukkit Event Handler (Internal)" defaultstate="collapsed">
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+    //</editor-fold>
+}
diff --git a/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementScreenEvent.java b/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementScreenEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..12f0080f7f4af5ea48a7de21128305583dc497bf
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementScreenEvent.java
@@ -0,0 +1,94 @@
+package moe.caramel.daydream.event.player;
+
+import org.bukkit.NamespacedKey;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
+import org.jspecify.annotations.Nullable;
+
+/**
+ * 플레이어가 발전 과제 화면을 열거나 닫았을 경우 호출됩니다.
+ */
+@NullMarked
+public final class PlayerAdvancementScreenEvent extends PlayerEvent implements Cancellable {
+
+    private final Action action;
+    private final @Nullable NamespacedKey key;
+    private boolean cancelled;
+
+    @ApiStatus.Internal
+    public PlayerAdvancementScreenEvent(final Player player, final Action action, final @Nullable NamespacedKey key) {
+        super(player);
+        this.action = action;
+        this.key = key;
+    }
+
+    /**
+     * 발전 과제 화면을 닫을지의 여부를 가져옵니다.
+     *
+     * @return {@code true}인 경우 스크린을 닫습니다.
+     * {@link Action#CLOSED_SCREEN}인 경우 작동하지 않습니다.
+     */
+    @Override
+    public boolean isCancelled() {
+        return this.cancelled;
+    }
+
+    /**
+     * 스크린을 닫을지의 여부를 가져옵니다.
+     * 인수가 {@code true}인 경우 스크린을 닫으나, {@link Action#CLOSED_SCREEN}인 경우 작동하지 않습니다.
+     */
+    @Override
+    public void setCancelled(final boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    /**
+     * 플레이어가 요청한 액션을 가져옵니다.
+     *
+     * @return 플레이어의 요청
+     */
+    public Action getAction() {
+        return action;
+    }
+
+    /**
+     * 플레이어가 요청한 탭의 {@link NamespacedKey}를 가져옵니다.
+     *
+     * @return 플레이어가 요청한 탭의 {@link NamespacedKey}.
+     * <p>{@link Action#CLOSED_SCREEN}인 경우 {@code null}을 반환합니다.</p>
+     */
+    public @Nullable NamespacedKey getKey() {
+        return key;
+    }
+
+    /**
+     * 발전 과제 요청 목록
+     */
+    public enum Action {
+        /**
+         * 새로운 발전 과제 탭을 오픈하는 경우
+         */
+        OPENED_TAB,
+        /**
+         * 발전 과제 화면을 닫는 경우
+         */
+        CLOSED_SCREEN
+    }
+
+    //<editor-fold desc="Bukkit Event Handler (Internal)" defaultstate="collapsed">
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+    //</editor-fold>
+}
diff --git a/src/main/java/moe/caramel/daydream/plugin/AdvancementProvider.java b/src/main/java/moe/caramel/daydream/plugin/AdvancementProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..d06d8ee8ad4400e3ce2ab5756f310bcbdd61783d
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/plugin/AdvancementProvider.java
@@ -0,0 +1,106 @@
+package moe.caramel.daydream.plugin;
+
+import com.google.gson.JsonElement;
+import io.papermc.paper.advancement.AdvancementDisplay;
+import moe.caramel.daydream.advancement.AdvancementBuilder;
+import moe.caramel.daydream.advancement.AdvancementReward;
+import net.kyori.adventure.text.Component;
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.advancement.Advancement;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
+import org.jspecify.annotations.Nullable;
+import java.util.List;
+
+/**
+ * Advancement Provider
+ */
+@NullMarked
+@ApiStatus.NonExtendable
+public interface AdvancementProvider {
+
+    /**
+     * 발전 과제 빌더를 생성합니다.
+     *
+     * @return 발전 과제 빌더
+     */
+    AdvancementBuilder createBuilder();
+
+    /**
+     * 발전 과제 디스플레이를 생성합니다.
+     *
+     * @param icon 프레임에 표시되는 아이콘
+     * @param title 제목
+     * @param description 설명
+     * @param background 배경 텍스처 위치 (루트 발전 과제 전용)
+     * @param frame 프레임
+     * @param showToast 완료 시에 토스트를 출력해야 하는 경우 {@code true}
+     * @param announceChat 완료 시에 메시지를 보내야 하는 경우 {@code true}
+     * @param hidden 발전 과제가 숨겨진 경우 {@code true}
+     * @return 발전 과제 디스플레이
+     */
+    default AdvancementDisplay createDisplay(
+        final Material icon, final Component title, final Component description,
+        final @Nullable NamespacedKey background, final AdvancementDisplay.Frame frame,
+        final boolean showToast, final boolean announceChat, final boolean hidden
+    ) {
+        return createDisplay(new ItemStack(icon), title, description, background, frame, showToast, announceChat, hidden);
+    }
+
+    /**
+     * 발전 과제 디스플레이를 생성합니다.
+     *
+     * @param icon 프레임에 표시되는 아이콘
+     * @param title 제목
+     * @param description 설명
+     * @param background 배경 텍스처 위치 (루트 발전 과제 전용)
+     * @param frame 프레임
+     * @param showToast 완료 시에 토스트를 출력해야 하는 경우 {@code true}
+     * @param announceChat 완료 시에 메시지를 보내야 하는 경우 {@code true}
+     * @param hidden 발전 과제가 숨겨진 경우 {@code true}
+     * @return this
+     */
+    AdvancementDisplay createDisplay(
+        final ItemStack icon, final Component title, final Component description,
+        final @Nullable NamespacedKey background, final AdvancementDisplay.Frame frame,
+        final boolean showToast, final boolean announceChat, final boolean hidden
+    );
+
+    /**
+     * 발전 과제 보상을 생성합니다.
+     *
+     * @param experience 제공할 경험치
+     * @param loot 전리품 테이블 키
+     * @param recipes 레시피 키
+     * @param function 실행할 함수
+     * @return 발전 과제 보상
+     */
+    AdvancementReward createReward(
+        final int experience,
+        final List<NamespacedKey> loot,
+        final List<NamespacedKey> recipes,
+        final @Nullable NamespacedKey function
+    );
+
+    // ===========================
+
+    /**
+     * 발전 과제를 서버에 등록합니다.
+     *
+     * @param key 중복되지 않는 발전 과제 식별 키
+     * @param builder 발전 과제 빌더
+     * @return 발전 과제
+     */
+    Advancement register(final NamespacedKey key, final AdvancementBuilder builder);
+
+    /**
+     * 발전 과제를 서버에 등록합니다.
+     *
+     * @param key 중복되지 않는 발전 과제 식별 키
+     * @param json 발전 과제 JSON 데이터
+     * @return 발전 과제
+     */
+    Advancement register(final NamespacedKey key, final JsonElement json);
+}
diff --git a/src/main/java/moe/caramel/daydream/plugin/PluginDatapackLoader.java b/src/main/java/moe/caramel/daydream/plugin/PluginDatapackLoader.java
index 778946665dfef224f766101e831b254efa3604af..6536dbc003681cbe39ee7537cf0cca7311b524c5 100644
--- a/src/main/java/moe/caramel/daydream/plugin/PluginDatapackLoader.java
+++ b/src/main/java/moe/caramel/daydream/plugin/PluginDatapackLoader.java
@@ -9,4 +9,14 @@ import org.jspecify.annotations.NullMarked;
 @NullMarked
 @ApiStatus.OverrideOnly
 public interface PluginDatapackLoader {
+
+    // Daydream start - Add more Advancement API
+    /**
+     * 발전 과제를 서버에 등록할 때 호출됩니다.
+     *
+     * @param dataFolder 플러그인 데이터 폴더
+     * @param provider 발전 과제 제공자
+     */
+    default void registerAdvancement(final java.io.File dataFolder, final AdvancementProvider provider) { }
+    // Daydream end - Add more Advancement API
 }
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index 5777b4574f021fc8bff1d4f84bcb34f6e854e47e..8615bda7b956faf1ea2795fdcd0a0aeb7133f467 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -2420,6 +2420,67 @@ public final class Bukkit {
         return server.advancementIterator();
     }
 
+    // Daydream start - Add more Advancement API
+    /**
+     * 사용자 지정 트리거를 실행합니다.
+     *
+     * @param player 대상 플레이어
+     * @param triggerId 트리거 ID
+     */
+    public static void triggerCustomCriteria(@NotNull Player player, @NotNull NamespacedKey triggerId) {
+        server.triggerCustomCriteria(player, triggerId);
+    }
+
+    /**
+     * 사용자 지정 트리거를 실행합니다.
+     *
+     * @param player 대상 플레이어
+     * @param item 대상 아이템 (조건 검사에 사용)
+     * @param triggerId 트리거 ID
+     */
+    public static void triggerCustomCriteria(@NotNull Player player, @NotNull NamespacedKey triggerId, @Nullable ItemStack item) {
+        server.triggerCustomCriteria(player, triggerId, item);
+    }
+
+    /**
+     * 사용자 지정 트리거를 실행합니다.
+     *
+     * @param player 대상 플레이어
+     * @param item 대상 아이템 (조건 검사에 사용)
+     * @param target 타겟 엔티티 (조건 검사에 사용)
+     * @param triggerId 트리거 ID
+     */
+    public static void triggerCustomCriteria(@NotNull Player player, @NotNull NamespacedKey triggerId, @Nullable ItemStack item, @Nullable Entity target) {
+        server.triggerCustomCriteria(player, triggerId, item, target);
+    }
+
+    /**
+     * 사용자 지정 트리거를 실행합니다.
+     *
+     * @param player 대상 플레이어
+     * @param item 대상 아이템 (조건 검사에 사용)
+     * @param target 타겟 엔티티 (조건 검사에 사용)
+     * @param triggerId 트리거 ID
+     * @param data 트리거 데이터
+     */
+    public static void triggerCustomCriteria(@NotNull Player player, @NotNull NamespacedKey triggerId, @Nullable ItemStack item, @Nullable Entity target, @Nullable Map<String, Object> data) {
+        server.triggerCustomCriteria(player, triggerId, item, target, data);
+    }
+
+    /**
+     * 사용자 지정 트리거를 실행합니다.
+     *
+     * @param player 대상 플레이어
+     * @param item 대상 아이템 (조건 검사에 사용)
+     * @param target 타겟 엔티티 (조건 검사에 사용)
+     * @param triggerId 트리거 ID
+     * @param dataSupplier 트리거 데이터
+     */
+    public static void triggerCustomCriteria(@NotNull Player player, @NotNull NamespacedKey triggerId, @Nullable ItemStack item, @Nullable Entity target, @Nullable java.util.function.Supplier<Map<String, Object>> dataSupplier) {
+        server.triggerCustomCriteria(player, triggerId, item, target, dataSupplier);
+    }
+    // Daydream end - Add more Advancement API
+
     /**
      * Creates a new {@link BlockData} instance for the specified Material, with
      * all properties initialized to unspecified defaults.
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 215c63a6347c168353fdfc30790f70567e7ae7de..06841b966f5627ab68c26f1f033a569d29fb72bd 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -2071,6 +2071,57 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
     @NotNull
     Iterator<Advancement> advancementIterator();
 
+    // Daydream start - Add more Advancement API
+    /**
+     * 사용자 지정 트리거를 실행합니다.
+     *
+     * @param player 대상 플레이어
+     * @param triggerId 트리거 ID
+     */
+    void triggerCustomCriteria(@NotNull Player player, @NotNull NamespacedKey triggerId);
+
+    /**
+     * 사용자 지정 트리거를 실행합니다.
+     *
+     * @param player 대상 플레이어
+     * @param item 대상 아이템 (조건 검사에 사용)
+     * @param triggerId 트리거 ID
+     */
+    void triggerCustomCriteria(@NotNull Player player, @NotNull NamespacedKey triggerId, @Nullable ItemStack item);
+
+    /**
+     * 사용자 지정 트리거를 실행합니다.
+     *
+     * @param player 대상 플레이어
+     * @param item 대상 아이템 (조건 검사에 사용)
+     * @param target 타겟 엔티티 (조건 검사에 사용)
+     * @param triggerId 트리거 ID
+     */
+    void triggerCustomCriteria(@NotNull Player player, @NotNull NamespacedKey triggerId, @Nullable ItemStack item, @Nullable Entity target);
+
+    /**
+     * 사용자 지정 트리거를 실행합니다.
+     *
+     * @param player 대상 플레이어
+     * @param item 대상 아이템 (조건 검사에 사용)
+     * @param target 타겟 엔티티 (조건 검사에 사용)
+     * @param triggerId 트리거 ID
+     * @param data 트리거 데이터
+     */
+    void triggerCustomCriteria(@NotNull Player player, @NotNull NamespacedKey triggerId, @Nullable ItemStack item, @Nullable Entity target, @Nullable Map<String, Object> data);
+
+    /**
+     * 사용자 지정 트리거를 실행합니다.
+     *
+     * @param player 대상 플레이어
+     * @param item 대상 아이템 (조건 검사에 사용)
+     * @param target 타겟 엔티티 (조건 검사에 사용)
+     * @param triggerId 트리거 ID
+     * @param dataSupplier 트리거 데이터
+     */
+    void triggerCustomCriteria(@NotNull Player player, @NotNull NamespacedKey triggerId, @Nullable ItemStack item, @Nullable Entity target, @Nullable java.util.function.Supplier<Map<String, Object>> dataSupplier);
+    // Daydream end - Add more Advancement API
+
     /**
      * Creates a new {@link BlockData} instance for the specified Material, with
      * all properties initialized to unspecified defaults.
diff --git a/src/main/java/org/bukkit/advancement/Advancement.java b/src/main/java/org/bukkit/advancement/Advancement.java
index 243e5f2debad7f12210169e15ef0b29763e988bb..eb113a0f0edb3827466d100193fe88e23429a242 100644
--- a/src/main/java/org/bukkit/advancement/Advancement.java
+++ b/src/main/java/org/bukkit/advancement/Advancement.java
@@ -68,4 +68,44 @@ public interface Advancement extends Keyed {
     @NotNull
     Advancement getRoot();
     // Paper end
+
+    // Daydream start - Add more Advancement API
+    /**
+     * 이 발전 과제의 저장 구역을 가져옵니다.
+     *
+     * @return 저장 구역
+     */
+    @NotNull
+    org.bukkit.NamespacedKey getSaveSection();
+
+    /**
+     * 발전 과제 보상을 가져옵니다.
+     *
+     * @return 발전 과제 보상
+     */
+    @NotNull
+    moe.caramel.daydream.advancement.AdvancementReward getReward();
+
+    /**
+     * 발전 과제가 카운트를 사용하는지 확인합니다.
+     *
+     * @return 이 발전 과제가 카운트를 사용하는 경우 {@code true}를 반환
+     */
+    boolean useCount();
+
+    /**
+     * 발전 과제의 최대 카운트를 가져옵니다.
+     *
+     * @return 발전 과제의 최대 카운트
+     */
+    int maxCount();
+
+    /**
+     * 발전 과제의 추가 JSON 데이터를 가져옵니다.
+     *
+     * @return JSON 데이터
+     */
+    @Nullable
+    com.google.gson.JsonObject getExtra();
+    // Daydream end - Add more Advancement API
 }
diff --git a/src/main/java/org/bukkit/advancement/AdvancementProgress.java b/src/main/java/org/bukkit/advancement/AdvancementProgress.java
index f9bc179da071e7bd57cefc50d6763317fb643b74..3b1b55977d94de338f536896babedc7e6212e557 100644
--- a/src/main/java/org/bukkit/advancement/AdvancementProgress.java
+++ b/src/main/java/org/bukkit/advancement/AdvancementProgress.java
@@ -67,4 +67,36 @@ public interface AdvancementProgress {
      */
     @NotNull
     Collection<String> getAwardedCriteria();
+
+    // Daydream start - Add more Advancement API
+    /**
+     * 발전 과제 진행도의 카운트를 증가시킵니다.
+     *
+     * @throws IllegalStateException 이 발전 과제 진행도가 카운트를 사용하지 않습니다.
+     * @return 증가되었다면 {@code true}, 최대 범위에 도달한 경우 {@code false}를 반환
+     */
+    boolean increaseCount();
+
+    /**
+     * 발전 과제 진행도의 카운트를 감소시킵니다.
+     *
+     * @throws IllegalStateException 이 발전 과제 진행도가 카운트를 사용하지 않습니다.
+     * @return 감소되었다면 {@code true}, 최소 범위에 도달한 경우 {@code false}를 반환
+     */
+    boolean decreaseCount();
+
+    /**
+     * 발전 과제 진행도가 카운트를 사용하는지 확인합니다.
+     *
+     * @return 이 발전 과제 진행도가 카운트를 사용하는 경우 {@code true}를 반환
+     */
+    boolean useCount();
+
+    /**
+     * 이 발전 과제 진행도의 현재 카운트를 가져옵니다.
+     *
+     * @return 현재 카운트
+     */
+    int currentCount();
+    // Daydream end - Add more Advancement API
 }
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 558d83566b844d0105a746c2f0855d7fd09de461..2f46545721a6590c54addf3233fa2801b0f4eb58 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -3342,6 +3342,46 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     @NotNull
     public AdvancementProgress getAdvancementProgress(@NotNull Advancement advancement);
 
+    // Daydream start - Add more Advancement API
+    /**
+     * 플레이어의 발전 과제 데이터 인스턴스를 가져옵니다.
+     *
+     * @return 발전 과제 데이터 인스턴스
+     */
+    @NotNull
+    public moe.caramel.daydream.advancement.PlayerAdvancementData getAdvancementData();
+
+    /**
+     * 플레이어의 직렬화된 발전 과제 데이터를 가져옵니다.
+     *
+     * @param format 저장 형식
+     * @return 직렬화된 발전 과제 데이터
+     * @param <T> 데이터 타입
+     */
+    @NotNull
+    public <T> T serializeAdvancementProgress(@NotNull moe.caramel.daydream.advancement.AdvancementFormat<T> format);
+
+    /**
+     * 플레이어의 직렬화된 발전 과제 데이터를 가져옵니다.
+     *
+     * @param format 저장 형식
+     * @param saveSection 저장 구역
+     * @return 직렬화된 발전 과제 데이터
+     * @param <T> 데이터 타입
+     */
+    @NotNull
+    public <T> T serializeAdvancementProgress(@NotNull moe.caramel.daydream.advancement.AdvancementFormat<T> format, @NotNull org.bukkit.NamespacedKey saveSection);
+
+    /**
+     * 플레이어에게 발전 과제 알림을 전송합니다.
+     *
+     * @param item 표시할 아이템
+     * @param title 표시할 제목
+     * @param frame 표시할 프레임
+     */
+    public void sendAdvancementAlert(@NotNull ItemStack item, @NotNull net.kyori.adventure.text.Component title, @NotNull io.papermc.paper.advancement.AdvancementDisplay.Frame frame);
+    // Daydream end - Add more Advancement API
+
     /**
      * Get the player's current client side view distance.
      * <br>
