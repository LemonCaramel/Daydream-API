From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Tue, 12 Oct 2021 20:40:48 +0900
Subject: [PATCH] Add Brigadier Command API


diff --git a/build.gradle.kts b/build.gradle.kts
index e827ee211e3c65dc68ac5867fd8476639df63645..4629e17d2af492d78581736bc390e5cb30386990 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -51,6 +51,7 @@ dependencies {
     implementation("org.ow2.asm:asm:9.4")
     implementation("org.ow2.asm:asm-commons:9.4")
     // Paper end
+    api("com.mojang:brigadier:1.2.9") // Daydream - Add Brigadier Command API
 
     api("org.apache.maven:maven-resolver-provider:3.8.5")
     compileOnly("org.apache.maven.resolver:maven-resolver-connector-basic:1.7.3")
diff --git a/src/main/java/io/papermc/paper/command/brigadier/CommandSourceStack.java b/src/main/java/io/papermc/paper/command/brigadier/CommandSourceStack.java
new file mode 100644
index 0000000000000000000000000000000000000000..e8b04204dbad8450096c9aedc789865f0545331e
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/CommandSourceStack.java
@@ -0,0 +1,38 @@
+package io.papermc.paper.command.brigadier;
+
+import org.bukkit.Location;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Entity;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * Represents a vanilla command source stack which is used
+ * for command execution.
+ *
+ * @see <a href="https://github.com/PaperMC/Paper/pull/8235">from Origianl PR</a>
+ */
+public interface CommandSourceStack {
+
+    /**
+     * Gets the location that this command is being executed at.
+     * @return location
+     */
+    @NotNull
+    Location getLocation();
+
+    /**
+     * Gets the source of from where this command was executed from
+     * @return source type
+     */
+    @NotNull
+    CommandSender getSender();
+
+    /**
+     * Gets the entity that triggered the execution of this command.
+     * May not always be the command source.
+     */
+    @Nullable
+    Entity getExecutor();
+
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/AbstractCommand.java b/src/main/java/moe/caramel/daydream/brigadier/AbstractCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..7d4776c59b1ed9f5eadb9188cd2430e4a7b70c74
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/AbstractCommand.java
@@ -0,0 +1,345 @@
+package moe.caramel.daydream.brigadier;
+
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.builder.LiteralArgumentBuilder;
+import com.mojang.brigadier.builder.RequiredArgumentBuilder;
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.suggestion.SuggestionProvider;
+import com.mojang.brigadier.suggestion.Suggestions;
+import com.mojang.brigadier.suggestion.SuggestionsBuilder;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import net.kyori.adventure.text.Component;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.CompletableFuture;
+import java.util.function.Consumer;
+import java.util.function.Supplier;
+
+/**
+ * Brigadier 명령어 빌더
+ */
+@SuppressWarnings("unused")
+public abstract class AbstractCommand {
+
+    private String[] aliases;
+    private Component permissionMessage;
+    private String description, permission, usageMessage;
+
+    /**
+     * 명령어를 생성합니다.
+     *
+     * @param builder 빌더를 사용하여 자유롭게 명령어를 생성합니다.
+     */
+    public abstract void createCommand(@NotNull LiteralArgumentBuilder<CommandSourceStack> builder);
+
+
+    /*
+        Aliases
+     */
+
+    /**
+     * Returns array of active aliases of this command.
+     *
+     * @return Array of aliases
+     */
+    @Nullable
+    public String[] getAliases() {
+        return aliases;
+    }
+
+    /**
+     * Sets the list of aliases to request on registration for this command.
+     *
+     * @param aliases aliases to register to this command
+     * @return this command object, for chaining
+     */
+    @NotNull
+    public AbstractCommand setAliases(@NotNull String... aliases) {
+        this.aliases = aliases;
+        return this;
+    }
+
+
+    /*
+        Description
+     */
+
+    /**
+     * Gets a brief description of this command.
+     *
+     * @return Description of this command
+     */
+    @Nullable
+    public String getDescription() {
+        return description;
+    }
+
+    /**
+     * Sets a brief description of this command.
+     *
+     * @param description command description
+     * @return this command object, for chaining
+     */
+    @NotNull
+    public AbstractCommand setDescription(@NotNull String description) {
+        this.description = description;
+        return this;
+    }
+
+
+    /*
+        Permission
+     */
+
+    /**
+     * Gets the permission required by users to be able to perform this command.
+     *
+     * @return Permission name, or null if none
+     */
+    @Nullable
+    public String getPermission() {
+        return permission;
+    }
+
+    /**
+     * Sets the permission required by users to be able to perform this command.
+     *
+     * @param permission Permission name or null
+     * @return this command object, for chaining
+     */
+    @NotNull
+    public AbstractCommand setPermission(@Nullable String permission) {
+        this.permission = permission;
+        return this;
+    }
+
+
+    /*
+        PermissionMessage
+     */
+
+    /**
+     * Returns a message to be displayed on a failed permission check for this command
+     *
+     * @return Permission check failed message
+     */
+    @Nullable
+    public Component getPermissionMessage() {
+        return this.permissionMessage;
+    }
+
+    /**
+     * Sets the message sent when a permission check fails.
+     *
+     * @param permissionMessage the permission message
+     * @return this command object, for chaining
+     */
+    @NotNull
+    public AbstractCommand setPermissionMessage(@Nullable Component permissionMessage) {
+        this.permissionMessage = permissionMessage;
+        return this;
+    }
+
+
+    /*
+       Usage
+     */
+
+    /**
+     * Gets an example usage of this command
+     *
+     * @return One or more example usages
+     */
+    @Nullable
+    public String getUsage() {
+        return usageMessage;
+    }
+
+    /**
+     * Sets the example usage of this command
+     *
+     * @param usage new example usage
+     * @return this command object, for chaining
+     */
+    @NotNull
+    public AbstractCommand setUsage(@NotNull String usage) {
+        this.usageMessage = usage;
+        return this;
+    }
+
+
+    /*
+       Utilities
+     */
+
+    /**
+     * 리터럴 인자를 생성합니다.
+     *
+     * @param literal 리터럴 인자의 이름
+     * @return 리터럴 인자
+     */
+    @NotNull
+    protected LiteralArgumentBuilder<CommandSourceStack> literal(@NotNull String literal) {
+        return LiteralArgumentBuilder.literal(literal);
+    }
+
+    /**
+     * 필수 입력 인자를 생성합니다.
+     *
+     * @param name 입력 인자의 이름
+     * @param type 입력 인자의 타입 인스턴스
+     * @return 필수 입력 인자
+     */
+    @NotNull
+    protected <T> RequiredArgumentBuilder<CommandSourceStack, T> argument(@NotNull String name, @NotNull ArgumentType<T> type) {
+        return RequiredArgumentBuilder.argument(name, type);
+    }
+
+    /**
+     * 명령어 발신자를 가져옵니다.
+     *
+     * @param context 명령 컨텍스트
+     * @return Bukkit 명령어 발신자
+     */
+    @NotNull
+    protected CommandSender sender(@NotNull CommandContext<CommandSourceStack> context) {
+        return sender(context.getSource());
+    }
+
+    /**
+     * 명령어 발신자를 가져옵니다.
+     *
+     * @param source 명령 제공자
+     * @return Bukkit 명령어 발신자
+     */
+    @NotNull
+    protected CommandSender sender(@NotNull CommandSourceStack source) {
+        return source.getSender();
+    }
+
+
+    /*
+       Suggest Utilities
+     */
+
+    /**
+     * 정적 명령어 제안을 생성합니다.
+     *
+     * @param strings 제안 목록
+     * @return 생성된 제안 프로바이더
+     */
+    @NotNull
+    protected SuggestionProvider<CommandSourceStack> suggest(@NotNull String... strings) {
+        return suggest(List.of(strings));
+    }
+
+    /**
+     * 정적 명령어 제안을 생성합니다.
+     *
+     * @param strings 제안 목록
+     * @return 생성된 제안 프로바이더
+     */
+    @NotNull
+    protected SuggestionProvider<CommandSourceStack> suggest(@NotNull Collection<String> strings) {
+        return (c, b) -> suggest(b, strings);
+    }
+
+    /**
+     * 동적 명령어 제안을 생성합니다.
+     *
+     * @param strings 제안 목록
+     * @return 생성된 제안 프로바이더
+     */
+    @NotNull
+    protected SuggestionProvider<CommandSourceStack> suggest(@NotNull Supplier<String[]> strings) {
+        return suggest(list -> list.addAll(Arrays.asList(strings.get())));
+    }
+
+    /**
+     * 동적 명령어 제안을 생성합니다.
+     *
+     * @param strings 제안 목록
+     * @return 생성된 제안 프로바이더
+     */
+    @NotNull
+    protected SuggestionProvider<CommandSourceStack> suggest(@NotNull Consumer<Collection<String>> strings) {
+        return (c, b) -> {
+            final List<String> list = new ArrayList<>();
+            strings.accept(list);
+            return suggest(b, list);
+        };
+    }
+
+    /**
+     * 툴팁이 포함된 정적 명령어 제안을 생성합니다.
+     *
+     * @param suggestions 툴팁이 포함된 제안 목록
+     * @return 생성된 제안 프로바이더
+     */
+    @NotNull
+    protected SuggestionProvider<CommandSourceStack> hoverSuggest(@NotNull Map<String, Component> suggestions) {
+        return (c, b) -> suggest(b, suggestions);
+    }
+
+    /**
+     * 툴팁이 포함된 동적 명령어 제안을 생성합니다.
+     *
+     * @param suggestions 툴팁이 포함된 제안 목록
+     * @return 생성된 제안 프로바이더
+     */
+    @NotNull
+    protected SuggestionProvider<CommandSourceStack> hoverSuggest(@NotNull Consumer<Map<String, Component>> suggestions) {
+        return (c, b) -> {
+            final Map<String, Component> map = new HashMap<>();
+            suggestions.accept(map);
+            return suggest(b, map);
+        };
+    }
+
+    /**
+     * 입력 내용에 기반하여 제안 빌더와 일치하는 제안을 가져옵니다.
+     *
+     * @param builder 제안 빌더
+     * @param suggestions 제안 목록
+     * @return 제안
+     */
+    @NotNull
+    public static CompletableFuture<Suggestions> suggest(@NotNull SuggestionsBuilder builder, @NotNull Iterable<String> suggestions) {
+        final String token = builder.getRemainingLowerCase();
+        for (final String s : suggestions) {
+            if (s.toLowerCase().startsWith(token)) {
+                builder.suggest(s);
+            }
+        }
+
+        return builder.buildFuture();
+    }
+
+    /**
+     * 입력 내용에 기반하여 제안 빌더와 일치하는 툴팁이 포함된 제안을 가져옵니다.
+     *
+     * @param builder 제안 빌더
+     * @param suggestions 제안 목록
+     * @return 제안
+     */
+    @NotNull
+    public static CompletableFuture<Suggestions> suggest(@NotNull SuggestionsBuilder builder, @NotNull Map<String, Component> suggestions) {
+        final String token = builder.getRemainingLowerCase();
+        for (final var entry : suggestions.entrySet()) {
+            final String s = entry.getKey();
+            if (s.toLowerCase().startsWith(token)) {
+                final Component message = entry.getValue();
+                builder.suggest(s, BrigadierService.SERVICE.getMessage(message));
+            }
+        }
+
+        return builder.buildFuture();
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/Arguments.java b/src/main/java/moe/caramel/daydream/brigadier/Arguments.java
new file mode 100644
index 0000000000000000000000000000000000000000..abf12ad7215553b85709c39bad0292b0b9d0d51b
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/Arguments.java
@@ -0,0 +1,309 @@
+package moe.caramel.daydream.brigadier;
+
+import static moe.caramel.daydream.brigadier.BrigadierService.SERVICE;
+import com.mojang.authlib.GameProfile;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import moe.caramel.daydream.brigadier.argument.*;
+import moe.caramel.daydream.brigadier.data.*;
+import moe.caramel.daydream.util.NumberRange;
+import net.kyori.adventure.nbt.api.BinaryTagHolder;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.format.Style;
+import net.kyori.adventure.text.format.TextColor;
+import org.bukkit.Axis;
+import org.bukkit.GameMode;
+import org.bukkit.HeightMap;
+import org.bukkit.NamespacedKey;
+import org.bukkit.Particle;
+import org.bukkit.World;
+import org.bukkit.block.Block;
+import org.bukkit.block.structure.Mirror;
+import org.bukkit.block.structure.StructureRotation;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.scoreboard.DisplaySlot;
+import org.bukkit.scoreboard.Objective;
+import org.bukkit.scoreboard.Team;
+import org.jetbrains.annotations.NotNull;
+import java.util.Collection;
+import java.util.EnumSet;
+import java.util.UUID;
+import java.util.function.Predicate;
+
+/**
+ * Brigadier Vanilla Arguments
+ */
+@SuppressWarnings("unused")
+public final class Arguments {
+
+    /**
+     * It's a constant class.
+     * Don't create instances.
+     */
+    private Arguments() { throw new UnsupportedOperationException(); }
+
+    /**
+     * Example: "Player", "0123", "@e", "@e[type=foo]", "dd12be42-52a9-4a91-a8a1-11c01849e498"
+     */
+    @NotNull
+    public static final EntityArgument ENTITY = SERVICE.getArgument("entity");
+
+    /**
+     * Example: "Player", "0123", "dd12be42-52a9-4a91-a8a1-11c01849e498", "@e"
+     */
+    @NotNull
+    public static final SimpleArgument<Collection<GameProfile>> GAME_PROFILES = SERVICE.getArgument("game_profile");
+
+    /**
+     * Example: "0 0 0", "~ ~ ~", "^ ^ ^", "^1 ^ ^-5", "~0.5 ~1 ~-5"
+     */
+    @NotNull
+    public static final BlockPosArgument BLOCK_POS = SERVICE.getArgument("block_pos");
+
+    /**
+     * Example: "0 0", "~ ~", "~1 ~-2", "^ ^", "^-1 ^0"
+     */
+    @NotNull
+    public static final SimpleArgument<Position<CommandSourceStack>> COLUMN_POS = SERVICE.getArgument("column_pos");
+
+    /**
+     * Example: "0 0 0", "~ ~ ~", "^ ^ ^", "^1 ^ ^-5", "0.1 -0.5 .9", "~0.5 ~1 ~-5"
+     */
+    @NotNull
+    public static final VecArgument VEC3 = SERVICE.getArgument("vec3");
+
+    /**
+     * Example: "0 0", "~ ~", "0.1 -0.5", "~1 ~-2"
+     */
+    @NotNull
+    public static final VecArgument VEC2 = SERVICE.getArgument("vec2");
+
+    /**
+     * Example: "stone", "minecraft:stone", "stone[foo=bar]", "foo{bar=baz}"
+     */
+    @NotNull
+    public static final BlockStateArgument BLOCK_STATE = SERVICE.getArgument("block_state");
+
+    /**
+     * Example: "stone", "minecraft:stone", "stone[foo=bar]", "#stone", "#stone[foo=bar]{baz=nbt}"
+     */
+    @NotNull
+    public static final SimpleArgument<Predicate<Block>> BLOCK_PREDICATE = SERVICE.getArgument("block_predicate");
+
+    /**
+     * Example: "stick", "minecraft:stick", "stick{foo=bar}"
+     */
+    @NotNull
+    public static final ItemArgument ITEM = SERVICE.getArgument("item_stack");
+
+    /**
+     * Example: "stick", "minecraft:stick", "#stick", "#stick{foo=bar}"
+     */
+    @NotNull
+    public static final SimpleArgument<Predicate<ItemStack>> ITEM_PREDICATE = SERVICE.getArgument("item_predicate");
+
+    /**
+     * Example: "red", "green"
+     */
+    @NotNull
+    public static final SimpleArgument<TextColor> COLOR = SERVICE.getArgument("color");
+
+    /**
+     * Example: "\"hello world\"", "\"\"", "\"{\"text\":\"hello world\"}", "[\"\"]"
+     */
+    @NotNull
+    public static final SimpleArgument<Component> COMPONENT = SERVICE.getArgument("component");
+
+    /**
+     * Example: {"bold": true}
+     * @since Minecraft 1.20.3
+     */
+    @NotNull
+    public static final SimpleArgument<Style> STYLE = SERVICE.getArgument("style");
+
+    /**
+     * Example: "Hello world!", "foo", "@e", "Hello @p :)"
+     */
+    @NotNull
+    public static final MessageArgument MESSAGE = SERVICE.getArgument("message");
+
+    /**
+     * Example: "{}", "{foo=bar}"
+     */
+    @NotNull
+    public static final SimpleArgument<BinaryTagHolder> COMPOUND_TAG = SERVICE.getArgument("nbt_compound_tag");
+
+    /*
+     * Example: "0", "0b", "0l", "0.0", "\"foo\"", "{foo=bar}", "[0]"
+     * NBT_TAG
+     */
+
+    /*
+     * Example: "foo", "foo.bar", "foo[0]", "[0]", "[]", "{foo=bar}"
+     * NBT_PATH
+     */
+
+    /**
+     * Example: "foo", "*", "012"
+     */
+    @NotNull
+    public static final SimpleArgument<Objective> OBJECTIVE = SERVICE.getArgument("objective");
+
+    /**
+     * Example: "foo", "foo.bar.baz", "minecraft:foo"
+     */
+    @NotNull
+    public static final SimpleArgument<String> OBJECTIVE_CRITERIA = SERVICE.getArgument("objective_criteria");
+
+    /**
+     * Example: "=", "{@literal >}", "{@literal <}"
+     */
+    @NotNull
+    public static final SimpleArgument<Operation> OPERATION = SERVICE.getArgument("operation");
+
+    /**
+     * Example: "foo", "foo:bar", "particle with options"
+     */
+    @NotNull
+    public static final SimpleArgument<Particle> PARTICLE = SERVICE.getArgument("particle");
+
+    /**
+     * Example: "0", "~", "~-5"
+     */
+    @NotNull
+    public static final SimpleArgument<Float> ANGLE = SERVICE.getArgument("angle");
+
+    /**
+     * Example: "0 0", "~ ~", "~-5 ~5"
+     */
+    @NotNull
+    public static final SimpleArgument<Position<CommandSourceStack>> ROTATION = SERVICE.getArgument("rotation");
+
+    /**
+     * Example: "sidebar", "sidebar.team.light_purple"
+     */
+    @NotNull
+    public static final SimpleArgument<DisplaySlot> SCOREBOARD_SLOT = SERVICE.getArgument("scoreboard_slot");
+
+    /**
+     * Example: "Player", "0123", "*", "@e"
+     */
+    @NotNull
+    public static final ScoreHolderArgument SCORE_HOLDER = SERVICE.getArgument("score_holder");
+
+    /**
+     * Example: "xyz", "x"
+     */
+    @NotNull
+    public static final SimpleArgument<EnumSet<Axis>> SWIZZLE = SERVICE.getArgument("swizzle");
+
+    /**
+     * Example: "foo", "123"
+     */
+    @NotNull
+    public static final SimpleArgument<Team> TEAM = SERVICE.getArgument("team");
+
+    /**
+     * Example: "container.5", "12", "weapon"
+     */
+    @NotNull
+    public static final SimpleArgument<Integer> SLOT = SERVICE.getArgument("item_slot");
+
+    /**
+     * Example: "foo", "foo:bar", "012"
+     */
+    @NotNull
+    public static final ResourceLocationArgument<NamespacedKey> RESOURCE_LOCATION = SERVICE.getArgument("resource_location");
+
+    /*
+     * Example: "foo", "foo:bar", "#foo"
+     * FUNCTION
+     */
+
+    /**
+     * Example: "eyes", "feet"
+     */
+    @NotNull
+    public static final SimpleArgument<EntityAnchorArgument> ENTITY_ANCHOR = SERVICE.getArgument("entity_anchor");
+
+    /**
+     * Example: "0..5", "0", "-5", "-100..", "..100"
+     */
+    @NotNull
+    public static final SimpleArgument<NumberRange<Integer>> RANGE_INTEGER = SERVICE.getArgument("int_range");
+
+    /**
+     * Example: "0..5.2", "0", "-5.4", "-100.76..", "..100"
+     */
+    @NotNull
+    public static final SimpleArgument<NumberRange<Double>> RANGE_FLOATS = SERVICE.getArgument("float_range");
+
+    /**
+     * Example: "minecraft:overworld", "minecraft:the_nether"
+     * Please use this API's suggestion.
+     */
+    @NotNull
+    public static final SimpleArgumentSuggestion<World> DIMENSION = SERVICE.getArgument("dimension");
+
+    /**
+     * Example: "survival", "creative", "adventure", "spectator"
+     */
+    @NotNull
+    public static final SimpleArgument<GameMode> GAMEMODE = SERVICE.getArgument("gamemode");
+
+    /**
+     * Example: "0d", "0s", "0t", "0"
+     */
+    @NotNull
+    public static final TimeArgument TIME = SERVICE.getArgument("time");
+
+    /*
+     * Example: "foo", "foo:bar", "012", "#skeletons", "#minecraft:skeletons"
+     * @since Minecraft 1.18.2
+     * RESOURCE_OR_TAG
+     */
+
+    /*
+     * Example: "foo", "foo:bar", "012", "#skeletons", "#minecraft:skeletons"
+     * @since Minecraft 1.19.3
+     * RESOURCE_OR_TAG_KEY
+     */
+
+    /*
+     * Example: "foo", "foo:bar", "012"
+     * @since Minecraft 1.18.2
+     * RESOURCE_KEY
+     */
+
+    /*
+     * Example: "foo", "foo:bar", "012"
+     * @since Minecraft 1.19.3
+     * RESOURCE
+     */
+
+    /**
+     * Example: "template_mirror", "left_right", "none"
+     * @since Minecraft 1.19
+     */
+    @NotNull
+    public static final SimpleArgument<Mirror> TEMPLATE_MIRROR = SERVICE.getArgument("template_mirror");
+
+    /**
+     * Example: "180", "clockwise_90", "counterclockwise_90", "none"
+     * @since Minecraft 1.19
+     */
+    @NotNull
+    public static final SimpleArgument<StructureRotation> TEMPLATE_ROTATION = SERVICE.getArgument("template_rotation");
+
+    /**
+     * Example: "world_surface", "ocean_floor", "motion_blocking", "motion_blocking_no_leaves"
+     * @since Minecraft 1.19.4
+     */
+    @NotNull
+    public static final SimpleArgument<HeightMap> HEIGHT_MAP = SERVICE.getArgument("heightmap");
+
+    /**
+     * Example: "dd12be42-52a9-4a91-a8a1-11c01849e498"
+     */
+    @NotNull
+    public static final SimpleArgument<UUID> UUID = SERVICE.getArgument("uuid");
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/BrigadierService.java b/src/main/java/moe/caramel/daydream/brigadier/BrigadierService.java
new file mode 100644
index 0000000000000000000000000000000000000000..810f99efc85a9ee71b45618346e3b6a1cae152ee
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/BrigadierService.java
@@ -0,0 +1,56 @@
+package moe.caramel.daydream.brigadier;
+
+import com.mojang.brigadier.Message;
+import net.kyori.adventure.text.Component;
+import org.jetbrains.annotations.NotNull;
+import java.util.ServiceLoader;
+
+/**
+ * Argument Type Service
+ */
+class BrigadierService {
+
+    /**
+     * Inventory API Service Instance
+     */
+    @NotNull
+    static final Service SERVICE = ServiceLoader
+        .load(Service.class, Service.class.getClassLoader())
+        .findFirst().orElseThrow();
+
+
+    /**
+     * Service Interface
+     */
+    protected interface Service {
+
+        /**
+         * Get Argument.
+         *
+         * @param type argument type name
+         * @return Argument Type
+         * @param <T> Argument Type Class
+         */
+        @NotNull
+        <T> T getArgument(@NotNull String type);
+
+        /**
+         * Get Suggestion.
+         *
+         * @param type suggestion type name
+         * @return Suggestion
+         * @param <T> Suggestion Type Class
+         */
+        @NotNull
+        <T> T getSuggestion(@NotNull String type);
+
+        /**
+         * Get Tooltip Message.
+         *
+         * @param component Tooltip component
+         * @return Brigadier Tooltip Message
+         */
+        @NotNull
+        Message getMessage(@NotNull Component component);
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/Suggestions.java b/src/main/java/moe/caramel/daydream/brigadier/Suggestions.java
new file mode 100644
index 0000000000000000000000000000000000000000..4e9b83f1055497526d2e60d5a568b98e3247c576
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/Suggestions.java
@@ -0,0 +1,30 @@
+package moe.caramel.daydream.brigadier;
+
+import static moe.caramel.daydream.brigadier.BrigadierService.SERVICE;
+import moe.caramel.daydream.brigadier.suggestion.SimpleSuggestion;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Brigadier Vanilla Suggestions
+ */
+@SuppressWarnings("unused")
+public final class Suggestions {
+
+    /**
+     * All Recipes
+     */
+    @NotNull
+    public static final SimpleSuggestion ALL_RECIPES = SERVICE.getSuggestion("all_recipes");
+
+    /**
+     * Available Sounds
+     */
+    @NotNull
+    public static final SimpleSuggestion AVAILABLE_SOUNDS = SERVICE.getSuggestion("available_sounds");
+
+    /**
+     * Summonable Entities
+     */
+    @NotNull
+    public static final SimpleSuggestion SUMMONABLE_ENTITIES = SERVICE.getSuggestion("summonable_entities");
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/ArgumentInf.java b/src/main/java/moe/caramel/daydream/brigadier/argument/ArgumentInf.java
new file mode 100644
index 0000000000000000000000000000000000000000..ad361b4b2f019e02c35ae92f06e8cb6e9bf31d2e
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/ArgumentInf.java
@@ -0,0 +1,14 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.mojang.brigadier.arguments.ArgumentType;
+import org.jetbrains.annotations.NotNull;
+
+public interface ArgumentInf {
+
+    /**
+     * Get Argument Type.
+     *
+     * @return argument type
+     */
+    @NotNull ArgumentType<?> get();
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/BlockPosArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/BlockPosArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..ae671d0a6310fae3128624f5dd40c6990d5736f1
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/BlockPosArgument.java
@@ -0,0 +1,16 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import org.bukkit.block.Block;
+import org.jetbrains.annotations.NotNull;
+
+public interface BlockPosArgument extends ArgumentInf {
+
+    @NotNull
+    Block getLoadedBlockPos(final @NotNull CommandContext<? extends CommandSourceStack> context, @NotNull String name) throws CommandSyntaxException;
+
+    @NotNull
+    Block getSpawnablePos(final @NotNull CommandContext<? extends CommandSourceStack> context, @NotNull String name) throws CommandSyntaxException;
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/BlockStateArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/BlockStateArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..dca35daeb5e1e28454d436a8dfabb02e4249d22d
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/BlockStateArgument.java
@@ -0,0 +1,22 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import org.bukkit.Location;
+import org.bukkit.World;
+import org.bukkit.block.Block;
+import org.bukkit.block.data.BlockData;
+import org.jetbrains.annotations.NotNull;
+import java.util.function.Predicate;
+
+public interface BlockStateArgument extends ArgumentInf {
+
+    @NotNull
+    BlockData getState(final @NotNull CommandContext<? extends CommandSourceStack> context, @NotNull String name) throws CommandSyntaxException;
+
+    boolean place(final @NotNull CommandContext<? extends CommandSourceStack> context, @NotNull String name, @NotNull World world, @NotNull Location location, int flags);
+
+    @NotNull
+    Predicate<Block> getPredicate(final @NotNull CommandContext<? extends CommandSourceStack> context, @NotNull String name) throws CommandSyntaxException;
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/EntityAnchorArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/EntityAnchorArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..cfd681a43f4b4f10d5c55e4c0a2fe1bbc40b7dad
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/EntityAnchorArgument.java
@@ -0,0 +1,10 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import org.bukkit.entity.Entity;
+import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
+
+public interface EntityAnchorArgument {
+
+    @NotNull Vector apply(@NotNull Entity entity);
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/EntityArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/EntityArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..dfcf872de75411be1a2fedaf5ca0c03bd78f492f
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/EntityArgument.java
@@ -0,0 +1,31 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+import java.util.Collection;
+
+public interface EntityArgument {
+
+    @NotNull ArgumentType<?> entity();
+
+    @NotNull ArgumentType<?> entities();
+
+    @NotNull ArgumentType<?> player();
+
+    @NotNull ArgumentType<?> players();
+
+    @NotNull Entity getEntity(final @NotNull CommandContext<? extends CommandSourceStack> context, @NotNull String name) throws CommandSyntaxException;
+
+    @NotNull Collection<? extends Entity> getEntities(final @NotNull CommandContext<? extends CommandSourceStack> context, @NotNull String name) throws CommandSyntaxException;
+
+    @NotNull Collection<Player> getOptionalPlayers(final @NotNull CommandContext<? extends CommandSourceStack> context, @NotNull String name) throws CommandSyntaxException;
+
+    @NotNull Player getPlayer(final @NotNull CommandContext<? extends CommandSourceStack> context, @NotNull String name) throws CommandSyntaxException;
+
+    @NotNull Collection<Player> getPlayers(final @NotNull CommandContext<? extends CommandSourceStack> context, @NotNull String name) throws CommandSyntaxException;
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/ItemArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/ItemArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..1bcb7d8901140e9e0f9516c2fcd156da1d798037
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/ItemArgument.java
@@ -0,0 +1,18 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
+public interface ItemArgument extends ArgumentInf {
+
+    @NotNull
+    default ItemStack getItem(final @NotNull CommandContext<? extends CommandSourceStack> context, @NotNull String name) throws CommandSyntaxException {
+        return this.createItemStack(context, name, 1, false);
+    }
+
+    @NotNull
+    ItemStack createItemStack(final @NotNull CommandContext<? extends CommandSourceStack> context, @NotNull String name, int amount, boolean checkOverstack) throws CommandSyntaxException;
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/MessageArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/MessageArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..5d0eb87f741f24fe9f68abe0a36d0b80f3fa7d3e
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/MessageArgument.java
@@ -0,0 +1,20 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import moe.caramel.daydream.network.chat.PlayerMessage;
+import net.kyori.adventure.text.Component;
+import org.bukkit.util.Consumer;
+import org.jetbrains.annotations.NotNull;
+
+public interface MessageArgument extends SimpleArgument<Component> {
+
+    /**
+     * 서명된 메시지와 관련된 작업을 수행합니다.
+     */
+    void resolveMessage(
+        final @NotNull CommandContext<? extends CommandSourceStack> context,
+        final @NotNull String name, final @NotNull Consumer<PlayerMessage> callback
+    ) throws CommandSyntaxException;
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/ResourceLocationArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/ResourceLocationArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..d15b2296a84dfbd5d757dca219b289740fe7559a
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/ResourceLocationArgument.java
@@ -0,0 +1,26 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import org.bukkit.advancement.Advancement;
+import org.jetbrains.annotations.NotNull;
+
+public interface ResourceLocationArgument<T> extends SimpleArgument<T> {
+
+    @NotNull
+    Advancement getAdvancement(final @NotNull CommandContext<? extends CommandSourceStack> context, @NotNull String name) throws CommandSyntaxException;
+
+    @NotNull
+    T getRecipe(final @NotNull CommandContext<? extends CommandSourceStack> context, @NotNull String name) throws CommandSyntaxException;
+
+    /*
+    @NotNull
+    T getPredicate(final @NotNull CommandContext<? extends CommandSourceStack> context, @NotNull String name) throws CommandSyntaxException;
+     */
+
+    /*
+    @NotNull
+    T getItemModifier(final @NotNull CommandContext<? extends CommandSourceStack> context, @NotNull String name) throws CommandSyntaxException;
+    */
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/ScoreHolderArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/ScoreHolderArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..40f0fed2a521304728acd76ce1a01fbb03035c0e
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/ScoreHolderArgument.java
@@ -0,0 +1,28 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import com.mojang.brigadier.suggestion.SuggestionProvider;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import moe.caramel.daydream.brigadier.data.ScoreHolder;
+import org.jetbrains.annotations.NotNull;
+import java.util.Collection;
+import java.util.function.Supplier;
+
+public interface ScoreHolderArgument {
+
+    @NotNull ArgumentType<?> getHolder();
+
+    @NotNull ArgumentType<?> getHolders();
+
+    @NotNull ScoreHolder getName(final @NotNull CommandContext<? extends CommandSourceStack> context, @NotNull String name) throws CommandSyntaxException;
+
+    @NotNull Collection<ScoreHolder> getNames(final @NotNull CommandContext<? extends CommandSourceStack> context, @NotNull String name) throws CommandSyntaxException;
+
+    @NotNull Collection<ScoreHolder> getNamesWithDefaultWildcard(final @NotNull CommandContext<? extends CommandSourceStack> context, @NotNull String name) throws CommandSyntaxException;
+
+    @NotNull Collection<ScoreHolder> getNamesSupplier(final @NotNull CommandContext<? extends CommandSourceStack> context, @NotNull String name, @NotNull Supplier<Collection<String>> players) throws CommandSyntaxException;
+
+    @NotNull SuggestionProvider<CommandSourceStack> getSuggestion();
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/SimpleArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/SimpleArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..fdd3886e959230891af306c8e8ea2b623352da4a
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/SimpleArgument.java
@@ -0,0 +1,12 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import org.jetbrains.annotations.NotNull;
+
+public interface SimpleArgument<T> extends ArgumentInf {
+
+    @NotNull
+    T getData(final @NotNull CommandContext<? extends CommandSourceStack> context, @NotNull String name) throws CommandSyntaxException;
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/SimpleArgumentSuggestion.java b/src/main/java/moe/caramel/daydream/brigadier/argument/SimpleArgumentSuggestion.java
new file mode 100644
index 0000000000000000000000000000000000000000..fc49c907007458c21ad13e7b9e1c55380647e4b7
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/SimpleArgumentSuggestion.java
@@ -0,0 +1,5 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import moe.caramel.daydream.brigadier.suggestion.SimpleSuggestion;
+
+public interface SimpleArgumentSuggestion<T> extends SimpleArgument<T>, SimpleSuggestion {}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/TimeArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/TimeArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..3250e6e5a53bf54d56380be56217b9df453c9a5c
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/TimeArgument.java
@@ -0,0 +1,15 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.mojang.brigadier.arguments.ArgumentType;
+import org.jetbrains.annotations.NotNull;
+
+public interface TimeArgument extends SimpleArgument<Integer> {
+
+    /**
+     * 시간 인자를 가져옵니다.
+     *
+     * @param minimum 최소 값
+     * @return TimeArgument
+     */
+    @NotNull ArgumentType<?> get(int minimum);
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/VecArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/VecArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..a594e1bc2a493a17996bb70bfaaba3163ee6f957
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/VecArgument.java
@@ -0,0 +1,11 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.mojang.brigadier.arguments.ArgumentType;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import moe.caramel.daydream.brigadier.data.Position;
+import org.jetbrains.annotations.NotNull;
+
+public interface VecArgument extends SimpleArgument<Position<CommandSourceStack>> {
+
+    @NotNull ArgumentType<?> get(boolean centerIntegers);
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/data/Operation.java b/src/main/java/moe/caramel/daydream/brigadier/data/Operation.java
new file mode 100644
index 0000000000000000000000000000000000000000..2b11e6a5c9a841dabd5d91632a0945a1a128515c
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/data/Operation.java
@@ -0,0 +1,9 @@
+package moe.caramel.daydream.brigadier.data;
+
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+
+@FunctionalInterface
+public interface Operation {
+
+    int apply(int score, int score2) throws CommandSyntaxException;
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/data/Position.java b/src/main/java/moe/caramel/daydream/brigadier/data/Position.java
new file mode 100644
index 0000000000000000000000000000000000000000..911385fe601788cbc518d3197fba2c1c17f8d655
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/data/Position.java
@@ -0,0 +1,23 @@
+package moe.caramel.daydream.brigadier.data;
+
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import org.bukkit.Location;
+import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
+
+public interface Position<C extends CommandSourceStack> {
+
+    @NotNull Vector getPositionVector(@NotNull C source);
+
+    float getXRot(@NotNull C source);
+
+    float getYRot(@NotNull C source);
+
+    @NotNull Location getLocation(@NotNull C source);
+
+    boolean isXRelative();
+
+    boolean isYRelative();
+
+    boolean isZRelative();
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/data/ScoreHolder.java b/src/main/java/moe/caramel/daydream/brigadier/data/ScoreHolder.java
new file mode 100644
index 0000000000000000000000000000000000000000..c73176c671dce3164044ee1d20aa4dd87148190b
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/data/ScoreHolder.java
@@ -0,0 +1,17 @@
+package moe.caramel.daydream.brigadier.data;
+
+import net.kyori.adventure.text.Component;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public interface ScoreHolder {
+
+    @NotNull
+    String scoreboardName();
+
+    @Nullable
+    Component displayName();
+
+    @NotNull
+    Component feedbackDisplayName();
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/suggestion/SimpleSuggestion.java b/src/main/java/moe/caramel/daydream/brigadier/suggestion/SimpleSuggestion.java
new file mode 100644
index 0000000000000000000000000000000000000000..ba04177bbccb9f65cb1eeb22f0f92deab7d2c392
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/suggestion/SimpleSuggestion.java
@@ -0,0 +1,11 @@
+package moe.caramel.daydream.brigadier.suggestion;
+
+import com.mojang.brigadier.suggestion.SuggestionProvider;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import org.jetbrains.annotations.NotNull;
+
+public interface SimpleSuggestion {
+
+    @NotNull
+    SuggestionProvider<CommandSourceStack> getSuggestion();
+}
diff --git a/src/main/java/moe/caramel/daydream/network/chat/PlayerMessage.java b/src/main/java/moe/caramel/daydream/network/chat/PlayerMessage.java
new file mode 100644
index 0000000000000000000000000000000000000000..e3247497bbf39051ed4b65c87d6c3cfe60971216
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/network/chat/PlayerMessage.java
@@ -0,0 +1,76 @@
+package moe.caramel.daydream.network.chat;
+
+import net.kyori.adventure.chat.SignedMessage;
+import net.kyori.adventure.text.Component;
+import org.jetbrains.annotations.NotNull;
+import java.time.Instant;
+import java.util.UUID;
+
+public interface PlayerMessage extends SignedMessage  {
+
+    /**
+     * 메시지를 발신한 대상의 UUID를 가져옵니다.
+     *
+     * @return 메시지를 발신한 대상의 UUID
+     */
+    @NotNull
+    UUID sender();
+
+    /**
+     * 메시지가 서버 시간 기준으로 만료되었는지 확인합니다.
+     *
+     * @param currentTime 현재 시간
+     * @return 만료되었다면 {@code true}를 반환
+     */
+    boolean hasExpiredServer(@NotNull Instant currentTime);
+
+    /**
+     * 메시지가 클라이언트 시간 기준으로 만료되었는지 확인합니다.
+     *
+     * @param currentTime 현재 시간
+     * @return 만료되었다면 {@code true}를 반환
+     */
+    boolean hasExpiredClient(@NotNull Instant currentTime);
+
+    /**
+     * 메시지가 서명을 가지고 있는지의 여부를 가져옵니다.
+     *
+     * @return 메시지가 서명을 가지고 있는지의 여부
+     */
+    boolean hasSignature();
+
+    /**
+     * 특정 대상의 서명인지 확인합니다.
+     *
+     * @param uuid 대상
+     * @return 대상의 서명이 맞다면 {@code true}를 반환
+     */
+    boolean hasSignatureFrom(@NotNull UUID uuid);
+
+    /**
+     * 꾸며진 메시지를 가져옵니다.
+     *
+     * @return 꾸며진 메시지가 없는 경우 원본을 반환
+     */
+    @NotNull
+    Component decoratedContent();
+
+    /**
+     * 서명되지 않은 메시지를 설정합니다. 주로 메시지를 꾸미는 용도로 사용합니다.
+     *
+     * @param message 서명되지 않은 메시지
+     */
+    void unsignedContent(final @NotNull Component message);
+
+    /**
+     * 서명되지 않은 메시지를 제거합니다. 받는 대상은 원본 메시지로 표시됩니다.
+     */
+    void removeUnsignedContent();
+
+    /**
+     * 메시지가 모두 필터링 되었는지의 여부를 가져옵니다.
+     *
+     * @return 메시지가 모두 필터링 되었는지의 여부
+     */
+    boolean isFullyFiltered();
+}
diff --git a/src/main/java/moe/caramel/daydream/util/NumberRange.java b/src/main/java/moe/caramel/daydream/util/NumberRange.java
new file mode 100644
index 0000000000000000000000000000000000000000..ced8b19a02be4952784b7dbde45f01d63dbdad34
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/util/NumberRange.java
@@ -0,0 +1,74 @@
+package moe.caramel.daydream.util;
+
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * 숫자 범위를 지정합니다.
+ *
+ * @param <T> 숫자 타입 (Integer, Double ...)
+ */
+public final class NumberRange<T extends Number> {
+
+    private final T min, max;
+
+    /**
+     * 숫자 범위를 생성합니다.
+     *
+     * @param min 최솟값
+     * @param max 최댓값
+     */
+    public NumberRange(@Nullable T min, @Nullable T max) {
+        this.min = min;
+        this.max = max;
+    }
+
+    /**
+     * 최솟값을 가져옵니다.
+     *
+     * @return 최솟값
+     */
+    @Nullable
+    public T getMin() {
+        return getMin(null);
+    }
+
+    /**
+     * 최솟값을 가져옵니다.
+     *
+     * @param def 기본값
+     * @return 최솟값
+     */
+    @Nullable
+    public T getMin(final @Nullable T def) {
+        return (min == null) ? def : min;
+    }
+
+    /**
+     * 최댓값을 가져옵니다.
+     *
+     * @return 최댓값
+     */
+    @Nullable
+    public T getMax() {
+        return getMax(null);
+    }
+
+    /**
+     * 최댓값을 가져옵니다.
+     *
+     * @param def 기본값
+     * @return 최댓값
+     */
+    @Nullable
+    public T getMax(final @Nullable T def) {
+        return (max == null) ? def : max;
+    }
+
+    @Override
+    public String toString() {
+        return "NumberRange{" +
+               "min=" + min +
+               ", max=" + max +
+               '}';
+    }
+}
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index 4863d9f21f0a0f11974be85360edc587ffd7eab3..2c49aa6a57c634c6f5792e4342984f5b327fdce4 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -1043,6 +1043,52 @@ public final class Bukkit {
         return server.getPluginCommand(name);
     }
 
+    // Daydream start - Add Brigadier API
+    /**
+     * Brigadier를 사용하여 명령어를 등록합니다.
+     *
+     * @param plugin 대상 플러그인
+     * @param label 명령어 레이블
+     * @param command 명령어 노드
+     */
+    public static void registerCommand(@NotNull org.bukkit.plugin.Plugin plugin, @NotNull String label, @NotNull moe.caramel.daydream.brigadier.AbstractCommand command) {
+        server.registerCommand(plugin, label, command);
+    }
+
+    /**
+     * Brigadier 명령어를 등록 해제합니다.
+     *
+     * @param plugin 대상 플러그인
+     * @param commands 명령어 레이블 배열
+     * @return 제거에 성공한 명령어 목록
+     */
+    @NotNull
+    public static List<String> unregisterCommands(@NotNull org.bukkit.plugin.Plugin plugin, @NotNull String... commands) {
+        return server.unregisterCommands(plugin, commands);
+    }
+
+    /**
+     * 이 플러그인의 모든 Brigadier 명령어를 등록 해제합니다.
+     *
+     * @param plugin 대상 플러그인
+     * @return 제거에 성공한 명령어 목록
+     */
+    @NotNull
+    public static List<String> unregisterAllCommands(@NotNull org.bukkit.plugin.Plugin plugin) {
+        return server.unregisterAllCommands(plugin);
+    }
+
+    /**
+     * 명령어 디스패처를 가져옵니다.
+     *
+     * @return 명령어 디스패처
+     */
+    @NotNull
+    public static com.mojang.brigadier.CommandDispatcher<io.papermc.paper.command.brigadier.CommandSourceStack> getCommandDispatcher() {
+        return server.getCommandDispatcher();
+    }
+    // Daydream end - Add Brigadier API
+
     /**
      * Writes loaded players to disk.
      */
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 929859b9de0856e7686abbaa8ccdccd99341f0ba..2e7ee9cbbc57e1fe127f3491dfea859043347cc0 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -885,6 +885,44 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
     @Nullable
     public PluginCommand getPluginCommand(@NotNull String name);
 
+    // Daydream start - Add Brigadier API
+    /**
+     * Brigadier를 사용하여 명령어를 등록합니다.
+     *
+     * @param plugin 대상 플러그인
+     * @param label 명령어 레이블
+     * @param command 명령어 노드
+     */
+    public void registerCommand(@NotNull org.bukkit.plugin.Plugin plugin, @NotNull String label, @NotNull moe.caramel.daydream.brigadier.AbstractCommand command);
+
+    /**
+     * Brigadier 명령어를 등록 해제합니다.
+     *
+     * @param plugin 대상 플러그인
+     * @param commands 명령어 레이블 배열
+     * @return 제거에 성공한 명령어 목록
+     */
+    @NotNull
+    public List<String> unregisterCommands(@NotNull org.bukkit.plugin.Plugin plugin, @NotNull String... commands);
+
+    /**
+     * 이 플러그인의 모든 Brigadier 명령어를 등록 해제합니다.
+     *
+     * @param plugin 대상 플러그인
+     * @return 제거에 성공한 명령어 목록
+     */
+    @NotNull
+    public List<String> unregisterAllCommands(@NotNull org.bukkit.plugin.Plugin plugin);
+
+    /**
+     * 명령어 디스패처를 가져옵니다.
+     *
+     * @return 명령어 디스패처
+     */
+    @NotNull
+    public com.mojang.brigadier.CommandDispatcher<io.papermc.paper.command.brigadier.CommandSourceStack> getCommandDispatcher();
+    // Daydream end - Add Brigadier API
+
     /**
      * Writes loaded players to disk.
      */
diff --git a/src/main/java/org/bukkit/command/Command.java b/src/main/java/org/bukkit/command/Command.java
index b791358f90fe92bc2264d9a26492245763813af3..77223bd6c320097839bd26a283fa787fd2644382 100644
--- a/src/main/java/org/bukkit/command/Command.java
+++ b/src/main/java/org/bukkit/command/Command.java
@@ -35,6 +35,10 @@ public abstract class Command {
     private net.kyori.adventure.text.Component permissionMessage; // Paper
     public co.aikar.timings.Timing timings; // Paper
     @NotNull public String getTimingName() {return getName();} // Paper
+    // Daydream start - Add Brigadier API
+    protected boolean brigadierCommand;
+    public boolean isBrigadierCommand() { return brigadierCommand; }
+    // Daydream end - Add Brigadier API
 
     protected Command(@NotNull String name) {
         this(name, "", "/" + name, new ArrayList<String>());
diff --git a/src/main/java/org/bukkit/command/SimpleCommandMap.java b/src/main/java/org/bukkit/command/SimpleCommandMap.java
index 36da67bf9fda415c302afcf0e346c72e664fa6a3..0f4469db880f22406928cc26edcca3783b540d11 100644
--- a/src/main/java/org/bukkit/command/SimpleCommandMap.java
+++ b/src/main/java/org/bukkit/command/SimpleCommandMap.java
@@ -308,4 +308,48 @@ public class SimpleCommandMap implements CommandMap {
         return knownCommands;
     }
     // Paper end
+
+    // Daydream start - Add Brigadier API
+    @NotNull
+    public synchronized List<String> unregisterBrigadierCommands(@NotNull org.bukkit.plugin.Plugin plugin, @NotNull String... commands) {
+        final List<String> removedCommand = new ArrayList<>();
+        final String fallback = plugin.getName().toLowerCase(java.util.Locale.ENGLISH);
+        for (String name : commands) {
+            name = name.toLowerCase(java.util.Locale.ENGLISH);
+            // Label
+            if (this.removeCommand(plugin, name)) {
+                removedCommand.add(name);
+                knownCommands.remove(name);
+            }
+            // Fallback Label
+            final String fallbackLabel = (fallback + ":" + name);
+            if (this.removeCommand(plugin, fallbackLabel)) {
+                removedCommand.add(fallbackLabel);
+                knownCommands.remove(fallbackLabel);
+            }
+        }
+        return removedCommand;
+    }
+
+    @NotNull
+    public synchronized List<String> unregisterAllBrigadierCommands(@NotNull org.bukkit.plugin.Plugin plugin) {
+        final List<String> removedCommand = new ArrayList<>();
+        final Iterator<String> iterator = knownCommands.keySet().iterator();
+        while (iterator.hasNext()) {
+            final String name = iterator.next();
+            if (!this.removeCommand(plugin, name)) continue;
+            removedCommand.add(name);
+            iterator.remove();
+        }
+        return removedCommand;
+    }
+
+    private synchronized boolean removeCommand(@NotNull org.bukkit.plugin.Plugin plugin, @NotNull String name) {
+        final Command command = knownCommands.get(name);
+        if (!(command instanceof org.bukkit.command.PluginIdentifiableCommand pluginCmd)) return false;
+        if (!command.isBrigadierCommand() || pluginCmd.getPlugin() != plugin) return false;
+        command.unregister(this);
+        return true;
+    }
+    // Daydream end - Add Brigadier API
 }
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 962283d336e6d53941cebbc3a995d403ff989f66..9d76747d18910ef11085c4b23d21ff091e2698ab 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -396,6 +396,16 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      */
     public boolean performCommand(@NotNull String command);
 
+    // Daydream start - Add Brigadier API
+    /**
+     * CommandSource를 생성합니다.
+     *
+     * @return 명령 제공자
+     */
+    @NotNull
+    public io.papermc.paper.command.brigadier.CommandSourceStack getCommandSource();
+    // Daydream end - Add Brigadier API
+
     /**
      * Returns true if the entity is supported by a block.
      *
diff --git a/src/main/java/org/bukkit/event/command/UnknownCommandEvent.java b/src/main/java/org/bukkit/event/command/UnknownCommandEvent.java
index e4f8a0d14ae66468bbb0a5d6bf9c1ee417dc866c..def7e364b543e598f9df31ef65e7c56fe2b54631 100644
--- a/src/main/java/org/bukkit/event/command/UnknownCommandEvent.java
+++ b/src/main/java/org/bukkit/event/command/UnknownCommandEvent.java
@@ -19,10 +19,28 @@ public class UnknownCommandEvent extends Event {
     @Nullable private Component message;
 
     public UnknownCommandEvent(@NotNull final CommandSender sender, @NotNull final String commandLine, @Nullable final Component message) {
+        // Daydream start - Add Brigadier Command API
+        this(sender, commandLine, message, false);
+    }
+
+    private final boolean brigadier;
+
+    /**
+     * Brigadier 명령어 여부를 가져옵니다.
+     *
+     * @return Brigadier 명령어라면 {@code true}를 반환
+     */
+    public boolean isBrigadier() {
+        return brigadier;
+    }
+
+    public UnknownCommandEvent(@NotNull final CommandSender sender, @NotNull final String commandLine, @Nullable final Component message, final boolean brigadier) {
+        // Daydream end - Add Brigadier Command API
         super(false);
         this.sender = sender;
         this.commandLine = commandLine;
         this.message = message;
+        this.brigadier = brigadier; // Daydream - Add Brigadier Command API
     }
 
     /**
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
index 5cd236965de12392d8c7aa81307c0ff1cc8673b1..4cb8c2b0d8ff4acee6862a2612e1437f2d9b9ddc 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
@@ -348,6 +348,39 @@ public abstract class JavaPlugin extends PluginBase {
         }
     }
 
+    // Daydream start - Add Brigadier Command API
+    /**
+     * Brigadier를 사용하여 명령어를 등록합니다.
+     *
+     * @param label 명령어 레이블
+     * @param command 명령어 노드
+     */
+    public void registerCommand(@NotNull String label, @NotNull moe.caramel.daydream.brigadier.AbstractCommand command) {
+        this.getServer().registerCommand(this, label, command);
+    }
+
+    /**
+     * Brigadier 명령어를 등록 해제합니다.
+     *
+     * @param commands 명령어 레이블 배열
+     * @return 제거에 성공한 명령어 목록
+     */
+    @NotNull
+    public List<String> unregisterCommands(@NotNull String... commands) {
+        return this.getServer().unregisterCommands(this, commands);
+    }
+
+    /**
+     * 이 플러그인의 모든 Brigadier 명령어를 등록 해제합니다.
+     *
+     * @return 제거에 성공한 명령어 목록
+     */
+    @NotNull
+    public List<String> unregisterAllCommands() {
+        return this.getServer().unregisterAllCommands(this);
+    }
+    // Daydream end - Add Brigadier Command API
+
     @Override
     public void onLoad() {}
 
