From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Tue, 12 Oct 2021 20:40:48 +0900
Subject: [PATCH] Add Brigadier Command API


diff --git a/build.gradle.kts b/build.gradle.kts
index 46016bd1a2403c9f449ba92ec942cd349da747ac..1bd6143bd4c061224e53f8123874f855d0fc7bc5 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -46,6 +46,11 @@ dependencies {
     implementation("org.ow2.asm:asm:9.2")
     implementation("org.ow2.asm:asm-commons:9.2")
     // Paper end
+    // Daydream start - Add Brigadier Command API
+    api("io.papermc.paper:paper-mojangapi:1.18.2-R0.1-SNAPSHOT") {
+        exclude("io.papermc.paper", "paper-api")
+    }
+    // Daydream end - Add Brigadier Command API
 
     compileOnly("org.apache.maven:maven-resolver-provider:3.8.4")
     compileOnly("org.apache.maven.resolver:maven-resolver-connector-basic:1.7.2")
diff --git a/src/main/java/moe/caramel/daydream/brigadier/AbstractCommand.java b/src/main/java/moe/caramel/daydream/brigadier/AbstractCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..b3dca81432152a560f88cb3a34ca071531b03add
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/AbstractCommand.java
@@ -0,0 +1,387 @@
+package moe.caramel.daydream.brigadier;
+
+import com.destroystokyo.paper.brigadier.BukkitBrigadierCommandSource;
+import com.mojang.brigadier.LiteralMessage;
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.builder.LiteralArgumentBuilder;
+import com.mojang.brigadier.builder.RequiredArgumentBuilder;
+import com.mojang.brigadier.suggestion.SuggestionProvider;
+import com.mojang.brigadier.suggestion.Suggestions;
+import com.mojang.brigadier.suggestion.SuggestionsBuilder;
+import net.kyori.adventure.text.Component;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.CompletableFuture;
+import java.util.function.Function;
+import java.util.function.Supplier;
+
+@SuppressWarnings("unused")
+public abstract class AbstractCommand {
+
+    private String[] aliases;
+    private Component permissionMessage;
+    private String description, permission, usageMessage;
+
+    /**
+     * Make a command!
+     *
+     * @param builder Make it freely using the builder.
+     */
+    public abstract void createCommand(@NotNull LiteralArgumentBuilder<BukkitBrigadierCommandSource> builder);
+
+
+    /*
+        Aliases
+     */
+
+    /**
+     * Returns array of active aliases of this command.
+     *
+     * @return Array of aliases
+     */
+    @Nullable
+    public String[] getAliases() {
+        return aliases;
+    }
+
+    /**
+     * Sets the list of aliases to request on registration for this command.
+     *
+     * @param aliases aliases to register to this command
+     * @return this command object, for chaining
+     */
+    @NotNull
+    public AbstractCommand setAliases(@NotNull String... aliases) {
+        this.aliases = aliases;
+        return this;
+    }
+
+
+    /*
+        Description
+     */
+
+    /**
+     * Gets a brief description of this command.
+     *
+     * @return Description of this command
+     */
+    @Nullable
+    public String getDescription() {
+        return description;
+    }
+
+    /**
+     * Sets a brief description of this command.
+     *
+     * @param description command description
+     * @return this command object, for chaining
+     */
+    @NotNull
+    public AbstractCommand setDescription(@NotNull String description) {
+        this.description = description;
+        return this;
+    }
+
+
+    /*
+        Permission
+     */
+
+    /**
+     * Gets the permission required by users to be able to perform this command.
+     *
+     * @return Permission name, or null if none
+     */
+    @Nullable
+    public String getPermission() {
+        return permission;
+    }
+
+    /**
+     * Sets the permission required by users to be able to perform this command.
+     *
+     * @param permission Permission name or null
+     * @return this command object, for chaining
+     */
+    @NotNull
+    public AbstractCommand setPermission(@Nullable String permission) {
+        this.permission = permission;
+        return this;
+    }
+
+
+    /*
+        PermissionMessage
+     */
+
+    /**
+     * Returns a message to be displayed on a failed permission check for this command
+     *
+     * @return Permission check failed message
+     */
+    @Nullable
+    public Component getPermissionMessage() {
+        return this.permissionMessage;
+    }
+
+    /**
+     * Sets the message sent when a permission check fails.
+     *
+     * @param permissionMessage the permission message
+     * @return this command object, for chaining
+     */
+    @NotNull
+    public AbstractCommand setPermissionMessage(@Nullable Component permissionMessage) {
+        this.permissionMessage = permissionMessage;
+        return this;
+    }
+
+
+    /*
+       Usage
+     */
+
+    /**
+     * Gets an example usage of this command
+     *
+     * @return One or more example usages
+     */
+    @Nullable
+    public String getUsage() {
+        return usageMessage;
+    }
+
+    /**
+     * Sets the example usage of this command
+     *
+     * @param usage new example usage
+     * @return this command object, for chaining
+     */
+    @NotNull
+    public AbstractCommand setUsage(@NotNull String usage) {
+        this.usageMessage = usage;
+        return this;
+    }
+
+
+    /*
+       Utilities
+     */
+    /**
+     * Creating a literal argument
+     *
+     * @param literal The name of the literal argument
+     * @return A literal argument
+     */
+    @NotNull
+    protected LiteralArgumentBuilder<BukkitBrigadierCommandSource> literal(@NotNull String literal) {
+        return LiteralArgumentBuilder.literal(literal);
+    }
+
+    /**
+     * Creating a required argument
+     *
+     * @param name The name of the argument
+     * @param type The ArgumentType for the type
+     * @param <T>  The type
+     * @return A required argument for the type
+     */
+    @NotNull
+    protected <T> RequiredArgumentBuilder<BukkitBrigadierCommandSource, T> argument(@NotNull String name, @NotNull ArgumentType<T> type) {
+        return RequiredArgumentBuilder.argument(name, type);
+    }
+
+    /**
+     * Utility method for creating custom suggestions quickly
+     *
+     * @param strings The string to suggest
+     * @return The suggestion provider of the inputted strings
+     */
+    @NotNull
+    protected SuggestionProvider<BukkitBrigadierCommandSource> suggest(@NotNull String... strings) {
+        return this.suggest(Arrays.asList(strings));
+    }
+
+    /**
+     * Utility method for creating custom suggestions quickly (multiple)
+     * <p>
+     * IMPORTANT!
+     * This suggestion only works when Argument is {@link com.mojang.brigadier.arguments.StringArgumentType#greedyString()}.
+     *
+     * @param strings The string to suggest
+     * @return The suggestion provider of the inputted strings
+     */
+    @NotNull
+    protected SuggestionProvider<BukkitBrigadierCommandSource> multipleSuggest(@NotNull String... strings) {
+        return this.multipleSuggest(Arrays.asList(strings));
+    }
+
+    /**
+     * Utility method for creating custom mutable suggestions quickly
+     *
+     * @param strings The mutable string to suggest
+     * @return The suggestion provider of the inputted strings
+     */
+    @NotNull
+    protected SuggestionProvider<BukkitBrigadierCommandSource> mutableSuggestArray(@NotNull Supplier<String[]> strings) {
+        return suggest(strings.get());
+    }
+
+    /**
+     * Utility method for creating custom mutable suggestions quickly
+     * <p>
+     * IMPORTANT!
+     * This suggestion only works when Argument is {@link com.mojang.brigadier.arguments.StringArgumentType#greedyString()}.
+     *
+     * @param strings The mutable string to suggest
+     * @return The suggestion provider of the inputted strings
+     */
+    @NotNull
+    protected SuggestionProvider<BukkitBrigadierCommandSource> mutableMultipleSuggestArray(@NotNull Supplier<String[]> strings) {
+        return this.multipleSuggest(Arrays.asList(strings.get()));
+    }
+
+    /**
+     * Creating custom suggestions
+     *
+     * @param strings The strings to suggest
+     * @return The SuggestionProvider of the inputted string collection
+     */
+    @NotNull
+    protected SuggestionProvider<BukkitBrigadierCommandSource> suggest(@NotNull Collection<String> strings) {
+        return (c, b) -> suggestMatching(b, strings, false);
+    }
+
+    /**
+     * Creating custom suggestions (multiple)
+     * <p>
+     * IMPORTANT!
+     * This suggestion only works when Argument is {@link com.mojang.brigadier.arguments.StringArgumentType#greedyString()}.
+     *
+     * @param strings The strings to suggest
+     * @return The SuggestionProvider of the inputted string collection
+     */
+    @NotNull
+    protected SuggestionProvider<BukkitBrigadierCommandSource> multipleSuggest(@NotNull Collection<String> strings) {
+        return (c, b) -> suggestMatching(b, strings, true);
+    }
+
+    /**
+     * Creating custom mutable suggestions
+     *
+     * @param strings The mutable strings to suggest
+     * @return The SuggestionProvider of the inputted string collection
+     */
+    @NotNull
+    protected SuggestionProvider<BukkitBrigadierCommandSource> mutableSuggestCollection(@NotNull Function<Collection<String>, Collection<String>> strings) {
+        return (c, b) -> suggestMatching(b, strings.apply(new ArrayList<>()), false);
+    }
+
+    /**
+     * Creating custom mutable suggestions (multiple)
+     * <p>
+     * IMPORTANT!
+     * This suggestion only works when Argument is {@link com.mojang.brigadier.arguments.StringArgumentType#greedyString()}.
+     *
+     * @param strings The mutable strings to suggest
+     * @return The SuggestionProvider of the inputted string collection
+     */
+    @NotNull
+    protected SuggestionProvider<BukkitBrigadierCommandSource> mutableMultipleSuggestCollection(@NotNull Function<Collection<String>, Collection<String>> strings) {
+        return (c, b) -> suggestMatching(b, strings.apply(new ArrayList<>()), true);
+    }
+
+    /**
+     * Creating suggestions with tooltips
+     *
+     * @param suggestions The map of suggestions
+     * @return The suggestion provider for the inputted map
+     */
+    @NotNull
+    protected SuggestionProvider<BukkitBrigadierCommandSource> suggest(@NotNull Map<String, String> suggestions) {
+        return (c, b) -> suggestMatching(b, suggestions, false);
+    }
+
+    /**
+     * Creating suggestions with tooltips (multiple)
+     * <p>
+     * IMPORTANT!
+     * This suggestion only works when Argument is {@link com.mojang.brigadier.arguments.StringArgumentType#greedyString()}.
+     *
+     * @param suggestions The map of suggestions
+     * @return The suggestion provider for the inputted map
+     */
+    @NotNull
+    protected SuggestionProvider<BukkitBrigadierCommandSource> multipleSuggest(@NotNull Map<String, String> suggestions) {
+        return (c, b) -> suggestMatching(b, suggestions, true);
+    }
+
+    /**
+     * Creating mutable suggestions with tooltips
+     *
+     * @param suggestions The map of mutable suggestions
+     * @return The suggestion provider for the inputted map
+     */
+    @NotNull
+    protected SuggestionProvider<BukkitBrigadierCommandSource> mutableSuggestMap(@NotNull Function<Map<String, String>, Map<String, String>> suggestions) {
+        return (c, b) -> suggestMatching(b, suggestions.apply(new HashMap<>()), false);
+    }
+
+    /**
+     * Creating mutable suggestions with tooltips (multiple)
+     * <p>
+     * IMPORTANT!
+     * This suggestion only works when Argument is {@link com.mojang.brigadier.arguments.StringArgumentType#greedyString()}.
+     *
+     * @param suggestions The map of mutable suggestions
+     * @return The suggestion provider for the inputted map
+     */
+    @NotNull
+    protected SuggestionProvider<BukkitBrigadierCommandSource> mutableMultipleSuggestMap(@NotNull Function<Map<String, String>, Map<String, String>> suggestions) {
+        return (c, b) -> suggestMatching(b, suggestions.apply(new HashMap<>()), true);
+    }
+
+    /**
+     * Suggest all matching strings into the given SuggestionsBuilder
+     *
+     * @param builder     The builder to give suggestions to
+     * @param suggestions The suggestions to pick from
+     * @param multiple    is Multiple?
+     * @return The built suggestions
+     */
+    @NotNull
+    private static CompletableFuture<Suggestions> suggestMatching(@NotNull SuggestionsBuilder builder, @NotNull Iterable<String> suggestions, boolean multiple) {
+        if (multiple) builder = builder.createOffset(builder.getInput().lastIndexOf(' ') + 1);
+        String token = builder.getRemainingLowerCase();
+        for (String s : suggestions) if (s.toLowerCase().startsWith(token)) builder.suggest(s);
+
+        return builder.buildFuture();
+    }
+
+    /**
+     * Suggest all matching strings into the given SuggestionsBuilder and add a Message tooltip
+     *
+     * @param builder     The builder to give suggestions to
+     * @param suggestions The suggestions to pick from
+     * @param multiple    is Multiple?
+     * @return The built suggestions
+     */
+    @NotNull
+    private static CompletableFuture<Suggestions> suggestMatching(@NotNull SuggestionsBuilder builder, @NotNull Map<String, String> suggestions, boolean multiple) {
+        if (multiple) builder = builder.createOffset(builder.getInput().lastIndexOf(' ') + 1);
+        String token = builder.getRemainingLowerCase();
+
+        for (Map.Entry<String, String> entry : suggestions.entrySet()) {
+            if (entry.getKey().toLowerCase().startsWith(token))
+                builder.suggest(entry.getKey(), new LiteralMessage(entry.getValue()));
+        }
+
+        return builder.buildFuture();
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/Arguments.java b/src/main/java/moe/caramel/daydream/brigadier/Arguments.java
new file mode 100644
index 0000000000000000000000000000000000000000..8ff3213b6eb2b324add1ea7f91ce274ed0bfd46b
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/Arguments.java
@@ -0,0 +1,246 @@
+package moe.caramel.daydream.brigadier;
+
+import com.destroystokyo.paper.brigadier.BukkitBrigadierCommandSource;
+import com.mojang.authlib.GameProfile;
+import moe.caramel.daydream.brigadier.argument.BlockPosArgument;
+import moe.caramel.daydream.brigadier.argument.BlockStateArgument;
+import moe.caramel.daydream.brigadier.argument.SimpleArgument;
+import moe.caramel.daydream.brigadier.argument.SimpleArgumentSuggestion;
+import moe.caramel.daydream.brigadier.argument.EntityAnchorArgument;
+import moe.caramel.daydream.brigadier.argument.EntityArgument;
+import moe.caramel.daydream.brigadier.argument.ItemArgument;
+import moe.caramel.daydream.brigadier.data.Operation;
+import moe.caramel.daydream.brigadier.data.Position;
+import moe.caramel.daydream.brigadier.argument.ResourceLocationArgument;
+import moe.caramel.daydream.brigadier.argument.ScoreHolderArgument;
+import moe.caramel.daydream.brigadier.argument.VecArgument;
+import moe.caramel.daydream.util.NumberRange;
+import net.kyori.adventure.nbt.api.BinaryTagHolder;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.format.TextColor;
+import org.bukkit.Axis;
+import org.bukkit.NamespacedKey;
+import org.bukkit.Particle;
+import org.bukkit.World;
+import org.bukkit.block.Block;
+import org.bukkit.enchantments.Enchantment;
+import org.bukkit.entity.EntityType;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.potion.PotionEffectType;
+import org.bukkit.scoreboard.DisplaySlot;
+import org.bukkit.scoreboard.Objective;
+import org.bukkit.scoreboard.Team;
+
+import java.util.Collection;
+import java.util.EnumSet;
+import java.util.UUID;
+import java.util.function.Predicate;
+
+/**
+ * Brigadier Vanilla Arguments
+ *
+ * @author LemonCaramel
+ */
+public class Arguments {
+
+    /**
+     * It's a utility class.
+     * Don't create instances.
+     */
+    Arguments() { throw new UnsupportedOperationException(); }
+
+
+    /**
+     * Example: "Player", "0123", "@e", "@e[type=foo]", "dd12be42-52a9-4a91-a8a1-11c01849e498"
+     */
+    public static final EntityArgument ENTITY = null;
+
+    /**
+     * Example: "Player", "0123", "dd12be42-52a9-4a91-a8a1-11c01849e498", "@e"
+     */
+    public static final SimpleArgument<Collection<GameProfile>> GAME_PROFILES = null;
+
+    /**
+     * Example: "0 0 0", "~ ~ ~", "^ ^ ^", "^1 ^ ^-5", "~0.5 ~1 ~-5"
+     */
+    public static final BlockPosArgument BLOCK_POS = null;
+
+    /**
+     * Example: "0 0", "~ ~", "~1 ~-2", "^ ^", "^-1 ^0"
+     */
+    public static final SimpleArgument<Position<BukkitBrigadierCommandSource>> COLUMN_POS = null;
+
+    /**
+     * Example: "0 0 0", "~ ~ ~", "^ ^ ^", "^1 ^ ^-5", "0.1 -0.5 .9", "~0.5 ~1 ~-5"
+     */
+    public static final VecArgument VEC3 = null;
+
+    /**
+     * Example: "0 0", "~ ~", "0.1 -0.5", "~1 ~-2"
+     */
+    public static final VecArgument VEC2 = null;
+
+    /**
+     * Example: "stone", "minecraft:stone", "stone[foo=bar]", "foo{bar=baz}"
+     */
+    public static final BlockStateArgument BLOCK_STATE = null;
+
+    /**
+     * Example: "stone", "minecraft:stone", "stone[foo=bar]", "#stone", "#stone[foo=bar]{baz=nbt}"
+     */
+    public static final SimpleArgument<Predicate<Block>> BLOCK_PREDICATE = null;
+
+    /**
+     * Example: "stick", "minecraft:stick", "stick{foo=bar}"
+     */
+    public static final ItemArgument ITEM = null;
+
+    /**
+     * Example: "stick", "minecraft:stick", "#stick", "#stick{foo=bar}"
+     */
+    public static final SimpleArgument<Predicate<ItemStack>> ITEM_PREDICATE = null;
+
+    /**
+     * Example: "red", "green"
+     */
+    public static final SimpleArgument<TextColor> COLOR = null;
+
+    /**
+     * Example: "\"hello world\"", "\"\"", "\"{\"text\":\"hello world\"}", "[\"\"]"
+     */
+    public static final SimpleArgument<Component> COMPONENT = null;
+
+    /**
+     * Example: "Hello world!", "foo", "@e", "Hello @p :)"
+     */
+    public static final SimpleArgument<Component> MESSAGE = null;
+
+    /**
+     * Example: "{}", "{foo=bar}"
+     */
+    public static final SimpleArgument<BinaryTagHolder> COMPOUND_TAG = null;
+
+    // NbtTagArgument
+
+    // NbtPathArgument
+
+    /**
+     * Example: "foo", "*", "012"
+     */
+    public static final SimpleArgument<Objective> OBJECTIVE = null;
+
+    /**
+     * Example: "foo", "foo.bar.baz", "minecraft:foo"
+     */
+    public static final SimpleArgument<String> OBJECTIVE_CRITERIA = null;
+
+    /**
+     * Example: "=", "{@literal >}", "{@literal <}"
+     */
+    public static final SimpleArgument<Operation> OPERATION = null;
+
+    /**
+     * Example: "foo", "foo:bar", "particle with options"
+     */
+    public static final SimpleArgument<Particle> PARTICLE = null;
+
+    /**
+     * Example: "0", "~", "~-5"
+     */
+    public static final SimpleArgument<Float> ANGLE = null;
+
+    /**
+     * Example: "0 0", "~ ~", "~-5 ~5"
+     */
+    public static final SimpleArgument<Position<BukkitBrigadierCommandSource>> ROTATION = null;
+
+    /**
+     * Example: "sidebar", "sidebar.team.light_purple"
+     */
+    public static final SimpleArgument<DisplaySlot> SCOREBOARD_SLOT = null;
+
+    /**
+     * Example: "Player", "0123", "*", "@e"
+     */
+    public static final ScoreHolderArgument SCORE_HOLDER = null;
+
+    /**
+     * Example: "xyz", "x"
+     */
+    public static final SimpleArgument<EnumSet<Axis>> SWIZZLE = null;
+
+    /**
+     * Example: "foo", "123"
+     */
+    public static final SimpleArgument<Team> TEAM = null;
+
+    /**
+     * Example: "container.5", "12", "weapon"
+     */
+    public static final SimpleArgument<Integer> SLOT = null;
+
+    /**
+     * Example: "foo", "foo:bar", "012"
+     */
+    public static final ResourceLocationArgument<NamespacedKey> RESOURCE_LOCATION = null;
+
+    /**
+     * Example: "spooky", "effect"
+     */
+    public static final SimpleArgument<PotionEffectType> MOB_EFFECT = null;
+
+    // FunctionArgument
+
+    /**
+     * Example: "eyes", "feet"
+     */
+    public static final SimpleArgument<EntityAnchorArgument> ENTITY_ANCHOR = null;
+
+    /**
+     * Example: "0..5", "0", "-5", "-100..", "..100"
+     */
+    public static final SimpleArgument<NumberRange<Integer>> RANGE_INTEGER = null;
+
+    /**
+     * Example: "0..5.2", "0", "-5.4", "-100.76..", "..100"
+     */
+    public static final SimpleArgument<NumberRange<Double>> RANGE_FLOATS = null;
+
+    /**
+     * Example: "unbreaking", "silk_touch"
+     */
+    public static final SimpleArgument<Enchantment> ITEM_ENCHANTMENT = null;
+
+    /**
+     * Example: "minecraft:pig", "cow"
+     */
+    public static final SimpleArgumentSuggestion<EntityType> ENTITY_SUMMON = null;
+
+    /**
+     * Example: "minecraft:overworld", "minecraft:the_nether"
+     * Please use this API's suggestion.
+     */
+    public static final SimpleArgumentSuggestion<World> DIMENSION = null;
+
+    /**
+     * Example: "0d", "0s", "0t", "0"
+     */
+    public static final SimpleArgument<Integer> TIME = null;
+
+    /**
+     * Example: "dd12be42-52a9-4a91-a8a1-11c01849e498"
+     */
+    public static final SimpleArgument<UUID> UUID = null;
+
+    /*
+     * Example: "foo", "foo:bar", "012"
+     * @since Minecraft 1.18.2
+     * RESOURCE_KEY
+     */
+
+    /*
+     * Example: "foo", "foo:bar", "012", "#skeletons", "#minecraft:skeletons"
+     * @since Minecraft 1.18.2
+     * RESOURCE_OR_TAG_LOCATION
+     */
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/Suggestions.java b/src/main/java/moe/caramel/daydream/brigadier/Suggestions.java
new file mode 100644
index 0000000000000000000000000000000000000000..b37308a8f1af3c508402d41b96ac8678ade7086f
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/Suggestions.java
@@ -0,0 +1,22 @@
+package moe.caramel.daydream.brigadier;
+
+import moe.caramel.daydream.brigadier.suggestion.SimpleSuggestion;
+
+/**
+ * WARNING!
+ * <p>
+ * This is intended API design.
+ * It was designed in this way for internal debugging.
+ * Don't ever change the value.
+ */
+public final class Suggestions {
+
+    public static SimpleSuggestion ALL_RECIPES;
+
+    public static SimpleSuggestion AVAILABLE_SOUNDS;
+
+    @Deprecated
+    public static SimpleSuggestion AVAILABLE_BIOMES;
+
+    public static SimpleSuggestion SUMMONABLE_ENTITIES;
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/ArgumentInf.java b/src/main/java/moe/caramel/daydream/brigadier/argument/ArgumentInf.java
new file mode 100644
index 0000000000000000000000000000000000000000..ad361b4b2f019e02c35ae92f06e8cb6e9bf31d2e
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/ArgumentInf.java
@@ -0,0 +1,14 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.mojang.brigadier.arguments.ArgumentType;
+import org.jetbrains.annotations.NotNull;
+
+public interface ArgumentInf {
+
+    /**
+     * Get Argument Type.
+     *
+     * @return argument type
+     */
+    @NotNull ArgumentType<?> get();
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/BlockPosArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/BlockPosArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..e564721974edfe3b7f34012cbd921e8205e191f2
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/BlockPosArgument.java
@@ -0,0 +1,16 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.destroystokyo.paper.brigadier.BukkitBrigadierCommandSource;
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import org.bukkit.block.Block;
+import org.jetbrains.annotations.NotNull;
+
+public interface BlockPosArgument extends ArgumentInf {
+
+    @NotNull
+    Block getLoadedBlockPos(final @NotNull CommandContext<? extends BukkitBrigadierCommandSource> context, @NotNull String name) throws CommandSyntaxException;
+
+    @NotNull
+    Block getSpawnablePos(final @NotNull CommandContext<? extends BukkitBrigadierCommandSource> context, @NotNull String name) throws CommandSyntaxException;
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/BlockStateArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/BlockStateArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..94e19bb08f9a37be2133e0f3712a47f5b361409c
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/BlockStateArgument.java
@@ -0,0 +1,23 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.destroystokyo.paper.brigadier.BukkitBrigadierCommandSource;
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import org.bukkit.Location;
+import org.bukkit.World;
+import org.bukkit.block.Block;
+import org.bukkit.block.data.BlockData;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.function.Predicate;
+
+public interface BlockStateArgument extends ArgumentInf {
+
+    @NotNull
+    BlockData getState(final @NotNull CommandContext<? extends BukkitBrigadierCommandSource> context, @NotNull String name) throws CommandSyntaxException;
+
+    boolean place(final @NotNull CommandContext<? extends BukkitBrigadierCommandSource> context, @NotNull String name, @NotNull World world, @NotNull Location location, int flags);
+
+    @NotNull
+    Predicate<Block> getPredicate(final @NotNull CommandContext<? extends BukkitBrigadierCommandSource> context, @NotNull String name) throws CommandSyntaxException;
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/EntityAnchorArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/EntityAnchorArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..cfd681a43f4b4f10d5c55e4c0a2fe1bbc40b7dad
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/EntityAnchorArgument.java
@@ -0,0 +1,10 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import org.bukkit.entity.Entity;
+import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
+
+public interface EntityAnchorArgument {
+
+    @NotNull Vector apply(@NotNull Entity entity);
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/EntityArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/EntityArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..1f343e849551acae44fbd1b6922ec65a72834935
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/EntityArgument.java
@@ -0,0 +1,32 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.destroystokyo.paper.brigadier.BukkitBrigadierCommandSource;
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Collection;
+
+public interface EntityArgument {
+
+    @NotNull ArgumentType<?> entity();
+
+    @NotNull ArgumentType<?> entities();
+
+    @NotNull ArgumentType<?> player();
+
+    @NotNull ArgumentType<?> players();
+
+    @NotNull Entity getEntity(final @NotNull CommandContext<? extends BukkitBrigadierCommandSource> context, @NotNull String name) throws CommandSyntaxException;
+
+    @NotNull Collection<? extends Entity> getEntities(final @NotNull CommandContext<? extends BukkitBrigadierCommandSource> context, @NotNull String name) throws CommandSyntaxException;
+
+    @NotNull Collection<Player> getOptionalPlayers(final @NotNull CommandContext<? extends BukkitBrigadierCommandSource> context, @NotNull String name) throws CommandSyntaxException;
+
+    @NotNull Player getPlayer(final @NotNull CommandContext<? extends BukkitBrigadierCommandSource> context, @NotNull String name) throws CommandSyntaxException;
+
+    @NotNull Collection<Player> getPlayers(final @NotNull CommandContext<? extends BukkitBrigadierCommandSource> context, @NotNull String name) throws CommandSyntaxException;
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/ItemArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/ItemArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..201ff85ff4fac3531a5c3a37336ff2922fc336e0
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/ItemArgument.java
@@ -0,0 +1,18 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.destroystokyo.paper.brigadier.BukkitBrigadierCommandSource;
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
+public interface ItemArgument extends ArgumentInf {
+
+    @NotNull
+    default ItemStack getItem(final @NotNull CommandContext<? extends BukkitBrigadierCommandSource> context, @NotNull String name) throws CommandSyntaxException {
+        return this.createItemStack(context, name, 1, false);
+    }
+
+    @NotNull
+    ItemStack createItemStack(final @NotNull CommandContext<? extends BukkitBrigadierCommandSource> context, @NotNull String name, int amount, boolean checkOverstack) throws CommandSyntaxException;
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/ResourceLocationArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/ResourceLocationArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..882bb34b91eda90594418aa3585b88d9353e2421
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/ResourceLocationArgument.java
@@ -0,0 +1,31 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.destroystokyo.paper.brigadier.BukkitBrigadierCommandSource;
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import org.bukkit.advancement.Advancement;
+import org.bukkit.attribute.Attribute;
+import org.jetbrains.annotations.NotNull;
+
+public interface ResourceLocationArgument<T> extends SimpleArgument<T> {
+
+    @NotNull
+    Advancement getAdvancement(final @NotNull CommandContext<? extends BukkitBrigadierCommandSource> context, @NotNull String name) throws CommandSyntaxException;
+
+    @NotNull
+    T getRecipe(final @NotNull CommandContext<? extends BukkitBrigadierCommandSource> context, @NotNull String name) throws CommandSyntaxException;
+
+    /*
+    @NotNull
+    T getPredicate(final @NotNull CommandContext<? extends BukkitBrigadierCommandSource> context, @NotNull String name) throws CommandSyntaxException;
+     */
+
+    @NotNull
+    @Deprecated
+    Attribute getAttribute(final @NotNull CommandContext<? extends BukkitBrigadierCommandSource> context, @NotNull String name) throws CommandSyntaxException;
+
+    /*
+    @NotNull
+    T getItemModifier(final @NotNull CommandContext<? extends BukkitBrigadierCommandSource> context, @NotNull String name) throws CommandSyntaxException;
+    */
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/ScoreHolderArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/ScoreHolderArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..e5ac0f101a76c8c6d8058397af753865c381ae7d
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/ScoreHolderArgument.java
@@ -0,0 +1,28 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.destroystokyo.paper.brigadier.BukkitBrigadierCommandSource;
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import com.mojang.brigadier.suggestion.SuggestionProvider;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Collection;
+import java.util.function.Supplier;
+
+public interface ScoreHolderArgument {
+
+    @NotNull ArgumentType<?> getHolder();
+
+    @NotNull ArgumentType<?> getHolders();
+
+    @NotNull String getName(final @NotNull CommandContext<? extends BukkitBrigadierCommandSource> context, @NotNull String name) throws CommandSyntaxException;
+
+    @NotNull Collection<String> getNames(final @NotNull CommandContext<? extends BukkitBrigadierCommandSource> context, @NotNull String name) throws CommandSyntaxException;
+
+    @NotNull Collection<String> getNamesWithDefaultWildcard(final @NotNull CommandContext<? extends BukkitBrigadierCommandSource> context, @NotNull String name) throws CommandSyntaxException;
+
+    @NotNull Collection<String> getNamesSupplier(final @NotNull CommandContext<? extends BukkitBrigadierCommandSource> context, @NotNull String name, @NotNull Supplier<Collection<String>> players) throws CommandSyntaxException;
+
+    @NotNull SuggestionProvider<BukkitBrigadierCommandSource> getSuggestion();
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/SimpleArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/SimpleArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..378810282864c9a3ceb7ecb72cad20f0e7ff2e3e
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/SimpleArgument.java
@@ -0,0 +1,12 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.destroystokyo.paper.brigadier.BukkitBrigadierCommandSource;
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import org.jetbrains.annotations.NotNull;
+
+public interface SimpleArgument<T> extends ArgumentInf {
+
+    @NotNull
+    T getData(final @NotNull CommandContext<? extends BukkitBrigadierCommandSource> context, @NotNull String name) throws CommandSyntaxException;
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/SimpleArgumentSuggestion.java b/src/main/java/moe/caramel/daydream/brigadier/argument/SimpleArgumentSuggestion.java
new file mode 100644
index 0000000000000000000000000000000000000000..fc49c907007458c21ad13e7b9e1c55380647e4b7
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/SimpleArgumentSuggestion.java
@@ -0,0 +1,5 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import moe.caramel.daydream.brigadier.suggestion.SimpleSuggestion;
+
+public interface SimpleArgumentSuggestion<T> extends SimpleArgument<T>, SimpleSuggestion {}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/argument/VecArgument.java b/src/main/java/moe/caramel/daydream/brigadier/argument/VecArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..30ad53e262f8f4bc9746edcab9bf79f475bb29bc
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/argument/VecArgument.java
@@ -0,0 +1,11 @@
+package moe.caramel.daydream.brigadier.argument;
+
+import com.destroystokyo.paper.brigadier.BukkitBrigadierCommandSource;
+import com.mojang.brigadier.arguments.ArgumentType;
+import moe.caramel.daydream.brigadier.data.Position;
+import org.jetbrains.annotations.NotNull;
+
+public interface VecArgument extends SimpleArgument<Position<BukkitBrigadierCommandSource>> {
+
+    @NotNull ArgumentType<?> get(boolean centerIntegers);
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/data/Operation.java b/src/main/java/moe/caramel/daydream/brigadier/data/Operation.java
new file mode 100644
index 0000000000000000000000000000000000000000..2b11e6a5c9a841dabd5d91632a0945a1a128515c
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/data/Operation.java
@@ -0,0 +1,9 @@
+package moe.caramel.daydream.brigadier.data;
+
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+
+@FunctionalInterface
+public interface Operation {
+
+    int apply(int score, int score2) throws CommandSyntaxException;
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/data/Position.java b/src/main/java/moe/caramel/daydream/brigadier/data/Position.java
new file mode 100644
index 0000000000000000000000000000000000000000..1711a2159548ea1686a02a7225a6145d9f0fb76c
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/data/Position.java
@@ -0,0 +1,23 @@
+package moe.caramel.daydream.brigadier.data;
+
+import com.destroystokyo.paper.brigadier.BukkitBrigadierCommandSource;
+import org.bukkit.Location;
+import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
+
+public interface Position<C extends BukkitBrigadierCommandSource> {
+
+    @NotNull Vector getPositionVector(@NotNull C source);
+
+    float getXRot(@NotNull C source);
+
+    float getYRot(@NotNull C source);
+
+    @NotNull Location getLocation(@NotNull C source);
+
+    boolean isXRelative();
+
+    boolean isYRelative();
+
+    boolean isZRelative();
+}
diff --git a/src/main/java/moe/caramel/daydream/brigadier/suggestion/SimpleSuggestion.java b/src/main/java/moe/caramel/daydream/brigadier/suggestion/SimpleSuggestion.java
new file mode 100644
index 0000000000000000000000000000000000000000..01496ae337322cd91fe42444554a2ca36068e145
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/brigadier/suggestion/SimpleSuggestion.java
@@ -0,0 +1,11 @@
+package moe.caramel.daydream.brigadier.suggestion;
+
+import com.destroystokyo.paper.brigadier.BukkitBrigadierCommandSource;
+import com.mojang.brigadier.suggestion.SuggestionProvider;
+import org.jetbrains.annotations.NotNull;
+
+public interface SimpleSuggestion {
+
+    @NotNull
+    SuggestionProvider<BukkitBrigadierCommandSource> getSuggestion();
+}
diff --git a/src/main/java/moe/caramel/daydream/util/NumberRange.java b/src/main/java/moe/caramel/daydream/util/NumberRange.java
new file mode 100644
index 0000000000000000000000000000000000000000..facc2182e0920c9b71e44e8686f97b2afe461401
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/util/NumberRange.java
@@ -0,0 +1,44 @@
+package moe.caramel.daydream.util;
+
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * 숫자 범위를 지정합니다.
+ *
+ * @param <T> 숫자 타입 (Integer, Double ...)
+ */
+public final class NumberRange<T extends Number> {
+
+    private final T min, max;
+
+    /**
+     * 숫자 범위를 생성합니다.
+     *
+     * @param min 최솟값
+     * @param max 최댓값
+     */
+    public NumberRange(@NotNull T min, @NotNull T max) {
+        this.min = min;
+        this.max = max;
+    }
+
+    /**
+     * 최솟값을 가져옵니다.
+     *
+     * @return 최솟값
+     */
+    @NotNull
+    public T getMin() {
+        return min;
+    }
+
+    /**
+     * 최댓값을 가져옵니다.
+     *
+     * @return 최댓값
+     */
+    @NotNull
+    public T getMax() {
+        return max;
+    }
+}
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index a87399fa4838d4b2c1ff9cc35d433ae76cc149bf..50614f4afd86f6d818d346ada252126cbf260f9c 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -938,6 +938,19 @@ public final class Bukkit {
         return server.getPluginCommand(name);
     }
 
+    // Daydream start
+    /**
+     * Register command using Brigadier.
+     *
+     * @param plugin Plugin
+     * @param label command label
+     * @param command Command node to register
+     */
+    public static void registerCommand(@NotNull org.bukkit.plugin.Plugin plugin, @NotNull String label, @NotNull moe.caramel.daydream.brigadier.AbstractCommand command) {
+        server.registerCommand(plugin, label, command);
+    }
+    // Daydream end
+
     /**
      * Writes loaded players to disk.
      */
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index d5af4edbc7b209421a67bb304de86f4e7c675d2c..ef6d650ba46b3f6add3902b17d68bce936cfa74e 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -781,6 +781,17 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
     @Nullable
     public PluginCommand getPluginCommand(@NotNull String name);
 
+    // Daydream start
+    /**
+     * Register command using Brigadier.
+     *
+     * @param plugin Plugin
+     * @param label command label
+     * @param command Command node to register
+     */
+    public void registerCommand(@NotNull org.bukkit.plugin.Plugin plugin, @NotNull String label, @NotNull moe.caramel.daydream.brigadier.AbstractCommand command);
+    // Daydream end
+
     /**
      * Writes loaded players to disk.
      */
diff --git a/src/main/java/org/bukkit/command/Command.java b/src/main/java/org/bukkit/command/Command.java
index 4c608818a797c12cba6aa91643a915cf0bae77f5..dae4345a6ed4a071e7f250b14f470cef4aa61d36 100644
--- a/src/main/java/org/bukkit/command/Command.java
+++ b/src/main/java/org/bukkit/command/Command.java
@@ -185,7 +185,7 @@ public abstract class Command {
         }
 
             // Paper start - use components for permissionMessage
-        net.kyori.adventure.text.Component permissionMessage = this.permissionMessage != null ? this.permissionMessage : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(Bukkit.getPermissionMessage());
+        net.kyori.adventure.text.Component permissionMessage = this.permissionMessage != null ? this.permissionMessage : (Bukkit.getPermissionMessage().isEmpty() ? net.kyori.adventure.text.Component.translatable("command.failed", net.kyori.adventure.text.format.NamedTextColor.RED) : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(Bukkit.getPermissionMessage())); // Daydream
         if (!permissionMessage.equals(net.kyori.adventure.text.Component.empty())) {
             target.sendMessage(permissionMessage.replaceText(net.kyori.adventure.text.TextReplacementConfig.builder().matchLiteral("<permission>").replacement(permission).build()));
             // Paper end
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
index c943bd801b54519ba6cf5d45aec593d7b7438f99..074b434813ecc428df882ab6ccebc312619bcdbe 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
@@ -325,6 +325,18 @@ public abstract class JavaPlugin extends PluginBase {
         }
     }
 
+    // Daydream start
+    /**
+     * Register command using Brigadier.
+     *
+     * @param label command label
+     * @param command Command node to register
+     */
+    public void registerCommand(@NotNull String label, @NotNull moe.caramel.daydream.brigadier.AbstractCommand command) {
+        this.getServer().registerCommand(this, label, command);
+    }
+    // Daydream end
+
     @Override
     public void onLoad() {}
 
