From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Fri, 4 Feb 2022 11:18:12 +0900
Subject: [PATCH] Add more Advancement API


diff --git a/src/main/java/io/papermc/paper/advancement/AdvancementDisplay.java b/src/main/java/io/papermc/paper/advancement/AdvancementDisplay.java
index 19202e17f362fdffca472178b102d1336349590c..0581b8b425d2e7553fe64bed695253c9d0a8f6d1 100644
--- a/src/main/java/io/papermc/paper/advancement/AdvancementDisplay.java
+++ b/src/main/java/io/papermc/paper/advancement/AdvancementDisplay.java
@@ -104,6 +104,48 @@ public interface AdvancementDisplay {
      */
     @NotNull Component displayName();
 
+    // Daydream start - Add more Advancement API
+    /**
+     * 발전 과제 디스플레이의 위치가 재계산되지 않도록 고정되어 있는지를 확인합니다.
+     *
+     * @return 고정 여부
+     */
+    boolean isPositionLocked();
+
+    /**
+     * 발전 과제 디스플레이의 위치가 재계산되지 않도록 고정되어 있는지를 설정합니다.
+     *
+     * @param lock 고정 여부
+     * @return this
+     */
+    @NotNull
+    AdvancementDisplay setPositionLock(final boolean lock);
+
+    /**
+     * 발전 과제 디스플레이의 X 위치를 가져옵니다.
+     *
+     * @return X 위치
+     */
+    float positionX();
+
+    /**
+     * 발전 과제 디스플레이의 Y 위치를 가져옵니다.
+     *
+     * @return Y 위치
+     */
+    float positionY();
+
+    /**
+     * 발전 과제 디스플레이의 위치를 설정합니다.
+     *
+     * @param x X 위치
+     * @param y Y 위치
+     * @return this
+     */
+    @NotNull
+    AdvancementDisplay position(final float x, final float y);
+    // Daydream end - Add more Advancement API
+
     /**
      * Defines how the {@link #icon()} appears in the advancements screen and
      * the color used with the {@link #title() advancement name}.
diff --git a/src/main/java/moe/caramel/daydream/advancement/AdvancementBuilder.java b/src/main/java/moe/caramel/daydream/advancement/AdvancementBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..98cb796221c7bef250861a2f89e9ccf992c4f141
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/advancement/AdvancementBuilder.java
@@ -0,0 +1,310 @@
+package moe.caramel.daydream.advancement;
+
+import com.google.gson.JsonElement;
+import io.papermc.paper.advancement.AdvancementDisplay;
+import moe.caramel.daydream.plugin.AdvancementProvider;
+import net.kyori.adventure.text.Component;
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.advancement.Advancement;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import java.util.List;
+
+/**
+ * 발전 과제 빌더
+ */
+@ApiStatus.NonExtendable
+public interface AdvancementBuilder {
+
+    /**
+     * 발전 과제 프로바이더를 가져옵니다.
+     *
+     * @return 발전 과제 프로바이더
+     */
+    @NotNull
+    AdvancementProvider getProvider();
+
+    // ===========================
+
+    /**
+     * 기본 발전 과제 저장 구역
+     */
+    NamespacedKey MAIN_SAVE_SECTION = NamespacedKey.minecraft("main");
+
+    /**
+     * 발전 과제 저장 구역을 설정합니다.
+     * <p>기본 저장 구역인 {@link #MAIN_SAVE_SECTION}이 아닌 경우, 개발자가 진행도 저장을 직접 구현해야합니다.</p>
+     *
+     * @param section 저장 구역
+     * @return this
+     */
+    @NotNull
+    AdvancementBuilder saveSection(final @NotNull NamespacedKey section);
+
+    // ===========================
+
+    /**
+     * 부모 발전 과제를 설정합니다.
+     *
+     * @param parent 부모 발전 과제
+     * @return this
+     */
+    @NotNull
+    AdvancementBuilder parent(final @NotNull Advancement parent);
+
+    /**
+     * 이 발전 과제가 항상 보여야 되는 경우에 사용합니다.
+     *
+     * @return this
+     */
+    @NotNull
+    AdvancementBuilder alwaysVisible();
+
+    // ===========================
+
+    /**
+     * 이 발전 과제의 디스플레이를 설정합니다.
+     *
+     * @param icon 프레임에 표시되는 아이콘
+     * @param title 제목
+     * @param description 설명
+     * @param background 배경 텍스처 위치 (루트 발전 과제 전용)
+     * @param frame 프레임
+     * @param showToast 완료 시에 토스트를 출력해야 하는 경우 {@code true}
+     * @param announceChat 완료 시에 메시지를 보내야 하는 경우 {@code true}
+     * @param hidden 발전 과제가 숨겨진 경우 {@code true}
+     * @return this
+     */
+    @NotNull
+    default AdvancementBuilder display(
+        final @NotNull Material icon, final @NotNull Component title, final @NotNull Component description,
+        final @Nullable NamespacedKey background, final @NotNull AdvancementDisplay.Frame frame,
+        final boolean showToast, final boolean announceChat, final boolean hidden
+    ) {
+        return display(new ItemStack(icon), title, description, background, frame, showToast, announceChat, hidden);
+    }
+
+    /**
+     * 이 발전 과제의 디스플레이를 설정합니다.
+     *
+     * @param icon 프레임에 표시되는 아이콘
+     * @param title 제목
+     * @param description 설명
+     * @param background 배경 텍스처 위치 (루트 발전 과제 전용)
+     * @param frame 프레임
+     * @param showToast 완료 시에 토스트를 출력해야 하는 경우 {@code true}
+     * @param announceChat 완료 시에 메시지를 보내야 하는 경우 {@code true}
+     * @param hidden 발전 과제가 숨겨진 경우 {@code true}
+     * @return this
+     */
+    @NotNull
+    default AdvancementBuilder display(
+        final @NotNull ItemStack icon, final @NotNull Component title, final @NotNull Component description,
+        final @Nullable NamespacedKey background, final @NotNull AdvancementDisplay.Frame frame,
+        final boolean showToast, final boolean announceChat, final boolean hidden
+    ) {
+        this.display(getProvider().createDisplay(icon, title, description, background, frame, showToast, announceChat, hidden));
+        return this;
+    }
+
+    /**
+     * 이 발전 과제의 디스플레이를 고정된 위치로 설정합니다.
+     *
+     * @param icon 프레임에 표시되는 아이콘
+     * @param title 제목
+     * @param description 설명
+     * @param background 배경 텍스처 위치 (루트 발전 과제 전용)
+     * @param frame 프레임
+     * @param x 고정할 X 위치
+     * @param y 고정할 Y 위치
+     * @param showToast 완료 시에 토스트를 출력해야 하는 경우 {@code true}
+     * @param announceChat 완료 시에 메시지를 보내야 하는 경우 {@code true}
+     * @param hidden 발전 과제가 숨겨진 경우 {@code true}
+     * @return this
+     */
+    @NotNull
+    default AdvancementBuilder display(
+        final @NotNull Material icon, final @NotNull Component title, final @NotNull Component description,
+        final @Nullable NamespacedKey background, final @NotNull AdvancementDisplay.Frame frame,
+        final float x, final float y, final boolean showToast, final boolean announceChat, final boolean hidden
+    ) {
+        return display(new ItemStack(icon), title, description, background, frame, x, y, showToast, announceChat, hidden);
+    }
+
+    /**
+     * 이 발전 과제의 디스플레이를 고정된 위치로 설정합니다.
+     *
+     * @param icon 프레임에 표시되는 아이콘
+     * @param title 제목
+     * @param description 설명
+     * @param background 배경 텍스처 위치 (루트 발전 과제 전용)
+     * @param frame 프레임
+     * @param x 고정할 X 위치
+     * @param y 고정할 Y 위치
+     * @param showToast 완료 시에 토스트를 출력해야 하는 경우 {@code true}
+     * @param announceChat 완료 시에 메시지를 보내야 하는 경우 {@code true}
+     * @param hidden 발전 과제가 숨겨진 경우 {@code true}
+     * @return this
+     */
+    @NotNull
+    default AdvancementBuilder display(
+        final @NotNull ItemStack icon, final @NotNull Component title, final @NotNull Component description,
+        final @Nullable NamespacedKey background, final @NotNull AdvancementDisplay.Frame frame,
+        final float x, final float y, final boolean showToast, final boolean announceChat, final boolean hidden
+    ) {
+        this.display(getProvider()
+            .createDisplay(icon, title, description, background, frame, showToast, announceChat, hidden)
+            .setPositionLock(true)
+            .position(x, y));
+        return this;
+    }
+
+    /**
+     * 이 발전 과제의 디스플레이를 설정합니다.
+     *
+     * @param display 디스플레이
+     * @return this
+     */
+    @NotNull
+    AdvancementBuilder display(final @NotNull AdvancementDisplay display);
+
+    // ===========================
+
+    /**
+     * 이 발전 과제의 보상을 설정합니다.
+     *
+     * @param experience 제공할 경험치
+     * @param loot 전리품 테이블 키
+     * @param recipes 레시피 키
+     * @param function 실행할 함수
+     * @return 발전 과제 보상
+     */
+    @NotNull
+    default AdvancementBuilder reward(
+        final int experience,
+        final @NotNull List<NamespacedKey> loot, final @NotNull List<NamespacedKey> recipes,
+        final @Nullable NamespacedKey function
+    ) {
+        return reward(this.getProvider().createReward(experience, loot, recipes, function));
+    }
+
+    /**
+     * 이 발전 과제의 보상을 설정합니다.
+     *
+     * @param reward 보상
+     * @return this
+     */
+    @NotNull
+    AdvancementBuilder reward(final @NotNull AdvancementReward reward);
+
+    // ===========================
+
+    /**
+     * 달성 기준을 추가합니다. 트리거는 JSON 형식입니다.
+     *
+     * @param name 달성 기준의 이름
+     * @param criterion JSON 예시 <pre>{@code {
+     *   "conditions": {
+     *     "player": [
+     *       {
+     *         "condition": "minecraft:entity_properties",
+     *         "entity": "this",
+     *         "predicate": {
+     *           "location": {
+     *             "biome": "minecraft:badlands"
+     *           }
+     *         }
+     *       }
+     *     ]
+     *   },
+     *   "trigger": "minecraft:location"
+     * }}</pre>
+     * @return this
+     */
+    @NotNull
+    AdvancementBuilder addCriterion(final @NotNull String name, final @NotNull JsonElement criterion);
+
+    /**
+     * 달성 기준을 추가합니다. 트리거는 Impossible 트리거로 고정됩니다.
+     *
+     * @param name 달성 기준의 이름
+     * @return this
+     */
+    @NotNull
+    AdvancementBuilder addImpossibleCriterion(final @NotNull String name);
+
+    /**
+     * 사용자 지정 트리거를 사용한 달성 기준을 추가합니다.
+     *
+     * @param name 달성 기준의 이름
+     * @param key 사용자 지정 트리거 ID
+     * @return this
+     */
+    @NotNull
+    AdvancementBuilder addCustomTriggerCriterion(final @NotNull String name, final @NotNull NamespacedKey key);
+
+    /**
+     * 플레이어가 발전 과제를 완료하는 데 필요한 조건을 설정합니다.
+     *
+     * @param and {@code true}인 경우, 플레이어가 모든 기준을 완료해야합니다. ({@code false}인 경우, OR)
+     * @return this
+     */
+    @NotNull
+    AdvancementBuilder requirements(final boolean and);
+
+    /**
+     * 플레이어가 발전 과제를 완료하는 데 필요한 조건을 설정합니다.
+     *
+     * @param requirements 필요한 조건
+     * @return this
+     */
+    @NotNull
+    AdvancementBuilder requirements(final @NotNull List<List<String>> requirements);
+
+    /**
+     * 이 발전 과제에 카운트를 사용합니다. 기준 설정이 필요하지 않습니다.
+     *
+     * @param count 최대 카운트
+     * @return this
+     */
+    @NotNull
+    AdvancementBuilder enableCount(final int count);
+
+    /**
+     * 이 발전 과제에 카운트를 사용합니다.
+     *
+     * @param count 최대 카운트
+     * @param triggerId 사용자 지정 트리거 ID
+     * @return this
+     */
+    @NotNull
+    AdvancementBuilder enableCount(final int count, final @NotNull NamespacedKey triggerId);
+
+    /**
+     * 이 발전 과제에 카운트를 사용합니다.
+     *
+     * @param count 최대 카운트
+     * @param criterion JSON 예시 <pre>{@code {
+     *   "conditions": {
+     *     "player": [
+     *       {
+     *         "condition": "minecraft:entity_properties",
+     *         "entity": "this",
+     *         "predicate": {
+     *           "location": {
+     *             "biome": "minecraft:badlands"
+     *           }
+     *         }
+     *       }
+     *     ]
+     *   },
+     *   "trigger": "minecraft:location"
+     * }}</pre>
+     * @return this
+     */
+    @NotNull
+    AdvancementBuilder enableCount(final int count, final @NotNull JsonElement criterion);
+}
diff --git a/src/main/java/moe/caramel/daydream/advancement/AdvancementReward.java b/src/main/java/moe/caramel/daydream/advancement/AdvancementReward.java
new file mode 100644
index 0000000000000000000000000000000000000000..74347bc8c9a45be1cb9af9fb41641e903f86b95f
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/advancement/AdvancementReward.java
@@ -0,0 +1,61 @@
+package moe.caramel.daydream.advancement;
+
+import org.bukkit.NamespacedKey;
+import org.bukkit.inventory.Recipe;
+import org.bukkit.loot.LootTable;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import java.util.List;
+
+/**
+ * 발전 과제 보상
+ */
+public interface AdvancementReward {
+
+    /**
+     * 플레이어가 받게 될 경험치를 가져옵니다.
+     *
+     * @return 경험치
+     */
+    int experience();
+
+    /**
+     * 전리품 테이블의 키 목록을 가져옵니다.
+     *
+     * @return 전리품 테이블의 키 목록
+     */
+    @NotNull
+    List<NamespacedKey> lootKeys();
+
+    /**
+     * 전리품 테이블 목록을 가져옵니다.
+     *
+     * @return 전리품 테이블 목록
+     */
+    @NotNull
+    List<LootTable> loot();
+
+    /**
+     * 레시피의 키 목록을 가져옵니다.
+     *
+     * @return 레시피의 키 목록
+     */
+    @NotNull
+    List<NamespacedKey> recipeKeys();
+
+    /**
+     * 레시피 목록을 가져옵니다.
+     *
+     * @return 레시피 목록
+     */
+    @NotNull
+    List<Recipe> recipes();
+
+    /**
+     * 실행될 함수의 키를 가져옵니다.
+     *
+     * @return 실행될 함수의 키
+     */
+    @Nullable
+    NamespacedKey function();
+}
diff --git a/src/main/java/moe/caramel/daydream/advancement/AdvancementSaveFormat.java b/src/main/java/moe/caramel/daydream/advancement/AdvancementSaveFormat.java
new file mode 100644
index 0000000000000000000000000000000000000000..f7924313d2e08cef47561f4470194193292a1be0
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/advancement/AdvancementSaveFormat.java
@@ -0,0 +1,60 @@
+package moe.caramel.daydream.advancement;
+
+import com.google.gson.JsonElement;
+import org.jetbrains.annotations.NotNull;
+import java.util.Objects;
+
+/**
+ * 발전 과제 저장 포맷
+ *
+ * @param <T> 타입
+ */
+public final class AdvancementSaveFormat<T> {
+
+    /**
+     * Json (기본)
+     */
+    public static final AdvancementSaveFormat<JsonElement> JSON = new AdvancementSaveFormat<>("json", false);
+    /**
+     * 압축된 Json
+     */
+    public static final AdvancementSaveFormat<JsonElement> COMPRESSED_JSON = new AdvancementSaveFormat<>("compressed_json", true);
+    /**
+     * NBT
+     */
+    public static final AdvancementSaveFormat<byte[]> NBT = new AdvancementSaveFormat<>("nbt", false);
+    /**
+     * 압축된 NBT
+     */
+    public static final AdvancementSaveFormat<byte[]> COMPRESSED_NBT = new AdvancementSaveFormat<>("compressed_nbt", true);
+
+    private final String name;
+    private final boolean compressed;
+
+    private AdvancementSaveFormat(final @NotNull String name, final boolean compressed) {
+        this.name = name;
+        this.compressed = compressed;
+    }
+
+    /**
+     * 요구하는 데이터 형식이 압축된 데이터 형식인지 확인합니다.
+     *
+     * @return 만약 {@code true}인 경우 압축된 데이터를 요구합니다
+     */
+    public boolean isCompressed() {
+        return compressed;
+    }
+
+    @Override
+    public boolean equals(final Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        final AdvancementSaveFormat<?> that = (AdvancementSaveFormat<?>) o;
+        return (compressed == that.compressed) && Objects.equals(name, that.name);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(name, compressed);
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementPreLoadEvent.java b/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementPreLoadEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..21bbda2d1fae053aa5734652c5670a74b6e1d06c
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementPreLoadEvent.java
@@ -0,0 +1,81 @@
+package moe.caramel.daydream.event.player;
+
+import com.google.gson.JsonElement;
+import org.bukkit.entity.Player;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * 플레이어의 발전 과제 데이터를 로드하기 직전에 호출됩니다.
+ * <p>일반적으로 {@link org.bukkit.event.player.PlayerJoinEvent} 이전에 호출됩니다.</p>
+ *
+ * @param <T> 타입
+ */
+public sealed class PlayerAdvancementPreLoadEvent<T> extends PlayerEvent {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+    public @NotNull HandlerList getHandlers() { return HANDLER_LIST; }
+    public static @NotNull HandlerList getHandlerList() { return HANDLER_LIST; }
+
+    private final boolean compressed;
+    private List<T> data;
+
+    @ApiStatus.Internal
+    public PlayerAdvancementPreLoadEvent(final @NotNull Player who, final boolean compressed) {
+        super(who);
+        this.compressed = compressed;
+        this.data = new ArrayList<>();
+    }
+
+    /**
+     * 요구하는 데이터 형식이 압축된 데이터 형식인지 확인합니다.
+     *
+     * @return 만약 {@code true}인 경우 압축된 데이터를 요구합니다
+     */
+    public boolean isCompressed() {
+        return compressed;
+    }
+
+    /**
+     * 로드할 발전 과제 데이터를 가져옵니다.
+     *
+     * @return 발전 과제 데이터
+     */
+    @NotNull
+    public List<T> getReplaceData() {
+        return data;
+    }
+
+    /**
+     * 로드할 발전 과제 데이터를 설정합니다.
+     *
+     * @param data 발전 과제 데이터
+     */
+    public void addReplaceData(final @NotNull T data) {
+        this.data.add(data);
+    }
+
+    /**
+     * 서버가 Json 형식으로 데이터를 저장하는 경우
+     */
+    public static final class Json extends PlayerAdvancementPreLoadEvent<JsonElement> {
+
+        public Json(final @NotNull Player who, final boolean compressed) {
+            super(who, compressed);
+        }
+    }
+
+    /**
+     * 서버가 Json 형식으로 데이터를 저장하는 경우
+     */
+    public static final class Nbt extends PlayerAdvancementPreLoadEvent<byte[]> {
+
+        public Nbt(final @NotNull Player who, final boolean compressed) {
+            super(who, compressed);
+        }
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementSaveEvent.java b/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementSaveEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..81cf8963c7a1ec67fb0368c2f457a3a77561b589
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementSaveEvent.java
@@ -0,0 +1,95 @@
+package moe.caramel.daydream.event.player;
+
+import com.google.gson.JsonElement;
+import org.bukkit.NamespacedKey;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * 플레이어 발전 과제 데이터가 저장될 때 호출됩니다.
+ *
+ * @param <T> 타입
+ */
+public sealed class PlayerAdvancementSaveEvent<T> extends PlayerEvent implements Cancellable {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+    public @NotNull HandlerList getHandlers() { return HANDLER_LIST; }
+    public static @NotNull HandlerList getHandlerList() { return HANDLER_LIST; }
+
+    private final NamespacedKey section;
+    private final T data;
+    private final boolean compressed;
+    private boolean cancelled;
+
+    @ApiStatus.Internal
+    public PlayerAdvancementSaveEvent(final @NotNull Player who, final @NotNull NamespacedKey section, final @NotNull T data, final boolean compressed) {
+        super(who);
+        this.section = section;
+        this.data = data;
+        this.compressed = compressed;
+    }
+
+    /**
+     * 발전 과제의 저장 구역을 가져옵니다.
+     * <p>실제 파일로는 바닐라 메인 구역 데이터만 저장됩니다.</p>
+     *
+     * @return 저장 구역
+     */
+    @NotNull
+    public NamespacedKey getSection() {
+        return section;
+    }
+
+    /**
+     * 요구하는 데이터 형식이 압축된 데이터 형식인지 확인합니다.
+     *
+     * @return 만약 {@code true}인 경우 압축된 데이터를 요구합니다
+     */
+    public boolean isCompressed() {
+        return compressed;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return this.cancelled;
+    }
+
+    @Override
+    public void setCancelled(final boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    /**
+     * 저장될 발전 과제 데이터를 가져옵니다.
+     *
+     * @return 발전 과제 데이터
+     */
+    @NotNull
+    public T getData() {
+        return data;
+    }
+
+    /**
+     * 서버가 Json 형식으로 데이터를 저장하는 경우
+     */
+    public static final class Json extends PlayerAdvancementSaveEvent<JsonElement> {
+
+        public Json(final @NotNull Player who, final @NotNull NamespacedKey section, final @NotNull JsonElement json, final boolean compressed) {
+            super(who, section, json, compressed);
+        }
+    }
+
+    /**
+     * 서버가 Json 형식으로 데이터를 저장하는 경우
+     */
+    public static final class Nbt extends PlayerAdvancementSaveEvent<byte[]> {
+
+        public Nbt(final @NotNull Player who, final @NotNull NamespacedKey section, final @NotNull byte[] nbt, final boolean compressed) {
+            super(who, section, nbt, compressed);
+        }
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementScreenEvent.java b/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementScreenEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..cb2e32a8d978d4b7492f62f7e4f446ce465764d0
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementScreenEvent.java
@@ -0,0 +1,86 @@
+package moe.caramel.daydream.event.player;
+
+import org.bukkit.NamespacedKey;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * 플레이어가 발전 과제 화면을 열거나 닫았을 경우 호출됩니다.
+ */
+public final class PlayerAdvancementScreenEvent extends PlayerEvent implements Cancellable {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+    public @NotNull HandlerList getHandlers() { return HANDLER_LIST; }
+    public static @NotNull HandlerList getHandlerList() { return HANDLER_LIST; }
+
+    private final Action action;
+    private final NamespacedKey key;
+    private boolean cancelled;
+
+    @ApiStatus.Internal
+    public PlayerAdvancementScreenEvent(final @NotNull Player player, final @NotNull Action action, final @Nullable NamespacedKey key) {
+        super(player);
+        this.action = action;
+        this.key = key;
+    }
+
+    /**
+     * 발전 과제 화면을 닫을지의 여부를 가져옵니다.
+     *
+     * @return {@code true}인 경우 스크린을 닫습니다.
+     * {@link Action#CLOSED_SCREEN}인 경우 작동하지 않습니다.
+     */
+    @Override
+    public boolean isCancelled() {
+        return this.cancelled;
+    }
+
+    /**
+     * 스크린을 닫을지의 여부를 가져옵니다.
+     * 인수가 {@code true}인 경우 스크린을 닫으나, {@link Action#CLOSED_SCREEN}인 경우 작동하지 않습니다.
+     */
+    @Override
+    public void setCancelled(final boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    /**
+     * 플레이어가 요청한 액션을 가져옵니다.
+     *
+     * @return 플레이어의 요청
+     */
+    @NotNull
+    public Action getAction() {
+        return action;
+    }
+
+    /**
+     * 플레이어가 요청한 탭의 {@link NamespacedKey}를 가져옵니다.
+     *
+     * @return 플레이어가 요청한 탭의 {@link NamespacedKey}.
+     * <p>{@link Action#CLOSED_SCREEN}인 경우 {@code null}을 반환합니다.</p>
+     */
+    @Nullable
+    public NamespacedKey getKey() {
+        return key;
+    }
+
+    /**
+     * 발전 과제 요청 목록
+     */
+    public enum Action {
+        /**
+         * 새로운 발전 과제 탭을 오픈하는 경우
+         */
+        OPENED_TAB,
+        /**
+         * 발전 과제 화면을 닫는 경우
+         */
+        CLOSED_SCREEN
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/plugin/AdvancementProvider.java b/src/main/java/moe/caramel/daydream/plugin/AdvancementProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..bfb751ba57b7761dfa81df76d044c6c3c8efc584
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/plugin/AdvancementProvider.java
@@ -0,0 +1,110 @@
+package moe.caramel.daydream.plugin;
+
+import com.google.gson.JsonElement;
+import io.papermc.paper.advancement.AdvancementDisplay;
+import moe.caramel.daydream.advancement.AdvancementBuilder;
+import moe.caramel.daydream.advancement.AdvancementReward;
+import net.kyori.adventure.text.Component;
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.advancement.Advancement;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import java.util.List;
+
+/**
+ * Advancement Provider
+ */
+@ApiStatus.NonExtendable
+public interface AdvancementProvider {
+
+    /**
+     * 발전 과제 빌더를 생성합니다.
+     *
+     * @return 발전 과제 빌더
+     */
+    @NotNull
+    AdvancementBuilder createBuilder();
+
+    /**
+     * 발전 과제 디스플레이를 생성합니다.
+     *
+     * @param icon 프레임에 표시되는 아이콘
+     * @param title 제목
+     * @param description 설명
+     * @param background 배경 텍스처 위치 (루트 발전 과제 전용)
+     * @param frame 프레임
+     * @param showToast 완료 시에 토스트를 출력해야 하는 경우 {@code true}
+     * @param announceChat 완료 시에 메시지를 보내야 하는 경우 {@code true}
+     * @param hidden 발전 과제가 숨겨진 경우 {@code true}
+     * @return 발전 과제 디스플레이
+     */
+    @NotNull
+    default AdvancementDisplay createDisplay(
+        final @NotNull Material icon, final @NotNull Component title, final @NotNull Component description,
+        final @Nullable NamespacedKey background, final @NotNull AdvancementDisplay.Frame frame,
+        final boolean showToast, final boolean announceChat, final boolean hidden
+    ) {
+        return createDisplay(new ItemStack(icon), title, description, background, frame, showToast, announceChat, hidden);
+    }
+
+    /**
+     * 발전 과제 디스플레이를 생성합니다.
+     *
+     * @param icon 프레임에 표시되는 아이콘
+     * @param title 제목
+     * @param description 설명
+     * @param background 배경 텍스처 위치 (루트 발전 과제 전용)
+     * @param frame 프레임
+     * @param showToast 완료 시에 토스트를 출력해야 하는 경우 {@code true}
+     * @param announceChat 완료 시에 메시지를 보내야 하는 경우 {@code true}
+     * @param hidden 발전 과제가 숨겨진 경우 {@code true}
+     * @return this
+     */
+    @NotNull
+    AdvancementDisplay createDisplay(
+        final @NotNull ItemStack icon, final @NotNull Component title, final @NotNull Component description,
+        final @Nullable NamespacedKey background, final @NotNull AdvancementDisplay.Frame frame,
+        final boolean showToast, final boolean announceChat, final boolean hidden
+    );
+
+    /**
+     * 발전 과제 보상을 생성합니다.
+     *
+     * @param experience 제공할 경험치
+     * @param loot 전리품 테이블 키
+     * @param recipes 레시피 키
+     * @param function 실행할 함수
+     * @return 발전 과제 보상
+     */
+    @NotNull
+    AdvancementReward createReward(
+        final int experience,
+        final @NotNull List<NamespacedKey> loot, final @NotNull List<NamespacedKey> recipes,
+        final @Nullable NamespacedKey function
+    );
+
+    // ===========================
+
+    /**
+     * 발전 과제를 서버에 등록합니다.
+     *
+     * @param key 중복되지 않는 발전 과제 식별 키
+     * @param builder 발전 과제 빌더
+     * @return 발전 과제
+     */
+    @NotNull
+    Advancement register(final @NotNull NamespacedKey key, final @NotNull AdvancementBuilder builder);
+
+    /**
+     * 발전 과제를 서버에 등록합니다.
+     *
+     * @param key 중복되지 않는 발전 과제 식별 키
+     * @param json 발전 과제 JSON 데이터
+     * @return 발전 과제
+     */
+    @NotNull
+    Advancement register(final @NotNull NamespacedKey key, final @NotNull JsonElement json);
+}
diff --git a/src/main/java/moe/caramel/daydream/plugin/PluginDatapackLoader.java b/src/main/java/moe/caramel/daydream/plugin/PluginDatapackLoader.java
index 6c878c968be02870c8552eb8db3d7b652e605540..9bc89a99c134ff4ee4904a60cf73fbd73dce4715 100644
--- a/src/main/java/moe/caramel/daydream/plugin/PluginDatapackLoader.java
+++ b/src/main/java/moe/caramel/daydream/plugin/PluginDatapackLoader.java
@@ -9,4 +9,25 @@ import org.jetbrains.annotations.NotNull;
 @ApiStatus.OverrideOnly
 @ApiStatus.Experimental
 public interface PluginDatapackLoader {
+
+    // Daydream start - Add more Advancement API
+    /**
+     * 발전 과제를 서버에 등록할 때 호출됩니다.
+     *
+     * @param dataFolder 플러그인 데이터 폴더
+     * @param provider 발전 과제 제공자
+     */
+    default void registerAdvancement(final @NotNull java.io.File dataFolder, final @NotNull AdvancementProvider provider) {
+        this.registerAdvancement(provider);
+    }
+
+    /**
+     * 발전 과제를 서버에 등록할 때 호출됩니다.
+     *
+     * @param provider 발전 과제 제공자
+     * @deprecated {@link #registerAdvancement(java.io.File, AdvancementProvider)}를 사용해주세요.
+     */
+    @Deprecated(forRemoval = true)
+    default void registerAdvancement(final @NotNull AdvancementProvider provider) { }
+    // Daydream end - Add more Advancement API
 }
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index a3ade93b28e160a4d260130debeda0eb648d1e25..3ede33a2269805cef78effe5bdae5883a726a53b 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -2434,6 +2434,41 @@ public final class Bukkit {
         return server.advancementIterator();
     }
 
+    // Daydream start - Add more Advancement API
+    /**
+     * 사용자 지정 트리거를 실행합니다.
+     *
+     * @param player 대상 플레이어
+     * @param triggerId 트리거 ID
+     */
+    public static void triggerCustomCriteria(@NotNull Player player, @NotNull NamespacedKey triggerId) {
+        server.triggerCustomCriteria(player, triggerId);
+    }
+
+    /**
+     * 사용자 지정 트리거를 실행합니다.
+     *
+     * @param player 대상 플레이어
+     * @param item 대상 아이템 (조건 검사에 사용)
+     * @param triggerId 트리거 ID
+     */
+    public static void triggerCustomCriteria(@NotNull Player player, @NotNull NamespacedKey triggerId, @Nullable ItemStack item) {
+        server.triggerCustomCriteria(player, triggerId, item);
+    }
+
+    /**
+     * 사용자 지정 트리거를 실행합니다.
+     *
+     * @param player 대상 플레이어
+     * @param item 대상 아이템 (조건 검사에 사용)
+     * @param target 대상 타겟 플레이어 (조건 검사에 사용)
+     * @param triggerId 트리거 ID
+     */
+    public static void triggerCustomCriteria(@NotNull Player player, @NotNull NamespacedKey triggerId, @Nullable ItemStack item, @Nullable Player target) {
+        server.triggerCustomCriteria(player, triggerId, item, target);
+    }
+    // Daydream end - Add more Advancement API
+
     /**
      * Creates a new {@link BlockData} instance for the specified Material, with
      * all properties initialized to unspecified defaults.
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 72227fb5d032e8d73d508c1c7552c364fe743ca7..407ebae95cfb66ea4671fac00c46485067abae4f 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -2084,6 +2084,35 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
     @NotNull
     Iterator<Advancement> advancementIterator();
 
+    // Daydream start - Add more Advancement API
+    /**
+     * 사용자 지정 트리거를 실행합니다.
+     *
+     * @param player 대상 플레이어
+     * @param triggerId 트리거 ID
+     */
+    void triggerCustomCriteria(@NotNull Player player, @NotNull NamespacedKey triggerId);
+
+    /**
+     * 사용자 지정 트리거를 실행합니다.
+     *
+     * @param player 대상 플레이어
+     * @param item 대상 아이템 (조건 검사에 사용)
+     * @param triggerId 트리거 ID
+     */
+    void triggerCustomCriteria(@NotNull Player player, @NotNull NamespacedKey triggerId, @Nullable ItemStack item);
+
+    /**
+     * 사용자 지정 트리거를 실행합니다.
+     *
+     * @param player 대상 플레이어
+     * @param item 대상 아이템 (조건 검사에 사용)
+     * @param target 대상 타겟 플레이어 (조건 검사에 사용)
+     * @param triggerId 트리거 ID
+     */
+    void triggerCustomCriteria(@NotNull Player player, @NotNull NamespacedKey triggerId, @Nullable ItemStack item, @Nullable Player target);
+    // Daydream end - Add more Advancement API
+
     /**
      * Creates a new {@link BlockData} instance for the specified Material, with
      * all properties initialized to unspecified defaults.
diff --git a/src/main/java/org/bukkit/advancement/Advancement.java b/src/main/java/org/bukkit/advancement/Advancement.java
index 243e5f2debad7f12210169e15ef0b29763e988bb..0c690067883fdbe627d8a739c2fda7e74446636d 100644
--- a/src/main/java/org/bukkit/advancement/Advancement.java
+++ b/src/main/java/org/bukkit/advancement/Advancement.java
@@ -68,4 +68,36 @@ public interface Advancement extends Keyed {
     @NotNull
     Advancement getRoot();
     // Paper end
+
+    // Daydream start - Add more Advancement API
+    /**
+     * 이 발전 과제의 저장 구역을 가져옵니다.
+     *
+     * @return 저장 구역
+     */
+    @NotNull
+    org.bukkit.NamespacedKey getSaveSection();
+
+    /**
+     * 발전 과제 보상을 가져옵니다.
+     *
+     * @return 발전 과제 보상
+     */
+    @NotNull
+    moe.caramel.daydream.advancement.AdvancementReward getReward();
+
+    /**
+     * 발전 과제가 카운트를 사용하는지 확인합니다.
+     *
+     * @return 이 발전 과제가 카운트를 사용하는 경우 {@code true}를 반환
+     */
+    boolean useCount();
+
+    /**
+     * 발전 과제의 최대 카운트를 가져옵니다.
+     *
+     * @return 발전 과제의 최대 카운트
+     */
+    int maxCount();
+    // Daydream end - Add more Advancement API
 }
diff --git a/src/main/java/org/bukkit/advancement/AdvancementProgress.java b/src/main/java/org/bukkit/advancement/AdvancementProgress.java
index f9bc179da071e7bd57cefc50d6763317fb643b74..3b1b55977d94de338f536896babedc7e6212e557 100644
--- a/src/main/java/org/bukkit/advancement/AdvancementProgress.java
+++ b/src/main/java/org/bukkit/advancement/AdvancementProgress.java
@@ -67,4 +67,36 @@ public interface AdvancementProgress {
      */
     @NotNull
     Collection<String> getAwardedCriteria();
+
+    // Daydream start - Add more Advancement API
+    /**
+     * 발전 과제 진행도의 카운트를 증가시킵니다.
+     *
+     * @throws IllegalStateException 이 발전 과제 진행도가 카운트를 사용하지 않습니다.
+     * @return 증가되었다면 {@code true}, 최대 범위에 도달한 경우 {@code false}를 반환
+     */
+    boolean increaseCount();
+
+    /**
+     * 발전 과제 진행도의 카운트를 감소시킵니다.
+     *
+     * @throws IllegalStateException 이 발전 과제 진행도가 카운트를 사용하지 않습니다.
+     * @return 감소되었다면 {@code true}, 최소 범위에 도달한 경우 {@code false}를 반환
+     */
+    boolean decreaseCount();
+
+    /**
+     * 발전 과제 진행도가 카운트를 사용하는지 확인합니다.
+     *
+     * @return 이 발전 과제 진행도가 카운트를 사용하는 경우 {@code true}를 반환
+     */
+    boolean useCount();
+
+    /**
+     * 이 발전 과제 진행도의 현재 카운트를 가져옵니다.
+     *
+     * @return 현재 카운트
+     */
+    int currentCount();
+    // Daydream end - Add more Advancement API
 }
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index a5876d5afe401d18148fad07c2d360726fa1d1b2..a64aa85e022c72bf50c5466d3d1a13d1d14fed5c 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -3171,6 +3171,38 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     @NotNull
     public AdvancementProgress getAdvancementProgress(@NotNull Advancement advancement);
 
+    // Daydream start - Add more Advancement API
+    /**
+     * 플레이어의 직렬화된 발전 과제 데이터를 가져옵니다.
+     *
+     * @param format 저장 형식
+     * @return 직렬화된 발전 과제 데이터
+     * @param <T> 데이터 타입
+     */
+    @NotNull
+    public <T> T serializeAdvancementProgress(@NotNull moe.caramel.daydream.advancement.AdvancementSaveFormat<T> format);
+
+    /**
+     * 플레이어의 직렬화된 발전 과제 데이터를 가져옵니다.
+     *
+     * @param format 저장 형식
+     * @param saveSection 저장 구역
+     * @return 직렬화된 발전 과제 데이터
+     * @param <T> 데이터 타입
+     */
+    @NotNull
+    public <T> T serializeAdvancementProgress(@NotNull moe.caramel.daydream.advancement.AdvancementSaveFormat<T> format, @NotNull org.bukkit.NamespacedKey saveSection);
+
+    /**
+     * 플레이어에게 발전 과제 알림을 전송합니다.
+     *
+     * @param item 표시할 아이템
+     * @param title 표시할 제목
+     * @param frame 표시할 프레임
+     */
+    public void sendAdvancementAlert(@NotNull ItemStack item, @NotNull net.kyori.adventure.text.Component title, @NotNull io.papermc.paper.advancement.AdvancementDisplay.Frame frame);
+    // Daydream end - Add more Advancement API
+
     /**
      * Get the player's current client side view distance.
      * <br>
