From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Fri, 4 Feb 2022 11:18:12 +0900
Subject: [PATCH] Add more Advancement API


diff --git a/src/main/java/io/papermc/paper/advancement/AdvancementDisplay.java b/src/main/java/io/papermc/paper/advancement/AdvancementDisplay.java
index 19202e17f362fdffca472178b102d1336349590c..0581b8b425d2e7553fe64bed695253c9d0a8f6d1 100644
--- a/src/main/java/io/papermc/paper/advancement/AdvancementDisplay.java
+++ b/src/main/java/io/papermc/paper/advancement/AdvancementDisplay.java
@@ -104,6 +104,48 @@ public interface AdvancementDisplay {
      */
     @NotNull Component displayName();
 
+    // Daydream start - Add more Advancement API
+    /**
+     * 발전 과제 디스플레이의 위치가 재계산되지 않도록 고정되어 있는지를 확인합니다.
+     *
+     * @return 고정 여부
+     */
+    boolean isPositionLocked();
+
+    /**
+     * 발전 과제 디스플레이의 위치가 재계산되지 않도록 고정되어 있는지를 설정합니다.
+     *
+     * @param lock 고정 여부
+     * @return this
+     */
+    @NotNull
+    AdvancementDisplay setPositionLock(final boolean lock);
+
+    /**
+     * 발전 과제 디스플레이의 X 위치를 가져옵니다.
+     *
+     * @return X 위치
+     */
+    float positionX();
+
+    /**
+     * 발전 과제 디스플레이의 Y 위치를 가져옵니다.
+     *
+     * @return Y 위치
+     */
+    float positionY();
+
+    /**
+     * 발전 과제 디스플레이의 위치를 설정합니다.
+     *
+     * @param x X 위치
+     * @param y Y 위치
+     * @return this
+     */
+    @NotNull
+    AdvancementDisplay position(final float x, final float y);
+    // Daydream end - Add more Advancement API
+
     /**
      * Defines how the {@link #icon()} appears in the advancements screen and
      * the color used with the {@link #title() advancement name}.
diff --git a/src/main/java/moe/caramel/daydream/advancement/AdvancementBuilder.java b/src/main/java/moe/caramel/daydream/advancement/AdvancementBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..f50ba2c8c039dfc7ba3dd2b3cc0adc860d9c5e1e
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/advancement/AdvancementBuilder.java
@@ -0,0 +1,193 @@
+package moe.caramel.daydream.advancement;
+
+import io.papermc.paper.advancement.AdvancementDisplay;
+import moe.caramel.daydream.plugin.AdvancementProvider;
+import net.kyori.adventure.text.Component;
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.advancement.Advancement;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import java.util.List;
+
+/**
+ * 발전 과제 빌더
+ */
+@ApiStatus.NonExtendable
+public interface AdvancementBuilder {
+
+    /**
+     * 발전 과제 프로바이더를 가져옵니다.
+     *
+     * @return 발전 과제 프로바이더
+     */
+    @NotNull
+    AdvancementProvider getProvider();
+
+    // ===========================
+
+    /**
+     * 부모 발전 과제를 설정합니다.
+     *
+     * @param parent 부모 발전 과제
+     * @return this
+     */
+    @NotNull
+    AdvancementBuilder parent(final @NotNull Advancement parent);
+
+    /**
+     * 이 발전 과제가 항상 보여야 되는 경우에 사용합니다.
+     *
+     * @return this
+     */
+    @NotNull
+    AdvancementBuilder alwaysVisible();
+
+    // ===========================
+
+    /**
+     * 이 발전 과제의 디스플레이를 설정합니다.
+     *
+     * @param icon 프레임에 표시되는 아이콘
+     * @param title 제목
+     * @param description 설명
+     * @param background 배경 텍스처 위치 (루트 발전 과제 전용)
+     * @param frame 프레임
+     * @param showToast 완료 시에 토스트를 출력해야 하는 경우 {@code true}
+     * @param announceChat 완료 시에 메시지를 보내야 하는 경우 {@code true}
+     * @param hidden 발전 과제가 숨겨진 경우 {@code true}
+     * @return this
+     */
+    @NotNull
+    default AdvancementBuilder display(
+        final @NotNull Material icon, final @NotNull Component title, final @NotNull Component description,
+        final @Nullable NamespacedKey background, final @NotNull AdvancementDisplay.Frame frame,
+        final boolean showToast, final boolean announceChat, final boolean hidden
+    ) {
+        return display(new ItemStack(icon), title, description, background, frame, showToast, announceChat, hidden);
+    }
+
+    /**
+     * 이 발전 과제의 디스플레이를 설정합니다.
+     *
+     * @param icon 프레임에 표시되는 아이콘
+     * @param title 제목
+     * @param description 설명
+     * @param background 배경 텍스처 위치 (루트 발전 과제 전용)
+     * @param frame 프레임
+     * @param showToast 완료 시에 토스트를 출력해야 하는 경우 {@code true}
+     * @param announceChat 완료 시에 메시지를 보내야 하는 경우 {@code true}
+     * @param hidden 발전 과제가 숨겨진 경우 {@code true}
+     * @return this
+     */
+    @NotNull
+    default AdvancementBuilder display(
+        final @NotNull ItemStack icon, final @NotNull Component title, final @NotNull Component description,
+        final @Nullable NamespacedKey background, final @NotNull AdvancementDisplay.Frame frame,
+        final boolean showToast, final boolean announceChat, final boolean hidden
+    ) {
+        this.display(getProvider().createDisplay(icon, title, description, background, frame, showToast, announceChat, hidden));
+        return this;
+    }
+
+    /**
+     * 이 발전 과제의 디스플레이를 고정된 위치로 설정합니다.
+     *
+     * @param icon 프레임에 표시되는 아이콘
+     * @param title 제목
+     * @param description 설명
+     * @param background 배경 텍스처 위치 (루트 발전 과제 전용)
+     * @param frame 프레임
+     * @param x 고정할 X 위치
+     * @param y 고정할 Y 위치
+     * @param showToast 완료 시에 토스트를 출력해야 하는 경우 {@code true}
+     * @param announceChat 완료 시에 메시지를 보내야 하는 경우 {@code true}
+     * @param hidden 발전 과제가 숨겨진 경우 {@code true}
+     * @return this
+     */
+    @NotNull
+    default AdvancementBuilder display(
+        final @NotNull Material icon, final @NotNull Component title, final @NotNull Component description,
+        final @Nullable NamespacedKey background, final @NotNull AdvancementDisplay.Frame frame,
+        final float x, final float y, final boolean showToast, final boolean announceChat, final boolean hidden
+    ) {
+        return display(new ItemStack(icon), title, description, background, frame, x, y, showToast, announceChat, hidden);
+    }
+
+    /**
+     * 이 발전 과제의 디스플레이를 고정된 위치로 설정합니다.
+     *
+     * @param icon 프레임에 표시되는 아이콘
+     * @param title 제목
+     * @param description 설명
+     * @param background 배경 텍스처 위치 (루트 발전 과제 전용)
+     * @param frame 프레임
+     * @param x 고정할 X 위치
+     * @param y 고정할 Y 위치
+     * @param showToast 완료 시에 토스트를 출력해야 하는 경우 {@code true}
+     * @param announceChat 완료 시에 메시지를 보내야 하는 경우 {@code true}
+     * @param hidden 발전 과제가 숨겨진 경우 {@code true}
+     * @return this
+     */
+    @NotNull
+    default AdvancementBuilder display(
+        final @NotNull ItemStack icon, final @NotNull Component title, final @NotNull Component description,
+        final @Nullable NamespacedKey background, final @NotNull AdvancementDisplay.Frame frame,
+        final float x, final float y, final boolean showToast, final boolean announceChat, final boolean hidden
+    ) {
+        this.display(getProvider()
+            .createDisplay(icon, title, description, background, frame, showToast, announceChat, hidden)
+            .setPositionLock(true)
+            .position(x, y));
+        return this;
+    }
+
+    /**
+     * 이 발전 과제의 디스플레이를 설정합니다.
+     *
+     * @param display 디스플레이
+     * @return this
+     */
+    @NotNull
+    AdvancementBuilder display(final @NotNull AdvancementDisplay display);
+
+    // ===========================
+
+    /**
+     * 달성 기준을 추가합니다. 트리거는 Impossible 트리거로 고정됩니다.
+     *
+     * @param name 달성 기준의 이름
+     * @return this
+     */
+    @NotNull
+    AdvancementBuilder addImpossibleCriterion(final @NotNull String name);
+
+    /**
+     * 플레이어가 발전 과제를 완료하는 데 필요한 조건을 설정합니다.
+     *
+     * @param and {@code true}인 경우, 플레이어가 모든 기준을 완료해야합니다. ({@code false}인 경우, OR)
+     * @return this
+     */
+    @NotNull
+    AdvancementBuilder requirements(final boolean and);
+
+    /**
+     * 플레이어가 발전 과제를 완료하는 데 필요한 조건을 설정합니다.
+     *
+     * @param requirements 필요한 조건
+     * @return this
+     */
+    @NotNull
+    AdvancementBuilder requirements(final @NotNull List<List<String>> requirements);
+
+    /**
+     * 이 발전 과제에 카운트를 사용합니다. 기준 설정이 필요하지 않습니다.
+     *
+     * @param count 최대 카운트
+     * @return this
+     */
+    @NotNull
+    AdvancementBuilder enableCount(final int count);
+}
diff --git a/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementPreLoadEvent.java b/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementPreLoadEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..2861f0a9f9e76d8a0bb46922b722f8a73c5701c2
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementPreLoadEvent.java
@@ -0,0 +1,66 @@
+package moe.caramel.daydream.event.player;
+
+import com.google.gson.JsonElement;
+import org.bukkit.entity.Player;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * 플레이어의 발전 과제 데이터를 로드하기 직전에 호출됩니다.
+ * <p>일반적으로 {@link org.bukkit.event.player.PlayerJoinEvent} 이전에 호출됩니다.</p>
+ */
+public final class PlayerAdvancementPreLoadEvent extends PlayerEvent {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+    public @NotNull HandlerList getHandlers() { return HANDLER_LIST; }
+    public static @NotNull HandlerList getHandlerList() { return HANDLER_LIST; }
+
+    private JsonElement json;
+    private boolean useDataFixer;
+
+    @ApiStatus.Internal
+    public PlayerAdvancementPreLoadEvent(final @NotNull Player who) {
+        super(who);
+        this.useDataFixer = true;
+    }
+
+    /**
+     * 로드할 발전 과제 Json을 가져옵니다.
+     *
+     * @return 발전 과제 Json
+     */
+    @Nullable
+    public JsonElement getReplaceJson() {
+        return json;
+    }
+
+    /**
+     * 로드할 발전 과제 Json을 설정합니다.
+     *
+     * @param json 발전 과제 Json
+     */
+    public void setReplaceJson(final @NotNull JsonElement json) {
+        this.json = json;
+    }
+
+    /**
+     * Mojang의 DataFixer를 사용할지 여부를 가져옵니다.
+     *
+     * @return 만약 {@code true}인 경우, Mojang의 DataFixer를 사용
+     */
+    public boolean useDataFixer() {
+        return this.useDataFixer;
+    }
+
+    /**
+     * Mojang의 DataFixer를 사용할지 여부를 설정합니다.
+     *
+     * @param useDataFixer 만약 {@code true}인 경우, Mojang의 DataFixer를 사용
+     */
+    public void useDataFixer(final boolean useDataFixer) {
+        this.useDataFixer = useDataFixer;
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementSaveEvent.java b/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementSaveEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..67cf97b09397ea981e6fc1237da1ced35755d664
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementSaveEvent.java
@@ -0,0 +1,48 @@
+package moe.caramel.daydream.event.player;
+
+import com.google.gson.JsonElement;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * 플레이어 발전 과제 데이터가 저장될 때 호출됩니다.
+ */
+public final class PlayerAdvancementSaveEvent extends PlayerEvent implements Cancellable {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+    public @NotNull HandlerList getHandlers() { return HANDLER_LIST; }
+    public static @NotNull HandlerList getHandlerList() { return HANDLER_LIST; }
+
+    private final JsonElement json;
+    private boolean cancelled;
+
+    @ApiStatus.Internal
+    public PlayerAdvancementSaveEvent(final @NotNull Player who, final @NotNull JsonElement json) {
+        super(who);
+        this.json = json;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return this.cancelled;
+    }
+
+    @Override
+    public void setCancelled(final boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    /**
+     * 저장될 발전 과제 데이터를 가져옵니다.
+     *
+     * @return 발전 과제 데이터
+     */
+    @NotNull
+    public JsonElement getJson() {
+        return json;
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementScreenEvent.java b/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementScreenEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..cb2e32a8d978d4b7492f62f7e4f446ce465764d0
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementScreenEvent.java
@@ -0,0 +1,86 @@
+package moe.caramel.daydream.event.player;
+
+import org.bukkit.NamespacedKey;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * 플레이어가 발전 과제 화면을 열거나 닫았을 경우 호출됩니다.
+ */
+public final class PlayerAdvancementScreenEvent extends PlayerEvent implements Cancellable {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+    public @NotNull HandlerList getHandlers() { return HANDLER_LIST; }
+    public static @NotNull HandlerList getHandlerList() { return HANDLER_LIST; }
+
+    private final Action action;
+    private final NamespacedKey key;
+    private boolean cancelled;
+
+    @ApiStatus.Internal
+    public PlayerAdvancementScreenEvent(final @NotNull Player player, final @NotNull Action action, final @Nullable NamespacedKey key) {
+        super(player);
+        this.action = action;
+        this.key = key;
+    }
+
+    /**
+     * 발전 과제 화면을 닫을지의 여부를 가져옵니다.
+     *
+     * @return {@code true}인 경우 스크린을 닫습니다.
+     * {@link Action#CLOSED_SCREEN}인 경우 작동하지 않습니다.
+     */
+    @Override
+    public boolean isCancelled() {
+        return this.cancelled;
+    }
+
+    /**
+     * 스크린을 닫을지의 여부를 가져옵니다.
+     * 인수가 {@code true}인 경우 스크린을 닫으나, {@link Action#CLOSED_SCREEN}인 경우 작동하지 않습니다.
+     */
+    @Override
+    public void setCancelled(final boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    /**
+     * 플레이어가 요청한 액션을 가져옵니다.
+     *
+     * @return 플레이어의 요청
+     */
+    @NotNull
+    public Action getAction() {
+        return action;
+    }
+
+    /**
+     * 플레이어가 요청한 탭의 {@link NamespacedKey}를 가져옵니다.
+     *
+     * @return 플레이어가 요청한 탭의 {@link NamespacedKey}.
+     * <p>{@link Action#CLOSED_SCREEN}인 경우 {@code null}을 반환합니다.</p>
+     */
+    @Nullable
+    public NamespacedKey getKey() {
+        return key;
+    }
+
+    /**
+     * 발전 과제 요청 목록
+     */
+    public enum Action {
+        /**
+         * 새로운 발전 과제 탭을 오픈하는 경우
+         */
+        OPENED_TAB,
+        /**
+         * 발전 과제 화면을 닫는 경우
+         */
+        CLOSED_SCREEN
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/plugin/AdvancementProvider.java b/src/main/java/moe/caramel/daydream/plugin/AdvancementProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..43862b4d2f26e89f9eac72fb3d99a01b0128d43f
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/plugin/AdvancementProvider.java
@@ -0,0 +1,92 @@
+package moe.caramel.daydream.plugin;
+
+import com.google.gson.JsonElement;
+import io.papermc.paper.advancement.AdvancementDisplay;
+import moe.caramel.daydream.advancement.AdvancementBuilder;
+import net.kyori.adventure.text.Component;
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.advancement.Advancement;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * Advancement Provider
+ */
+@ApiStatus.NonExtendable
+public interface AdvancementProvider {
+
+    /**
+     * 발전 과제 빌더를 생성합니다.
+     *
+     * @return 발전 과제 빌더
+     */
+    @NotNull
+    AdvancementBuilder createBuilder();
+
+    /**
+     * 발전 과제 디스플레이를 생성합니다.
+     *
+     * @param icon 프레임에 표시되는 아이콘
+     * @param title 제목
+     * @param description 설명
+     * @param background 배경 텍스처 위치 (루트 발전 과제 전용)
+     * @param frame 프레임
+     * @param showToast 완료 시에 토스트를 출력해야 하는 경우 {@code true}
+     * @param announceChat 완료 시에 메시지를 보내야 하는 경우 {@code true}
+     * @param hidden 발전 과제가 숨겨진 경우 {@code true}
+     * @return 발전 과제 디스플레이
+     */
+    @NotNull
+    default AdvancementDisplay createDisplay(
+        final @NotNull Material icon, final @NotNull Component title, final @NotNull Component description,
+        final @Nullable NamespacedKey background, final @NotNull AdvancementDisplay.Frame frame,
+        final boolean showToast, final boolean announceChat, final boolean hidden
+    ) {
+        return createDisplay(new ItemStack(icon), title, description, background, frame, showToast, announceChat, hidden);
+    }
+
+    /**
+     * 발전 과제 디스플레이를 생성합니다.
+     *
+     * @param icon 프레임에 표시되는 아이콘
+     * @param title 제목
+     * @param description 설명
+     * @param background 배경 텍스처 위치 (루트 발전 과제 전용)
+     * @param frame 프레임
+     * @param showToast 완료 시에 토스트를 출력해야 하는 경우 {@code true}
+     * @param announceChat 완료 시에 메시지를 보내야 하는 경우 {@code true}
+     * @param hidden 발전 과제가 숨겨진 경우 {@code true}
+     * @return this
+     */
+    @NotNull
+    AdvancementDisplay createDisplay(
+        final @NotNull ItemStack icon, final @NotNull Component title, final @NotNull Component description,
+        final @Nullable NamespacedKey background, final @NotNull AdvancementDisplay.Frame frame,
+        final boolean showToast, final boolean announceChat, final boolean hidden
+    );
+
+    // ===========================
+
+    /**
+     * 발전 과제를 서버에 등록합니다.
+     *
+     * @param key 중복되지 않는 발전 과제 식별 키
+     * @param builder 발전 과제 빌더
+     * @return 발전 과제
+     */
+    @NotNull
+    Advancement register(final @NotNull NamespacedKey key, final @NotNull AdvancementBuilder builder);
+
+    /**
+     * 발전 과제를 서버에 등록합니다.
+     *
+     * @param key 중복되지 않는 발전 과제 식별 키
+     * @param json 발전 과제 JSON 데이터
+     * @return 발전 과제
+     */
+    @NotNull
+    Advancement register(final @NotNull NamespacedKey key, final @NotNull JsonElement json);
+}
diff --git a/src/main/java/moe/caramel/daydream/plugin/PluginDatapackLoader.java b/src/main/java/moe/caramel/daydream/plugin/PluginDatapackLoader.java
index 6c878c968be02870c8552eb8db3d7b652e605540..1a2fe817bc62661171a3ad925d6a4a56fb505522 100644
--- a/src/main/java/moe/caramel/daydream/plugin/PluginDatapackLoader.java
+++ b/src/main/java/moe/caramel/daydream/plugin/PluginDatapackLoader.java
@@ -9,4 +9,13 @@ import org.jetbrains.annotations.NotNull;
 @ApiStatus.OverrideOnly
 @ApiStatus.Experimental
 public interface PluginDatapackLoader {
+
+    // Daydream start - Add more Advancement API
+    /**
+     * 발전 과제를 서버에 등록할 때 호출됩니다.
+     *
+     * @param provider 발전 과제 제공자
+     */
+    default void registerAdvancement(final @NotNull AdvancementProvider provider) { }
+    // Daydream end - Add more Advancement API
 }
diff --git a/src/main/java/org/bukkit/advancement/Advancement.java b/src/main/java/org/bukkit/advancement/Advancement.java
index 243e5f2debad7f12210169e15ef0b29763e988bb..7f6d8c2018d2b8be2ed40ee080b278fe47cce380 100644
--- a/src/main/java/org/bukkit/advancement/Advancement.java
+++ b/src/main/java/org/bukkit/advancement/Advancement.java
@@ -68,4 +68,19 @@ public interface Advancement extends Keyed {
     @NotNull
     Advancement getRoot();
     // Paper end
+    // Daydream start - Add more Advancement API
+    /**
+     * 발전 과제가 카운트를 사용하는지 확인합니다.
+     *
+     * @return 이 발전 과제가 카운트를 사용하는 경우 {@code true}를 반환
+     */
+    boolean useCount();
+
+    /**
+     * 발전 과제의 최대 카운트를 가져옵니다.
+     *
+     * @return 발전 과제의 최대 카운트
+     */
+    int maxCount();
+    // Daydream end - Add more Advancement API
 }
diff --git a/src/main/java/org/bukkit/advancement/AdvancementProgress.java b/src/main/java/org/bukkit/advancement/AdvancementProgress.java
index f9bc179da071e7bd57cefc50d6763317fb643b74..3b1b55977d94de338f536896babedc7e6212e557 100644
--- a/src/main/java/org/bukkit/advancement/AdvancementProgress.java
+++ b/src/main/java/org/bukkit/advancement/AdvancementProgress.java
@@ -67,4 +67,36 @@ public interface AdvancementProgress {
      */
     @NotNull
     Collection<String> getAwardedCriteria();
+
+    // Daydream start - Add more Advancement API
+    /**
+     * 발전 과제 진행도의 카운트를 증가시킵니다.
+     *
+     * @throws IllegalStateException 이 발전 과제 진행도가 카운트를 사용하지 않습니다.
+     * @return 증가되었다면 {@code true}, 최대 범위에 도달한 경우 {@code false}를 반환
+     */
+    boolean increaseCount();
+
+    /**
+     * 발전 과제 진행도의 카운트를 감소시킵니다.
+     *
+     * @throws IllegalStateException 이 발전 과제 진행도가 카운트를 사용하지 않습니다.
+     * @return 감소되었다면 {@code true}, 최소 범위에 도달한 경우 {@code false}를 반환
+     */
+    boolean decreaseCount();
+
+    /**
+     * 발전 과제 진행도가 카운트를 사용하는지 확인합니다.
+     *
+     * @return 이 발전 과제 진행도가 카운트를 사용하는 경우 {@code true}를 반환
+     */
+    boolean useCount();
+
+    /**
+     * 이 발전 과제 진행도의 현재 카운트를 가져옵니다.
+     *
+     * @return 현재 카운트
+     */
+    int currentCount();
+    // Daydream end - Add more Advancement API
 }
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index a5876d5afe401d18148fad07c2d360726fa1d1b2..86f04082de95d022da2b5ba0484d4ccaa85a3c7d 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -3171,6 +3171,36 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     @NotNull
     public AdvancementProgress getAdvancementProgress(@NotNull Advancement advancement);
 
+    // Daydream start - Add more Advancement API
+    /**
+     * 플레이어의 직렬화된 발전 과제 데이터를 가져옵니다.
+     *
+     * @return 직렬화된 발전 과제 데이터
+     */
+    @NotNull
+    default com.google.gson.JsonElement serializedAdvancementProgress() {
+        return serializedAdvancementProgress(false);
+    }
+
+    /**
+     * 플레이어의 직렬화된 발전 과제 데이터를 가져옵니다.
+     *
+     * @param withDataVersion 데이터 버전 포함 여부
+     * @return 직렬화된 발전 과제 데이터
+     */
+    @NotNull
+    public com.google.gson.JsonElement serializedAdvancementProgress(boolean withDataVersion);
+
+    /**
+     * 플레이어에게 발전 과제 알림을 전송합니다.
+     *
+     * @param item 표시할 아이템
+     * @param title 표시할 제목
+     * @param frame 표시할 프레임
+     */
+    public void sendAdvancementAlert(@NotNull ItemStack item, @NotNull net.kyori.adventure.text.Component title, @NotNull io.papermc.paper.advancement.AdvancementDisplay.Frame frame);
+    // Daydream end - Add more Advancement API
+
     /**
      * Get the player's current client side view distance.
      * <br>
