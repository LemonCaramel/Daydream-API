From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Tue, 24 Aug 2021 12:02:16 +0900
Subject: [PATCH] Add Individual Sidebar API


diff --git a/src/main/java/moe/caramel/daydream/sidebar/EntryBuilder.java b/src/main/java/moe/caramel/daydream/sidebar/EntryBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..5d41bf0d0c567b3b1b2c2814fb334260aab3ff3e
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/sidebar/EntryBuilder.java
@@ -0,0 +1,181 @@
+package moe.caramel.daydream.sidebar;
+
+import static net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection;
+import static org.bukkit.ChatColor.translateAlternateColorCodes;
+import com.google.common.base.Preconditions;
+import net.kyori.adventure.text.Component;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Objects;
+
+/**
+ * SideBar API 사용을 위한 {@link Entry} 빌더
+ */
+public final class EntryBuilder {
+
+    public static final int MAX_ENTRY_SIZE = 15;
+    private final List<Entry> entries = new ArrayList<>();
+
+    // ==============================================
+
+    private EntryBuilder() { }
+
+    /**
+     * Entry 빌더를 생성합니다.
+     *
+     * @return {@link EntryBuilder}
+     */
+    @NotNull
+    public static EntryBuilder builder() {
+        return new EntryBuilder();
+    }
+
+    // ==============================================
+
+    /**
+     * {@link Entry} 리스트에 빈 줄을 추가합니다.
+     *
+     * @return this
+     */
+    @NotNull
+    public EntryBuilder blank() {
+        return next(Component.empty());
+    }
+
+    /**
+     * {@link Entry} 리스트에 제공한 텍스트를 추가합니다.
+     *
+     * @param name 리스트에 추가할 텍스트
+     * @return this
+     */
+    @NotNull
+    public EntryBuilder next(final @NotNull String name) {
+        return next(name, null);
+    }
+
+    /**
+     * {@link Entry} 리스트에 제공한 텍스트를 추가합니다.
+     *
+     * @param name 리스트에 추가할 텍스트
+     * @param callback {@link Entry}가 추가되거나 제거될 때 호출되는 콜백
+     * @return this
+     */
+    @NotNull
+    public EntryBuilder next(final @NotNull String name, final @Nullable EntryCallback callback) {
+        return next(legacySection().deserialize(translateAlternateColorCodes('&', name)), callback);
+    }
+
+    /**
+     * {@link Entry} 리스트에 제공한 텍스트를 추가합니다.
+     *
+     * @param name 리스트에 추가할 텍스트
+     * @return this
+     */
+    @NotNull
+    public EntryBuilder next(final @NotNull Component name) {
+        return next(name, null);
+    }
+
+    /**
+     * {@link Entry} 리스트에 제공한 텍스트를 추가합니다.
+     *
+     * @param name 리스트에 추가할 텍스트
+     * @param callback {@link Entry}가 추가되거나 제거될 때 호출되는 콜백
+     * @return this
+     */
+    @NotNull
+    public EntryBuilder next(final @NotNull Component name, final @Nullable EntryCallback callback) {
+        Preconditions.checkArgument(entries.size() < MAX_ENTRY_SIZE, "Entry 목록의 크기는 " + MAX_ENTRY_SIZE + "를 넘을 수 없습니다."); // TODO ?..
+        this.entries.add(new Entry(name, callback));
+        return this;
+    }
+
+    // ==============================================
+
+    /**
+     * 현재 {@link Entry} 리스트의 크기를 가져옵니다.
+     *
+     * @return 현재 {@link Entry} 리스트의 크기
+     */
+    public int getSize() {
+        return (this.entries.size());
+    }
+
+    /**
+     * {@link Entry} 리스트를 가져옵니다.
+     *
+     * @return {@link Entry} 리스트
+     */
+    @NotNull
+    public List<Entry> build() {
+        return entries;
+    }
+
+    // ==============================================
+
+    /**
+     * {@link Entry}에 동작이 취해졌을 때 호출되는 콜백
+     */
+    @FunctionalInterface
+    public interface EntryCallback {
+
+        /**
+         * {@link Entry}가 추가되거나 제거되었을 때 수행할 동작을 작성합니다.
+         *
+         * @param entry 대상 {@link Entry}
+         * @param remove 제거된 경우 {@code true}
+         */
+        @ApiStatus.Experimental
+        void callback(final @NotNull Entry entry, final boolean remove);
+    }
+
+    // ==============================================
+
+    /**
+     * SideBar에 표시될 항목의 데이터
+     */
+    public static final class Entry {
+
+        private final Component name;
+        private final EntryCallback callback;
+
+        Entry(final @NotNull Component name, final @Nullable EntryCallback callback) {
+            this.name = name;
+            this.callback = callback;
+        }
+
+        @NotNull
+        public Component getName() {
+            return name;
+        }
+
+        @Nullable
+        public EntryCallback getCallback() {
+            return callback;
+        }
+
+        @Override
+        public String toString() {
+            return "Entry{" +
+                   "name=" + name +
+                   ", callback=" + callback +
+                   '}';
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            if (o == null || getClass() != o.getClass()) return false;
+            final Entry entry = (Entry) o;
+            return name.equals(entry.name) && Objects.equals(callback, entry.callback);
+        }
+
+        @Override
+        public int hashCode() {
+            return Objects.hash(name, callback);
+        }
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/sidebar/SidebarDecorator.java b/src/main/java/moe/caramel/daydream/sidebar/SidebarDecorator.java
new file mode 100644
index 0000000000000000000000000000000000000000..737e6abd8c1c1369e2f15976f97e9ac2a4315867
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/sidebar/SidebarDecorator.java
@@ -0,0 +1,32 @@
+package moe.caramel.daydream.sidebar;
+
+import net.kyori.adventure.text.Component;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * 플레이어별 사이드바 데코레이터
+ */
+public interface SidebarDecorator {
+
+    /**
+     * 플레이어별 사이드바에 표시할 제목을 가져옵니다.
+     *
+     * @param player 대상 플레이어
+     * @return 사이드바에 표시할 제목
+     */
+    @Nullable
+    Component getTitle(final @NotNull Player player);
+
+    /**
+     * 플레이어별 사이드바에 표시할 {@link moe.caramel.daydream.sidebar.EntryBuilder.Entry} 리스트를 가져옵니다.
+     * <br>
+     * {@code null}을 반환하는 경우 리스트를 업데이트하지 않습니다.
+     *
+     * @param player 대상 플레이어
+     * @return 사이드바에 표시할 {@link moe.caramel.daydream.sidebar.EntryBuilder.Entry} 리스트
+     */
+    @Nullable
+    EntryBuilder getEntries(final @NotNull Player player);
+}
diff --git a/src/main/java/moe/caramel/daydream/sidebar/SidebarProcessor.java b/src/main/java/moe/caramel/daydream/sidebar/SidebarProcessor.java
new file mode 100644
index 0000000000000000000000000000000000000000..545cafad82bc93cebe17e59c1f125ce579354b1a
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/sidebar/SidebarProcessor.java
@@ -0,0 +1,85 @@
+package moe.caramel.daydream.sidebar;
+
+import org.bukkit.entity.Player;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+import java.util.Set;
+import java.util.UUID;
+
+public interface SidebarProcessor {
+
+    /**
+     * 특정 플레이어에게 개인 사이드바 기능을 활성화합니다.
+     *
+     * @param owner 소유 플러그인
+     * @param decorator 사용자 지정 {@link SidebarDecorator} 데코레이터
+     * @param holder 대상 플레이어
+     * @param updateInterval 사이드바 업데이트 시간(Tick), 0 이하일 수 없습니다.
+     * @return 이미 사용하고 있는 경우 {@code false}를 반환
+     */
+    boolean activate(final @NotNull Plugin owner, final @NotNull SidebarDecorator decorator, final @NotNull Player holder, final long updateInterval);
+
+    /**
+     * 특정 플레이어에게 개인 사이드바 기능을 비활성화합니다.
+     *
+     * @param holder 대상 플레이어
+     * @return 활성화되어있지 않은 경우 {@code false}를 반환
+     */
+    default boolean deactivate(final @NotNull Player holder) {
+        return deactivate(holder.getUniqueId());
+    }
+
+    /**
+     * 특정 플레이어에게 개인 사이드바 기능을 비활성화합니다.
+     *
+     * @param uuid 대상 플레이어의 UUID
+     * @return 활성화되어있지 않은 경우 {@code false}를 반환
+     */
+    boolean deactivate(final @NotNull UUID uuid);
+
+    /**
+     * 특정 플레이어의 개인 사이드바 기능 사용 여부를 가져옵니다.
+     *
+     * @param holder 대상 플레이어
+     * @return 개인 사이드바 기능 사용 여부
+     */
+    default boolean activated(final @NotNull Player holder) {
+        return activated(holder.getUniqueId());
+    }
+
+    /**
+     * 특정 플레이어의 개인 사이드바 기능 사용 여부를 가져옵니다.
+     *
+     * @param uuid 대상 플레이어의 UUID
+     * @return 개인 사이드바 기능 사용 여부
+     */
+    boolean activated(final @NotNull UUID uuid);
+
+    /**
+     * 특정 플레이어의 개인 사이드바 업데이트 시간을 가져옵니다.
+     *
+     * @param holder 대상 플레이어
+     * @return 개인 사이드바 업데이트 주기 (틱).
+     * {@code -1}인 경우 비활성화 상태
+     */
+    default long updateInterval(final @NotNull Player holder) {
+        return updateInterval(holder.getUniqueId());
+    }
+
+    /**
+     * 특정 플레이어의 개인 사이드바 업데이트 시간을 가져옵니다.
+     *
+     * @param uuid 대상 플레이어의 UUID
+     * @return 개인 사이드바 업데이트 주기 (틱).
+     * {@code -1}인 경우 비활성화 상태
+     */
+    long updateInterval(final @NotNull UUID uuid);
+
+    /**
+     * 개인 사이드바가 활성화된 플레이어의 UUID 목록을 가져옵니다.
+     *
+     * @return UUID 목록
+     */
+    @NotNull
+    Set<UUID> trackedPlayers();
+}
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index d8beba2e84977c63e58b773f43b89178280aa1f1..10e5c975aa083b9192adb7a3b12a4d2401f5fd3c 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -2901,6 +2901,18 @@ public final class Bukkit {
     }
     // Daydream end - Add Packet API
 
+    // Daydream start - Add Individual Sidebar API
+    /**
+     * 개인 사이드바 처리기를 가져옵니다.
+     *
+     * @return 개인 사이드바 처리기
+     */
+    @NotNull
+    public static moe.caramel.daydream.sidebar.SidebarProcessor sidebarProcessor() {
+        return server.sidebarProcessor();
+    }
+    // Daydream end - Add Individual Sidebar API
+
     @NotNull
     public static Server.Spigot spigot() {
         return server.spigot();
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index cc88db86eca83a3e18144bc59c64f8d4984572a8..aefff142acb61839eab3b968713f5a140ccd4f2e 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -2542,4 +2542,14 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
     @NotNull
     <T extends moe.caramel.daydream.network.Packet> T createPacket(@NotNull Class<T> packet);
     // Daydream end - Add Packet API
+
+    // Daydream start - Add Individual Sidebar API
+    /**
+     * 개인 사이드바 처리기를 가져옵니다.
+     *
+     * @return 개인 사이드바 처리기
+     */
+    @NotNull
+    moe.caramel.daydream.sidebar.SidebarProcessor sidebarProcessor();
+    // Daydream end - Add Individual Sidebar API
 }
