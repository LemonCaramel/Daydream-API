From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LemonCaramel <admin@caramel.moe>
Date: Fri, 4 Feb 2022 11:18:12 +0900
Subject: [PATCH] Add more Advancement API


diff --git a/src/main/java/moe/caramel/daydream/advancement/AdvancementBuilder.java b/src/main/java/moe/caramel/daydream/advancement/AdvancementBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..ff3e41287ba48c7f032360cc4fe7a78b28fc1393
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/advancement/AdvancementBuilder.java
@@ -0,0 +1,161 @@
+package moe.caramel.daydream.advancement;
+
+import io.papermc.paper.advancement.AdvancementDisplay;
+import net.kyori.adventure.text.Component;
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.advancement.Advancement;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * Advancement builder.
+ */
+public interface AdvancementBuilder {
+
+    /**
+     * Sets the Advancement parent.
+     *
+     * @param advancement the parent advancement
+     * @return the builder
+     */
+    @NotNull
+    AdvancementBuilder parent(@NotNull Advancement advancement);
+
+    /**
+     * Call this method if this advancement is root, and it is visible by default.
+     *
+     * @return the builder
+     */
+    @NotNull
+    AdvancementBuilder visibleRoot();
+
+    /**
+     * Set the display info of this advancement.
+     *
+     * @param icon the icon show in the frame in the advancements screen
+     * @param title the advancement title
+     * @param description the advancement description
+     * @param background the texture display behind the advancement tree when selected (root only)
+     * @param frame the {@link AdvancementDisplay.Frame}
+     * @param showToast {@code true} if a toast should be shown
+     * @param announceToChat {@code true} if a message should be sent
+     * @param hidden {@code true} if hidden
+     * @return the builder
+     */
+    @NotNull
+    default AdvancementBuilder display(
+        @NotNull Material icon, @NotNull Component title, @Nullable Component description,
+        @Nullable NamespacedKey background, @NotNull AdvancementDisplay.Frame frame,
+        boolean showToast, boolean announceToChat, boolean hidden
+    ) {
+        return this.display(icon, title, description, background, frame, 0, 0, showToast, announceToChat, hidden);
+    }
+
+    /**
+     * Set the display info of this advancement.
+     *
+     * @param icon the icon show in the frame in the advancements screen
+     * @param title the advancement title
+     * @param description the advancement description
+     * @param background the texture display behind the advancement tree when selected (root only)
+     * @param frame the {@link AdvancementDisplay.Frame}
+     * @param showToast {@code true} if a toast should be shown
+     * @param announceToChat {@code true} if a message should be sent
+     * @param hidden {@code true} if hidden
+     * @return the builder
+     */
+    @NotNull
+    default AdvancementBuilder display(
+        @NotNull ItemStack icon, @NotNull Component title, @Nullable Component description,
+        @Nullable NamespacedKey background, @NotNull AdvancementDisplay.Frame frame,
+        boolean showToast, boolean announceToChat, boolean hidden
+    ) {
+        return this.display(icon, title, description, background, frame, 0, 0, showToast, announceToChat, hidden);
+    }
+
+    /**
+     * Set the display info of this advancement.
+     *
+     * @param icon the icon show in the frame in the advancements screen
+     * @param title the advancement title
+     * @param description the advancement description
+     * @param background the texture display behind the advancement tree when selected (root only)
+     * @param frame the {@link AdvancementDisplay.Frame}
+     * @param x the x-axis of icon
+     * @param y the y-axis of icon
+     * @param showToast {@code true} if a toast should be shown
+     * @param announceToChat {@code true} if a message should be sent
+     * @param hidden {@code true} if hidden
+     * @return the builder
+     */
+    @NotNull
+    default AdvancementBuilder display(
+        @NotNull Material icon, @NotNull Component title, @Nullable Component description,
+        @Nullable NamespacedKey background, @NotNull AdvancementDisplay.Frame frame,
+        float x, float y, boolean showToast, boolean announceToChat, boolean hidden
+    ) {
+        return this.display(new ItemStack(icon), title, description, background, frame, x, y, showToast, announceToChat, hidden);
+    }
+
+    /**
+     * Set the display info of this advancement.
+     *
+     * @param icon the icon show in the frame in the advancements screen
+     * @param title the advancement title
+     * @param description the advancement description
+     * @param background the texture display behind the advancement tree when selected (root only)
+     * @param frame the {@link AdvancementDisplay.Frame}
+     * @param x the x-axis of icon
+     * @param y the y-axis of icon
+     * @param showToast {@code true} if a toast should be shown
+     * @param announceToChat {@code true} if a message should be sent
+     * @param hidden {@code true} if hidden
+     * @return the builder
+     */
+    @NotNull
+    AdvancementBuilder display(
+        @NotNull ItemStack icon, @NotNull Component title, @Nullable Component description,
+        @Nullable NamespacedKey background, @NotNull AdvancementDisplay.Frame frame,
+        float x, float y, boolean showToast, boolean announceToChat, boolean hidden
+    );
+
+    /**
+     * Add a criterion.
+     * <br>
+     * Trigger is currently unavailable.
+     *
+     * @param name criterion name
+     * @return the builder
+     */
+    @NotNull
+    AdvancementBuilder addImpossibleCriterion(@NotNull String name);
+
+    /**
+     * Set the requirements criteria player need to complete the advancement.
+     *
+     * @param and if {@code true}, player have to complete all the criteria. (if {@code false}, OR)
+     * @return this builder
+     */
+    @NotNull
+    AdvancementBuilder requirements(boolean and);
+
+    /**
+     * Set the requirements criteria player need to complete the advancement.
+     *
+     * @param requirements the requirements
+     * @return this builder
+     */
+    @NotNull
+    AdvancementBuilder requirements(@NotNull String[][] requirements);
+
+    /**
+     * Use counts for this advancement. You don't need to set the criteria.
+     *
+     * @param count max count
+     * @return this builder
+     */
+    @NotNull
+    AdvancementBuilder useCount(int count);
+}
diff --git a/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementPreLoadEvent.java b/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementPreLoadEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..6f4375d1b0e21ded70b5ba24998f3a2eb81ffe8c
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementPreLoadEvent.java
@@ -0,0 +1,73 @@
+package moe.caramel.daydream.event.player;
+
+import com.google.gson.JsonElement;
+import org.bukkit.entity.Player;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * Called when just before load the player's Advancement data.
+ * <br>
+ * It's usually called earlier than {@link org.bukkit.event.player.PlayerJoinEvent}.
+ */
+public final class PlayerAdvancementPreLoadEvent extends PlayerEvent {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+    public @NotNull HandlerList getHandlers() { return HANDLER_LIST; }
+    public static @NotNull HandlerList getHandlerList() { return HANDLER_LIST; }
+
+    private JsonElement jsonElement;
+    private boolean useDataFixer = true;
+
+    public PlayerAdvancementPreLoadEvent(@NotNull Player who) {
+        super(who);
+    }
+
+    @Deprecated(forRemoval = true, since = "1.21")
+    public boolean isCancelled() {
+        return false;
+    }
+
+    @Deprecated(forRemoval = true, since = "1.21")
+    public void setCancelled(boolean cancel) {
+    }
+
+    /**
+     * Returns the Advancement json to be load.
+     *
+     * @return the Advancement json
+     */
+    @Nullable
+    public JsonElement getJsonElement() {
+        return jsonElement;
+    }
+
+    /**
+     * Sets the Advancement json to be load.
+     *
+     * @param jsonElement the Advancement json
+     */
+    public void setJsonElement(@NotNull JsonElement jsonElement) {
+        this.jsonElement = jsonElement;
+    }
+
+    /**
+     * Returns whether to use Mojang's DataFixer or not.
+     *
+     * @return if {@code true}, use Mojang's DataFixer.
+     */
+    public boolean useDataFixer() {
+        return this.useDataFixer;
+    }
+
+    /**
+     * Sets whether to use Mojang's DataFixer or not.
+     *
+     * @param useDataFixer if {@code true}, use Mojang's DataFixer.
+     */
+    public void useDataFixer(boolean useDataFixer) {
+        this.useDataFixer = useDataFixer;
+    }
+}
diff --git a/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementSaveEvent.java b/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementSaveEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..1fac043c1bce4c846dcdf9c75fca8230ad75247f
--- /dev/null
+++ b/src/main/java/moe/caramel/daydream/event/player/PlayerAdvancementSaveEvent.java
@@ -0,0 +1,46 @@
+package moe.caramel.daydream.event.player;
+
+import com.google.gson.JsonElement;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when player Advancement data is saved.
+ */
+public final class PlayerAdvancementSaveEvent extends PlayerEvent implements Cancellable {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+    public @NotNull HandlerList getHandlers() { return HANDLER_LIST; }
+    public static @NotNull HandlerList getHandlerList() { return HANDLER_LIST; }
+
+    private final JsonElement jsonElement;
+    private boolean cancel;
+
+    public PlayerAdvancementSaveEvent(@NotNull Player who, @NotNull JsonElement jsonElement) {
+        super(who);
+        this.jsonElement = jsonElement;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return this.cancel;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancel = cancel;
+    }
+
+    /**
+     * Returns the Advancement json to be saved.
+     *
+     * @return the Advancement json
+     */
+    @NotNull
+    public JsonElement getJsonElement() {
+        return jsonElement;
+    }
+}
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index fc7cd00a1fa8b08f3ed389d3ddd6d268597bd376..eac96c397224d7101453492428813a977bb3b422 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -2306,6 +2306,19 @@ public final class Bukkit {
         return server.getAdvancement(key);
     }
 
+    // Daydream start
+    /**
+     * Create the advancement specified by this key.
+     *
+     * @param key unique advancement key
+     * @return advancement builder
+     */
+    @NotNull
+    public static moe.caramel.daydream.advancement.AdvancementBuilder createAdvancement(@NotNull NamespacedKey key) {
+        return server.createAdvancement(key);
+    }
+    // Daydream end
+
     /**
      * Get an iterator through all advancements. Advancements cannot be removed
      * from this iterator,
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index cc4d7f26fe22dde5db91c1cbd4050c21ba59bcfb..d66cce72610bdf26d4777790a684035e4b3cc44c 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -1973,6 +1973,17 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
     @Nullable
     Advancement getAdvancement(@NotNull NamespacedKey key);
 
+    // Daydream start
+    /**
+     * Create the advancement specified by this key.
+     *
+     * @param key unique advancement key
+     * @return advancement builder
+     */
+    @NotNull
+    moe.caramel.daydream.advancement.AdvancementBuilder createAdvancement(@NotNull NamespacedKey key);
+    // Daydream end
+
     /**
      * Get an iterator through all advancements. Advancements cannot be removed
      * from this iterator,
diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
index 6cd82d96e38c7f12128e7dd0f95b1ba257a36198..f569a1fd1b78ed3f3fd091bb3a0fee8c985630bb 100644
--- a/src/main/java/org/bukkit/UnsafeValues.java
+++ b/src/main/java/org/bukkit/UnsafeValues.java
@@ -74,6 +74,35 @@ public interface UnsafeValues {
      */
     Advancement loadAdvancement(NamespacedKey key, String advancement);
 
+    // Daydream start
+    /**
+     * Load an advancement represented by the specified builder into the server.
+     * <br>
+     * Loaded advancements will be deleted upon server restart and reload.
+     * <br>
+     * Callers should be prepared for {@link Exception} to be thrown.
+     *
+     * @param builder representation of the advancement
+     * @return the loaded advancement or null if an error occurred
+     */
+    default Advancement loadAdvancement(moe.caramel.daydream.advancement.AdvancementBuilder builder) {
+        return loadAdvancement(builder, false);
+    }
+
+    /**
+     * Load an advancement represented by the specified builder into the server.
+     * <br>
+     * Loaded advancements will be deleted upon server restart and reload.
+     * <br>
+     * Callers should be prepared for {@link Exception} to be thrown.
+     *
+     * @param builder representation of the advancement
+     * @param save save or not
+     * @return the loaded advancement or null if an error occurred
+     */
+    Advancement loadAdvancement(moe.caramel.daydream.advancement.AdvancementBuilder builder, boolean save);
+    // Daydream end
+
     /**
      * Delete an advancement which was loaded and saved by
      * {@link #loadAdvancement(org.bukkit.NamespacedKey, java.lang.String)}.
diff --git a/src/main/java/org/bukkit/advancement/Advancement.java b/src/main/java/org/bukkit/advancement/Advancement.java
index 243e5f2debad7f12210169e15ef0b29763e988bb..d0e8913003dfc95c6590a8864c66490441aac283 100644
--- a/src/main/java/org/bukkit/advancement/Advancement.java
+++ b/src/main/java/org/bukkit/advancement/Advancement.java
@@ -68,4 +68,19 @@ public interface Advancement extends Keyed {
     @NotNull
     Advancement getRoot();
     // Paper end
+    // Daydream start
+    /**
+     * Get the advancement uses the count.
+     *
+     * @return if the advancement uses the count, it returns {@code true}.
+     */
+    boolean useCount();
+
+    /**
+     * Get the advancement's max count.
+     *
+     * @return advancement's max count.
+     */
+    int maxCount();
+    // Daydream end
 }
diff --git a/src/main/java/org/bukkit/advancement/AdvancementProgress.java b/src/main/java/org/bukkit/advancement/AdvancementProgress.java
index f9bc179da071e7bd57cefc50d6763317fb643b74..532f51a1d537a342c0251d650cd503b100876201 100644
--- a/src/main/java/org/bukkit/advancement/AdvancementProgress.java
+++ b/src/main/java/org/bukkit/advancement/AdvancementProgress.java
@@ -67,4 +67,40 @@ public interface AdvancementProgress {
      */
     @NotNull
     Collection<String> getAwardedCriteria();
+
+    // Daydream start
+    /**
+     * Increase the Advancement Progress.
+     *
+     * @throws UnsupportedOperationException This AdvancementProgress
+     * doesn't use counts.
+     * @return true if increased, false if already reached the
+     * maximum count.
+     */
+    boolean increaseCount();
+
+    /**
+     * Decrease the Advancement Progress.
+     *
+     * @throws UnsupportedOperationException This AdvancementProgress
+     * doesn't use counts.
+     * @return true if decreased, false if already reached the
+     * minimum count.
+     */
+    boolean decreaseCount();
+
+    /**
+     * Get the advancement uses the count.
+     *
+     * @return if the advancement uses the count, it returns {@code true}.
+     */
+    boolean useCount();
+
+    /**
+     * Get the advancement's count.
+     *
+     * @return advancement's count.
+     */
+    int count();
+    // Daydream end
 }
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 53fa6cea964d12e8600d0fe8caf4166237195c6a..6ce203131ffca7c87677d4a207d32d7b0e5df9fb 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -2659,6 +2659,36 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     @NotNull
     public AdvancementProgress getAdvancementProgress(@NotNull Advancement advancement);
 
+    // Daydream start
+    /**
+     * 플레이어의 직렬화된 발전과제 데이터를 가져옵니다.
+     *
+     * @return 직렬화된 발전과제 데이터
+     */
+    @NotNull
+    default com.google.gson.JsonElement serializedAdvancementProgress() {
+        return serializedAdvancementProgress(false);
+    }
+
+    /**
+     * 플레이어의 직렬화된 발전과제 데이터를 가져옵니다.
+     *
+     * @param withDataVersion 데이터 버전 포함 여부
+     * @return 직렬화된 발전과제 데이터
+     */
+    @NotNull
+    public com.google.gson.JsonElement serializedAdvancementProgress(boolean withDataVersion);
+
+    /**
+     * 플레이어에게 발전 과제 알림을 전송합니다.
+     *
+     * @param item 표시할 아이템
+     * @param title 표시할 제목
+     * @param frame 표시할 프레임
+     */
+    public void sendAdvancementAlert(@NotNull ItemStack item, @NotNull net.kyori.adventure.text.Component title, @NotNull io.papermc.paper.advancement.AdvancementDisplay.Frame frame);
+    // Daydream end
+
     /**
      * Get the player's current client side view distance.
      * <br>
